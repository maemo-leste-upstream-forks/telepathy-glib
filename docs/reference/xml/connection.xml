<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-connection">
<refmeta>
<refentrytitle role="top_of_page" id="telepathy-glib-connection.top_of_page">TpConnection</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>TpConnection</refname>
<refpurpose>proxy object for a Telepathy connection</refpurpose>
</refnamediv>

<refsynopsisdiv id="telepathy-glib-connection.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>
<anchor id="TpConnection"/>
<synopsis>

#include &lt;telepathy-glib/connection.h&gt;

<link linkend="void">void</link>                (<link linkend="TpConnectionNameListCb">*TpConnectionNameListCb</link>)           (const <link linkend="gchar">gchar</link> * const *names,
                                                         <link linkend="gsize">gsize</link> n,
                                                         const <link linkend="gchar">gchar</link> * const *cms,
                                                         const <link linkend="gchar">gchar</link> * const *protocols,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                <link linkend="tp-list-connection-names">tp_list_connection_names</link>            (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *bus_daemon,
                                                         <link linkend="TpConnectionNameListCb">TpConnectionNameListCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpConnection">TpConnection</link> *      <link linkend="tp-connection-new">tp_connection_new</link>                   (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *dbus,
                                                         const <link linkend="gchar">gchar</link> *bus_name,
                                                         const <link linkend="gchar">gchar</link> *object_path,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-connection-run-until-ready">tp_connection_run_until_ready</link>       (<link linkend="TpConnection">TpConnection</link> *self,
                                                         <link linkend="gboolean">gboolean</link> connect,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="void">void</link>                (<link linkend="TpConnectionWhenReadyCb">*TpConnectionWhenReadyCb</link>)          (<link linkend="TpConnection">TpConnection</link> *connection,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="tp-connection-call-when-ready">tp_connection_call_when_ready</link>       (<link linkend="TpConnection">TpConnection</link> *self,
                                                         <link linkend="TpConnectionWhenReadyCb">TpConnectionWhenReadyCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-connection-is-ready">tp_connection_is_ready</link>              (<link linkend="TpConnection">TpConnection</link> *self);
<link linkend="TpConnectionStatus">TpConnectionStatus</link>  <link linkend="tp-connection-get-status">tp_connection_get_status</link>            (<link linkend="TpConnection">TpConnection</link> *self,
                                                         <link linkend="TpConnectionStatusReason">TpConnectionStatusReason</link> *reason);
<link linkend="TpHandle">TpHandle</link>            <link linkend="tp-connection-get-self-handle">tp_connection_get_self_handle</link>       (<link linkend="TpConnection">TpConnection</link> *self);
<link linkend="void">void</link>                (<link linkend="TpConnectionRequestHandlesCb">*TpConnectionRequestHandlesCb</link>)     (<link linkend="TpConnection">TpConnection</link> *connection,
                                                         <link linkend="TpHandleType">TpHandleType</link> handle_type,
                                                         <link linkend="guint">guint</link> n_handles,
                                                         const <link linkend="TpHandle">TpHandle</link> *handles,
                                                         const <link linkend="gchar">gchar</link> * const *ids,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                <link linkend="tp-connection-request-handles">tp_connection_request_handles</link>       (<link linkend="TpConnection">TpConnection</link> *self,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="TpHandleType">TpHandleType</link> handle_type,
                                                         const <link linkend="gchar">gchar</link> * const *ids,
                                                         <link linkend="TpConnectionRequestHandlesCb">TpConnectionRequestHandlesCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="TpConnectionHoldHandlesCb">*TpConnectionHoldHandlesCb</link>)        (<link linkend="TpConnection">TpConnection</link> *connection,
                                                         <link linkend="TpHandleType">TpHandleType</link> handle_type,
                                                         <link linkend="guint">guint</link> n_handles,
                                                         const <link linkend="TpHandle">TpHandle</link> *handles,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                <link linkend="tp-connection-get-contact-attributes">tp_connection_get_contact_attributes</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *self,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> n_handles,
                                                         const <link linkend="TpHandle">TpHandle</link> *handles,
                                                         const <link linkend="gchar">gchar</link> * const *interfaces,
                                                         <link linkend="gboolean">gboolean</link> hold,
                                                         <link linkend="tp-cli-connection-interface-contacts-callback-for-get-contact-attributes">tp_cli_connection_interface_contacts_callback_for_get_contact_attributes</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                <link linkend="tp-connection-hold-handles">tp_connection_hold_handles</link>          (<link linkend="TpConnection">TpConnection</link> *self,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="TpHandleType">TpHandleType</link> handle_type,
                                                         <link linkend="guint">guint</link> n_handles,
                                                         const <link linkend="TpHandle">TpHandle</link> *handles,
                                                         <link linkend="TpConnectionHoldHandlesCb">TpConnectionHoldHandlesCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                <link linkend="tp-connection-unref-handles">tp_connection_unref_handles</link>         (<link linkend="TpConnection">TpConnection</link> *self,
                                                         <link linkend="TpHandleType">TpHandleType</link> handle_type,
                                                         <link linkend="guint">guint</link> n_handles,
                                                         const <link linkend="TpHandle">TpHandle</link> *handles);
<link linkend="void">void</link>                <link linkend="tp-connection-init-known-interfaces">tp_connection_init_known_interfaces</link> (void);
<link linkend="gint">gint</link>                <link linkend="tp-connection-presence-type-cmp-availability">tp_connection_presence_type_cmp_availability</link>
                                                        (<link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link> p1,
                                                         <link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link> p2);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-connection-parse-object-path">tp_connection_parse_object_path</link>     (<link linkend="TpConnection">TpConnection</link> *self,
                                                         <link linkend="gchar">gchar</link> **protocol,
                                                         <link linkend="gchar">gchar</link> **cm_name);
                    <link linkend="TpConnection-struct">TpConnection</link>;
                    <link linkend="TpConnectionClass">TpConnectionClass</link>;
#define             <link linkend="TP-UNKNOWN-CONNECTION-STATUS--CAPS">TP_UNKNOWN_CONNECTION_STATUS</link>
#define             <link linkend="TP-ERRORS-DISCONNECTED--CAPS">TP_ERRORS_DISCONNECTED</link>


<link linkend="void">void</link>                (<link linkend="tp-cli-connection-callback-for-connect">*tp_cli_connection_callback_for_connect</link>)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-connection-call-connect">tp_cli_connection_call_connect</link>     (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-connection-callback-for-connect">tp_cli_connection_callback_for_connect</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-connection-run-connect">tp_cli_connection_run_connect</link>       (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="void">void</link>                (<link linkend="tp-cli-connection-callback-for-disconnect">*tp_cli_connection_callback_for_disconnect</link>)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-connection-call-disconnect">tp_cli_connection_call_disconnect</link>  (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-connection-callback-for-disconnect">tp_cli_connection_callback_for_disconnect</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-connection-run-disconnect">tp_cli_connection_run_disconnect</link>    (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="void">void</link>                (<link linkend="tp-cli-connection-callback-for-get-interfaces">*tp_cli_connection_callback_for_get_interfaces</link>)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> **out_Interfaces,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-connection-call-get-interfaces">tp_cli_connection_call_get_interfaces</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-connection-callback-for-get-interfaces">tp_cli_connection_callback_for_get_interfaces</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-connection-run-get-interfaces">tp_cli_connection_run_get_interfaces</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="gchar">gchar</link> ***out_Interfaces,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="void">void</link>                (<link linkend="tp-cli-connection-callback-for-get-protocol">*tp_cli_connection_callback_for_get_protocol</link>)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *out_Protocol,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-connection-call-get-protocol">tp_cli_connection_call_get_protocol</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-connection-callback-for-get-protocol">tp_cli_connection_callback_for_get_protocol</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-connection-run-get-protocol">tp_cli_connection_run_get_protocol</link>  (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="gchar">gchar</link> **out_Protocol,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="void">void</link>                (<link linkend="tp-cli-connection-callback-for-get-self-handle">*tp_cli_connection_callback_for_get_self_handle</link>)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="guint">guint</link> out_Self_Handle,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-connection-call-get-self-handle">tp_cli_connection_call_get_self_handle</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-connection-callback-for-get-self-handle">tp_cli_connection_callback_for_get_self_handle</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-connection-run-get-self-handle">tp_cli_connection_run_get_self_handle</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> *out_Self_Handle,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="void">void</link>                (<link linkend="tp-cli-connection-callback-for-get-status">*tp_cli_connection_callback_for_get_status</link>)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="guint">guint</link> out_Status,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-connection-call-get-status">tp_cli_connection_call_get_status</link>  (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-connection-callback-for-get-status">tp_cli_connection_callback_for_get_status</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-connection-run-get-status">tp_cli_connection_run_get_status</link>    (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> *out_Status,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="void">void</link>                (<link linkend="tp-cli-connection-callback-for-hold-handles">*tp_cli_connection_callback_for_hold_handles</link>)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-connection-call-hold-handles">tp_cli_connection_call_hold_handles</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Handle_Type,
                                                         const <link linkend="GArray">GArray</link> *in_Handles,
                                                         <link linkend="tp-cli-connection-callback-for-hold-handles">tp_cli_connection_callback_for_hold_handles</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-connection-run-hold-handles">tp_cli_connection_run_hold_handles</link>  (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Handle_Type,
                                                         const <link linkend="GArray">GArray</link> *in_Handles,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="void">void</link>                (<link linkend="tp-cli-connection-callback-for-inspect-handles">*tp_cli_connection_callback_for_inspect_handles</link>)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> **out_Identifiers,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-connection-call-inspect-handles">tp_cli_connection_call_inspect_handles</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Handle_Type,
                                                         const <link linkend="GArray">GArray</link> *in_Handles,
                                                         <link linkend="tp-cli-connection-callback-for-inspect-handles">tp_cli_connection_callback_for_inspect_handles</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-connection-run-inspect-handles">tp_cli_connection_run_inspect_handles</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Handle_Type,
                                                         const <link linkend="GArray">GArray</link> *in_Handles,
                                                         <link linkend="gchar">gchar</link> ***out_Identifiers,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="void">void</link>                (<link linkend="tp-cli-connection-callback-for-list-channels">*tp_cli_connection_callback_for_list_channels</link>)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *out_Channel_Info,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-connection-call-list-channels">tp_cli_connection_call_list_channels</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-connection-callback-for-list-channels">tp_cli_connection_callback_for_list_channels</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-connection-run-list-channels">tp_cli_connection_run_list_channels</link> (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GPtrArray">GPtrArray</link> **out_Channel_Info,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="void">void</link>                (<link linkend="tp-cli-connection-callback-for-release-handles">*tp_cli_connection_callback_for_release_handles</link>)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-connection-call-release-handles">tp_cli_connection_call_release_handles</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Handle_Type,
                                                         const <link linkend="GArray">GArray</link> *in_Handles,
                                                         <link linkend="tp-cli-connection-callback-for-release-handles">tp_cli_connection_callback_for_release_handles</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-connection-run-release-handles">tp_cli_connection_run_release_handles</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Handle_Type,
                                                         const <link linkend="GArray">GArray</link> *in_Handles,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="void">void</link>                (<link linkend="tp-cli-connection-callback-for-request-channel">*tp_cli_connection_callback_for_request_channel</link>)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *out_Object_Path,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-connection-call-request-channel">tp_cli_connection_call_request_channel</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_Type,
                                                         <link linkend="guint">guint</link> in_Handle_Type,
                                                         <link linkend="guint">guint</link> in_Handle,
                                                         <link linkend="gboolean">gboolean</link> in_Suppress_Handler,
                                                         <link linkend="tp-cli-connection-callback-for-request-channel">tp_cli_connection_callback_for_request_channel</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-connection-run-request-channel">tp_cli_connection_run_request_channel</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_Type,
                                                         <link linkend="guint">guint</link> in_Handle_Type,
                                                         <link linkend="guint">guint</link> in_Handle,
                                                         <link linkend="gboolean">gboolean</link> in_Suppress_Handler,
                                                         <link linkend="gchar">gchar</link> **out_Object_Path,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="void">void</link>                (<link linkend="tp-cli-connection-callback-for-request-handles">*tp_cli_connection_callback_for_request_handles</link>)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="GArray">GArray</link> *out_Handles,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-connection-call-request-handles">tp_cli_connection_call_request_handles</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Handle_Type,
                                                         const <link linkend="gchar">gchar</link> **in_Identifiers,
                                                         <link linkend="tp-cli-connection-callback-for-request-handles">tp_cli_connection_callback_for_request_handles</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-connection-run-request-handles">tp_cli_connection_run_request_handles</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Handle_Type,
                                                         const <link linkend="gchar">gchar</link> **in_Identifiers,
                                                         <link linkend="GArray">GArray</link> **out_Handles,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="void">void</link>                (<link linkend="tp-cli-connection-signal-callback-new-channel">*tp_cli_connection_signal_callback_new_channel</link>)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg_Object_Path,
                                                         const <link linkend="gchar">gchar</link> *arg_Channel_Type,
                                                         <link linkend="guint">guint</link> arg_Handle_Type,
                                                         <link linkend="guint">guint</link> arg_Handle,
                                                         <link linkend="gboolean">gboolean</link> arg_Suppress_Handler,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-connection-connect-to-new-channel">tp_cli_connection_connect_to_new_channel</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="tp-cli-connection-signal-callback-new-channel">tp_cli_connection_signal_callback_new_channel</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                (<link linkend="tp-cli-connection-signal-callback-self-handle-changed">*tp_cli_connection_signal_callback_self_handle_changed</link>)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="guint">guint</link> arg_Self_Handle,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-connection-connect-to-self-handle-changed">tp_cli_connection_connect_to_self_handle_changed</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="tp-cli-connection-signal-callback-self-handle-changed">tp_cli_connection_signal_callback_self_handle_changed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                (<link linkend="tp-cli-connection-signal-callback-status-changed">*tp_cli_connection_signal_callback_status_changed</link>)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="guint">guint</link> arg_Status,
                                                         <link linkend="guint">guint</link> arg_Reason,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-connection-connect-to-status-changed">tp_cli_connection_connect_to_status_changed</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="tp-cli-connection-signal-callback-status-changed">tp_cli_connection_signal_callback_status_changed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                (<link linkend="tp-cli-connection-signal-callback-connection-error">*tp_cli_connection_signal_callback_connection_error</link>)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg_Error,
                                                         <link linkend="GHashTable">GHashTable</link> *arg_Details,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-connection-connect-to-connection-error">tp_cli_connection_connect_to_connection_error</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="tp-cli-connection-signal-callback-connection-error">tp_cli_connection_signal_callback_connection_error</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
</synopsis>
</refsynopsisdiv>

<refsect1 id="telepathy-glib-connection.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="TpProxy">TpProxy</link>
         +----TpConnection
</synopsis>
</refsect1>





<refsect1 id="telepathy-glib-connection.properties" role="properties">
<title role="properties.title">Properties</title>
<synopsis>
  &quot;<link linkend="TpConnection--connection-ready">connection-ready</link>&quot;         <link linkend="gboolean">gboolean</link>              : Read
  &quot;<link linkend="TpConnection--self-handle">self-handle</link>&quot;              <link linkend="guint">guint</link>                 : Read
  &quot;<link linkend="TpConnection--status">status</link>&quot;                   <link linkend="guint">guint</link>                 : Read
  &quot;<link linkend="TpConnection--status-reason">status-reason</link>&quot;            <link linkend="guint">guint</link>                 : Read
</synopsis>
</refsect1>



<refsect1 id="telepathy-glib-connection.description" role="desc">
<title role="desc.title">Description</title>
<para>
<link linkend="TpConnection"><type>TpConnection</type></link> objects represent Telepathy instant messaging connections
accessed via D-Bus.
</para>
<para>
Compared with a simple proxy for method calls, they add the following
features:
</para>
<para>
<itemizedlist>
<listitem>connection status tracking</listitem>
<listitem>calling <link linkend="GetInterfaces"><function>GetInterfaces()</function></link> automatically</listitem>
</itemizedlist></para>
<para>
</para>
</refsect1>

<refsect1 id="telepathy-glib-connection.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="TpConnectionNameListCb" role="function" condition="since:0.7.1">
<title>TpConnectionNameListCb ()</title>
<indexterm zone="TpConnectionNameListCb" role="0.7.1"><primary sortas="TpConnectionNameListCb">TpConnectionNameListCb</primary></indexterm><programlisting><link linkend="void">void</link>                (*TpConnectionNameListCb)           (const <link linkend="gchar">gchar</link> * const *names,
                                                         <link linkend="gsize">gsize</link> n,
                                                         const <link linkend="gchar">gchar</link> * const *cms,
                                                         const <link linkend="gchar">gchar</link> * const *protocols,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback supplied to <link linkend="tp-list-connection-names"><function>tp_list_connection_names()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>names</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link>-terminated array of <parameter>n</parameter> connection bus names,
  or <link linkend="NULL--CAPS"><literal>NULL</literal></link> on error
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&#160;:</term>
<listitem><simpara> number of names (not including the final <link linkend="NULL--CAPS"><literal>NULL</literal></link>), or 0 on error
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cms</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link>-terminated array of <parameter>n</parameter> connection manager names
  (e.g. "gabble") in the same order as <parameter>names</parameter>, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> on error
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>protocols</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link>-terminated array of <parameter>n</parameter> protocol names as defined in the
  Telepathy spec (e.g. "jabber") in the same order as <parameter>names</parameter>, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> on
  error
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error that occurred
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.1</para></refsect2>
<refsect2 id="tp-list-connection-names" role="function" condition="since:0.7.1">
<title>tp_list_connection_names ()</title>
<indexterm zone="tp-list-connection-names" role="0.7.1"><primary sortas="tp_list_connection_names">tp_list_connection_names</primary></indexterm><programlisting><link linkend="void">void</link>                tp_list_connection_names            (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *bus_daemon,
                                                         <link linkend="TpConnectionNameListCb">TpConnectionNameListCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
List the bus names of all the connections that currently exist, together
with the connection manager name and the protocol name for each connection.
Call the callback when done.
</para>
<para>
The bus names passed to the callback can be used to construct <link linkend="TpConnection"><type>TpConnection</type></link>
objects for any connections that are of interest.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bus_daemon</parameter>&#160;:</term>
<listitem><simpara> proxy for the D-Bus daemon
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> callback to be called when listing the connections succeeds or
  fails; not called if the D-Bus connection fails completely or if the
  <parameter>weak_object</parameter> goes away
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> callback to destroy the user-supplied data, called after
  <parameter>callback</parameter>, but also if the D-Bus connection fails or if the <parameter>weak_object</parameter>
  goes away
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> if not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, will be weakly referenced; the callback will
  not be called if the object has vanished
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.1</para></refsect2>
<refsect2 id="tp-connection-new" role="function" condition="since:0.7.1">
<title>tp_connection_new ()</title>
<indexterm zone="tp-connection-new" role="0.7.1"><primary sortas="tp_connection_new">tp_connection_new</primary></indexterm><programlisting><link linkend="TpConnection">TpConnection</link> *      tp_connection_new                   (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *dbus,
                                                         const <link linkend="gchar">gchar</link> *bus_name,
                                                         const <link linkend="gchar">gchar</link> *object_path,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
<!-- --></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>dbus</parameter>&#160;:</term>
<listitem><simpara> a D-Bus daemon; may not be <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bus_name</parameter>&#160;:</term>
<listitem><simpara> the well-known or unique name of the connection process;
 if well-known, this function will make a blocking call to the bus daemon
 to resolve the unique name. May be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>object_path</parameter> is not, in which
 case a well-known name will be derived from <parameter>object_path</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object_path</parameter>&#160;:</term>
<listitem><simpara> the object path of the connection process. May be <link linkend="NULL--CAPS"><literal>NULL</literal></link>
 if <parameter>bus_name</parameter> is a well-known name, in which case the object path will
 be derived from <parameter>bus_name</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> used to indicate the error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a new connection proxy, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if unique-name resolution
 fails or on invalid arguments

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.1</para></refsect2>
<refsect2 id="tp-connection-run-until-ready" role="function" condition="since:0.7.1">
<title>tp_connection_run_until_ready ()</title>
<indexterm zone="tp-connection-run-until-ready" role="0.7.1"><primary sortas="tp_connection_run_until_ready">tp_connection_run_until_ready</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_connection_run_until_ready       (<link linkend="TpConnection">TpConnection</link> *self,
                                                         <link linkend="gboolean">gboolean</link> connect,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
If <parameter>self</parameter> is connected and ready for use, return immediately. Otherwise,
call <link linkend="Connect"><function>Connect()</function></link> (unless <parameter>connect</parameter> is <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>) and re-enter the main loop
until the connection becomes invalid, the connection connects successfully
and is introspected, or the main loop stored via <parameter>loop</parameter> is cancelled.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a connection
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>connect</parameter>&#160;:</term>
<listitem><simpara> if <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>, call <link linkend="Connect"><function>Connect()</function></link> if it appears to be necessary;
 if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>, rely on <link linkend="Connect"><function>Connect()</function></link> to be called by another client
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> if not <link linkend="NULL--CAPS"><literal>NULL</literal></link> and <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> is returned, used to raise an error
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> if not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GMainLoop"><type>GMainLoop</type></link> is placed here while it is being run
 (so calling code can call <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link> to abort), and <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
 placed here after the loop has been run
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the connection is now connected and ready for use,
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if the connection has become invalid.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.1</para></refsect2>
<refsect2 id="TpConnectionWhenReadyCb" role="function">
<title>TpConnectionWhenReadyCb ()</title>
<indexterm zone="TpConnectionWhenReadyCb"><primary sortas="TpConnectionWhenReadyCb">TpConnectionWhenReadyCb</primary></indexterm><programlisting><link linkend="void">void</link>                (*TpConnectionWhenReadyCb)          (<link linkend="TpConnection">TpConnection</link> *connection,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Signature of a callback passed to <link linkend="tp-connection-call-when-ready"><function>tp_connection_call_when_ready()</function></link>, which
will be called exactly once, when the connection becomes ready or
invalid (whichever happens first)</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>connection</parameter>&#160;:</term>
<listitem><simpara> the connection (which may be in the middle of being disposed,
 if error is non-<link linkend="NULL--CAPS"><literal>NULL</literal></link>, error->domain is TP_DBUS_ERRORS and error->code is
 TP_DBUS_ERROR_PROXY_UNREFERENCED)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> if the connection is ready for use, or the error with which
 it was invalidated if it is now invalid
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> whatever was passed to <link linkend="tp-connection-call-when-ready"><function>tp_connection_call_when_ready()</function></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-connection-call-when-ready" role="function" condition="since:0.7.7">
<title>tp_connection_call_when_ready ()</title>
<indexterm zone="tp-connection-call-when-ready" role="0.7.7"><primary sortas="tp_connection_call_when_ready">tp_connection_call_when_ready</primary></indexterm><programlisting><link linkend="void">void</link>                tp_connection_call_when_ready       (<link linkend="TpConnection">TpConnection</link> *self,
                                                         <link linkend="TpConnectionWhenReadyCb">TpConnectionWhenReadyCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
If <parameter>self</parameter> is ready for use or has been invalidated, call <parameter>callback</parameter>
immediately, then return. Otherwise, arrange
for <parameter>callback</parameter> to be called when <parameter>self</parameter> either becomes ready for use
or becomes invalid.
</para>
<para>
Note that if the connection is not in state CONNECTED, the callback will
not be called until the connection either goes to state CONNECTED
or is invalidated (e.g. by going to state DISCONNECTED or by becoming
unreferenced). In particular, this method does not call <link linkend="Connect"><function>Connect()</function></link>.
Call <link linkend="tp-cli-connection-call-connect"><function>tp_cli_connection_call_connect()</function></link> too, if you want to do that.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a connection
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the connection becomes ready or invalidated,
 whichever happens first
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> arbitrary user-supplied data passed to the callback
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.7</para></refsect2>
<refsect2 id="tp-connection-is-ready" role="function" condition="since:0.7.17">
<title>tp_connection_is_ready ()</title>
<indexterm zone="tp-connection-is-ready" role="0.7.17"><primary sortas="tp_connection_is_ready">tp_connection_is_ready</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_connection_is_ready              (<link linkend="TpConnection">TpConnection</link> *self);</programlisting>
<para>
Returns the same thing as the <link linkend="TpConnection--connection-ready"><type>"connection-ready"</type></link> property.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a connection
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if introspection has completed
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.17</para></refsect2>
<refsect2 id="tp-connection-get-status" role="function" condition="since:0.7.14">
<title>tp_connection_get_status ()</title>
<indexterm zone="tp-connection-get-status" role="0.7.14"><primary sortas="tp_connection_get_status">tp_connection_get_status</primary></indexterm><programlisting><link linkend="TpConnectionStatus">TpConnectionStatus</link>  tp_connection_get_status            (<link linkend="TpConnection">TpConnection</link> *self,
                                                         <link linkend="TpConnectionStatusReason">TpConnectionStatusReason</link> *reason);</programlisting>
<para>
If <parameter>reason</parameter> is not <link linkend="NULL--CAPS"><literal>NULL</literal></link> it is set to the reason why "status" changed to its
current value, or <link linkend="TP-CONNECTION-STATUS-REASON-NONE-SPECIFIED--CAPS"><literal>TP_CONNECTION_STATUS_REASON_NONE_SPECIFIED</literal></link> if unknown.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a connection
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reason</parameter>&#160;:</term>
<listitem><simpara> a TpConnectionStatusReason, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> This connection's status, or <link linkend="TP-UNKNOWN-CONNECTION-STATUS--CAPS"><literal>TP_UNKNOWN_CONNECTION_STATUS</literal></link> if we
don't know yet.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.14</para></refsect2>
<refsect2 id="tp-connection-get-self-handle" role="function" condition="since:0.7.26">
<title>tp_connection_get_self_handle ()</title>
<indexterm zone="tp-connection-get-self-handle" role="0.7.26"><primary sortas="tp_connection_get_self_handle">tp_connection_get_self_handle</primary></indexterm><programlisting><link linkend="TpHandle">TpHandle</link>            tp_connection_get_self_handle       (<link linkend="TpConnection">TpConnection</link> *self);</programlisting>
<para>
Return the <link linkend="TP-HANDLE-TYPE-CONTACT--CAPS"><literal>TP_HANDLE_TYPE_CONTACT</literal></link> handle of the local user on this
connection, or 0 if the connection is not ready (the
TpConnection:connection-ready property is false) or has become invalid
(the TpProxy::invalidated signal).
</para>
<para>
The returned handle is not necessarily valid forever (the
notify::self-handle signal will be emitted if it changes, which can happen
on protocols such as IRC). Construct a <link linkend="TpContact"><type>TpContact</type></link> object if you want to
track the local user's identifier in the protocol, or other information
like their presence status, over time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a connection
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the value of the TpConnection:self-handle property

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.26</para></refsect2>
<refsect2 id="TpConnectionRequestHandlesCb" role="function">
<title>TpConnectionRequestHandlesCb ()</title>
<indexterm zone="TpConnectionRequestHandlesCb"><primary sortas="TpConnectionRequestHandlesCb">TpConnectionRequestHandlesCb</primary></indexterm><programlisting><link linkend="void">void</link>                (*TpConnectionRequestHandlesCb)     (<link linkend="TpConnection">TpConnection</link> *connection,
                                                         <link linkend="TpHandleType">TpHandleType</link> handle_type,
                                                         <link linkend="guint">guint</link> n_handles,
                                                         const <link linkend="TpHandle">TpHandle</link> *handles,
                                                         const <link linkend="gchar">gchar</link> * const *ids,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when <link linkend="tp-connection-request-handles"><function>tp_connection_request_handles()</function></link>
succeeds or fails.
</para>
<para>
On success, the caller has one reference to each handle in <parameter>handles</parameter>, which
may be released later with <link linkend="tp-connection-unref-handles"><function>tp_connection_unref_handles()</function></link>. If not
released, the handles will remain valid until <parameter>connection</parameter> becomes invalid
(signalled by TpProxy::invalidated).
</para>
<para>
For convenience, the handle type and IDs requested by the caller are
passed through to this callback, so the caller does not have to include
them in <parameter>user_data</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>connection</parameter>&#160;:</term>
<listitem><simpara> the connection
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handle_type</parameter>&#160;:</term>
<listitem><simpara> the handle type that was passed to
 <link linkend="tp-connection-request-handles"><function>tp_connection_request_handles()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_handles</parameter>&#160;:</term>
<listitem><simpara> the number of IDs that were passed to
 <link linkend="tp-connection-request-handles"><function>tp_connection_request_handles()</function></link> on success, or 0 on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handles</parameter>&#160;:</term>
<listitem><simpara> the <parameter>n_handles</parameter> handles corresponding to <parameter>ids</parameter>, in the same order,
 or <link linkend="NULL--CAPS"><literal>NULL</literal></link> on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ids</parameter>&#160;:</term>
<listitem><simpara> a copy of the array of <parameter>n_handles</parameter> IDs that was passed to
 <link linkend="tp-connection-request-handles"><function>tp_connection_request_handles()</function></link> on success, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> the same arbitrary pointer that was passed to
 <link linkend="tp-connection-request-handles"><function>tp_connection_request_handles()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> the same object that was passed to
 <link linkend="tp-connection-request-handles"><function>tp_connection_request_handles()</function></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-connection-request-handles" role="function">
<title>tp_connection_request_handles ()</title>
<indexterm zone="tp-connection-request-handles"><primary sortas="tp_connection_request_handles">tp_connection_request_handles</primary></indexterm><programlisting><link linkend="void">void</link>                tp_connection_request_handles       (<link linkend="TpConnection">TpConnection</link> *self,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="TpHandleType">TpHandleType</link> handle_type,
                                                         const <link linkend="gchar">gchar</link> * const *ids,
                                                         <link linkend="TpConnectionRequestHandlesCb">TpConnectionRequestHandlesCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Request the handles corresponding to the given identifiers, and if they
are valid, hold (ensure a reference to) the corresponding handles.
</para>
<para>
If they are valid, the callback will later be called with the given
handles; if not all of them are valid, the callback will be called with
an error.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a connection
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handle_type</parameter>&#160;:</term>
<listitem><simpara> the handle type
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ids</parameter>&#160;:</term>
<listitem><simpara> an array of string identifiers for which handles are required,
 terminated by <link linkend="NULL--CAPS"><literal>NULL</literal></link> (must not be <link linkend="NULL--CAPS"><literal>NULL</literal></link> or empty)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called on success or failure (unless <parameter>weak_object</parameter> has become
 unreferenced)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> arbitrary user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called to destroy <parameter>user_data</parameter> after calling <parameter>callback</parameter>, or when
 <parameter>weak_object</parameter> becomes unreferenced (whichever occurs sooner)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> if not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, an object to be weakly referenced: if it is
 destroyed, <parameter>callback</parameter> will not be called
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TpConnectionHoldHandlesCb" role="function">
<title>TpConnectionHoldHandlesCb ()</title>
<indexterm zone="TpConnectionHoldHandlesCb"><primary sortas="TpConnectionHoldHandlesCb">TpConnectionHoldHandlesCb</primary></indexterm><programlisting><link linkend="void">void</link>                (*TpConnectionHoldHandlesCb)        (<link linkend="TpConnection">TpConnection</link> *connection,
                                                         <link linkend="TpHandleType">TpHandleType</link> handle_type,
                                                         <link linkend="guint">guint</link> n_handles,
                                                         const <link linkend="TpHandle">TpHandle</link> *handles,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when <link linkend="tp-connection-hold-handles"><function>tp_connection_hold_handles()</function></link> succeeds
or fails.
</para>
<para>
On success, the caller has one reference to each handle in <parameter>handles</parameter>, which
may be released later with <link linkend="tp-connection-unref-handles"><function>tp_connection_unref_handles()</function></link>. If not
released, the handles will remain valid until <parameter>connection</parameter> becomes invalid
(signalled by <link linkend="TpProxy-invalidated"><type>"invalidated"</type></link>).
</para>
<para>
For convenience, the handle type and handles requested by the caller are
passed through to this callback on success, so the caller does not have to
include them in <parameter>user_data</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>connection</parameter>&#160;:</term>
<listitem><simpara> the connection
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handle_type</parameter>&#160;:</term>
<listitem><simpara> the handle type that was passed to
 <link linkend="tp-connection-hold-handles"><function>tp_connection_hold_handles()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_handles</parameter>&#160;:</term>
<listitem><simpara> the number of handles that were passed to
 <link linkend="tp-connection-hold-handles"><function>tp_connection_hold_handles()</function></link> on success, or 0 on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handles</parameter>&#160;:</term>
<listitem><simpara> a copy of the array of <parameter>n_handles</parameter> handles that was passed to
 <link linkend="tp-connection-hold-handles"><function>tp_connection_hold_handles()</function></link> on success, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> the same arbitrary pointer that was passed to
 <link linkend="tp-connection-hold-handles"><function>tp_connection_hold_handles()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> the same object that was passed to
 <link linkend="tp-connection-hold-handles"><function>tp_connection_hold_handles()</function></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-connection-get-contact-attributes" role="function">
<title>tp_connection_get_contact_attributes ()</title>
<indexterm zone="tp-connection-get-contact-attributes"><primary sortas="tp_connection_get_contact_attributes">tp_connection_get_contact_attributes</primary></indexterm><programlisting><link linkend="void">void</link>                tp_connection_get_contact_attributes
                                                        (<link linkend="TpConnection">TpConnection</link> *self,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> n_handles,
                                                         const <link linkend="TpHandle">TpHandle</link> *handles,
                                                         const <link linkend="gchar">gchar</link> * const *interfaces,
                                                         <link linkend="gboolean">gboolean</link> hold,
                                                         <link linkend="tp-cli-connection-interface-contacts-callback-for-get-contact-attributes">tp_cli_connection_interface_contacts_callback_for_get_contact_attributes</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Return (via a callback) any number of attributes of the given handles, and
if they are valid and <parameter>hold</parameter> is TRUE, hold a reference to them.
</para>
<para>
This is a thin wrapper around the GetContactAttributes D-Bus method, and
should be used in preference to
<link linkend="tp-cli-connection-interface-contacts-get-contact-attributes"><function>tp_cli_connection_interface_contacts_get_contact_attributes()</function></link>; mixing this
function, <link linkend="tp-connection-hold-handles"><function>tp_connection_hold_handles()</function></link>, <link linkend="tp-connection-unref-handles"><function>tp_connection_unref_handles()</function></link>, and
<link linkend="TpContact"><type>TpContact</type></link> with direct use of the RequestHandles, HoldHandles and
GetContactAttributes D-Bus methods is unwise, as <link linkend="TpConnection"><type>TpConnection</type></link> and
<link linkend="TpContact"><type>TpContact</type></link> perform client-side reference counting of handles.
The <link linkend="TpContact"><type>TpContact</type></link> API provides a higher-level abstraction which should
usually be used instead.
</para>
<para>
<parameter>callback</parameter> will later be called with the attributes of those of the given
handles that were valid. Invalid handles are simply omitted from the
parameter to the callback.
</para>
<para>
If <parameter>hold</parameter> is <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>, the <parameter>callback</parameter> is given one reference to each handle
that appears as a key in the callback's <parameter>attributes</parameter> parameter.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a connection
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_handles</parameter>&#160;:</term>
<listitem><simpara> the number of handles in <parameter>handles</parameter> (must be at least 1)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handles</parameter>&#160;:</term>
<listitem><simpara> an array of handles
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>interfaces</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GStrv"><type>GStrv</type></link> of interfaces
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hold</parameter>&#160;:</term>
<listitem><simpara> if <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>, the callback will hold one reference to each valid handle
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called on success or failure (unless <parameter>weak_object</parameter> has become
 unreferenced)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> arbitrary user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called to destroy <parameter>user_data</parameter> after calling <parameter>callback</parameter>, or when
 <parameter>weak_object</parameter> becomes unreferenced (whichever occurs sooner)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> if not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, an object to be weakly referenced: if it is
 destroyed, <parameter>callback</parameter> will not be called
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-connection-hold-handles" role="function">
<title>tp_connection_hold_handles ()</title>
<indexterm zone="tp-connection-hold-handles"><primary sortas="tp_connection_hold_handles">tp_connection_hold_handles</primary></indexterm><programlisting><link linkend="void">void</link>                tp_connection_hold_handles          (<link linkend="TpConnection">TpConnection</link> *self,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="TpHandleType">TpHandleType</link> handle_type,
                                                         <link linkend="guint">guint</link> n_handles,
                                                         const <link linkend="TpHandle">TpHandle</link> *handles,
                                                         <link linkend="TpConnectionHoldHandlesCb">TpConnectionHoldHandlesCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Hold (ensure a reference to) the given handles, if they are valid.
</para>
<para>
If they are valid, the callback will later be called with the given
handles; if not all of them are valid, the callback will be called with
an error.
</para>
<para>
This function, along with <link linkend="tp-connection-unref-handles"><function>tp_connection_unref_handles()</function></link>,
<link linkend="tp-connection-get-contact-attributes"><function>tp_connection_get_contact_attributes()</function></link> and <link linkend="TpContact"><type>TpContact</type></link>, keeps a client-side
reference count of handles; you should not use the RequestHandles,
HoldHandles and GetContactAttributes D-Bus methods directly as well as these
functions.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a connection
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handle_type</parameter>&#160;:</term>
<listitem><simpara> the handle type
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_handles</parameter>&#160;:</term>
<listitem><simpara> the number of handles in <parameter>handles</parameter> (must be at least 1)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handles</parameter>&#160;:</term>
<listitem><simpara> an array of handles
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called on success or failure (unless <parameter>weak_object</parameter> has become
 unreferenced)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> arbitrary user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called to destroy <parameter>user_data</parameter> after calling <parameter>callback</parameter>, or when
 <parameter>weak_object</parameter> becomes unreferenced (whichever occurs sooner)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> if not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, an object to be weakly referenced: if it is
 destroyed, <parameter>callback</parameter> will not be called
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-connection-unref-handles" role="function">
<title>tp_connection_unref_handles ()</title>
<indexterm zone="tp-connection-unref-handles"><primary sortas="tp_connection_unref_handles">tp_connection_unref_handles</primary></indexterm><programlisting><link linkend="void">void</link>                tp_connection_unref_handles         (<link linkend="TpConnection">TpConnection</link> *self,
                                                         <link linkend="TpHandleType">TpHandleType</link> handle_type,
                                                         <link linkend="guint">guint</link> n_handles,
                                                         const <link linkend="TpHandle">TpHandle</link> *handles);</programlisting>
<para>
Release the reference to the handles in <parameter>handles</parameter> that was obtained by
calling <link linkend="tp-connection-hold-handles"><function>tp_connection_hold_handles()</function></link> or <link linkend="tp-connection-request-handles"><function>tp_connection_request_handles()</function></link>.
</para>
<para>
This function might release any references held by calling
<link linkend="tp-cli-connection-call-request-handles"><function>tp_cli_connection_call_request_handles()</function></link>,
<link linkend="tp-cli-connection-run-request-handles"><function>tp_cli_connection_run_request_handles()</function></link>,
<link linkend="tp-cli-connection-call-hold-handles"><function>tp_cli_connection_call_hold_handles()</function></link>,
<link linkend="tp-cli-connection-run-hold-handles"><function>tp_cli_connection_run_hold_handles()</function></link>,
<link linkend="tp-cli-connection-interface-contacts-call-get-contact-attributes"><function>tp_cli_connection_interface_contacts_call_get_contact_attributes()</function></link> or
<link linkend="tp-cli-connection-interface-contacts-run-get-contact-attributes"><function>tp_cli_connection_interface_contacts_run_get_contact_attributes()</function></link> directly.
Those functions should be avoided in favour of using <link linkend="TpContact"><type>TpContact</type></link>,
<link linkend="tp-connection-hold-handles"><function>tp_connection_hold_handles()</function></link>, <link linkend="tp-connection-request-handles"><function>tp_connection_request_handles()</function></link> and
<link linkend="tp-connection-get-contact-attributes"><function>tp_connection_get_contact_attributes()</function></link>, which along with this function
perform client-side reference counting of handles.
</para>
<para>
If <parameter>self</parameter> has already become invalid, this function does nothing.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a connection
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handle_type</parameter>&#160;:</term>
<listitem><simpara> a handle type
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_handles</parameter>&#160;:</term>
<listitem><simpara> the number of handles in <parameter>handles</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handles</parameter>&#160;:</term>
<listitem><simpara> an array of <parameter>n_handles</parameter> handles
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-connection-init-known-interfaces" role="function" condition="since:0.7.6">
<title>tp_connection_init_known_interfaces ()</title>
<indexterm zone="tp-connection-init-known-interfaces" role="0.7.6"><primary sortas="tp_connection_init_known_interfaces">tp_connection_init_known_interfaces</primary></indexterm><programlisting><link linkend="void">void</link>                tp_connection_init_known_interfaces (void);</programlisting>
<para>
Ensure that the known interfaces for TpConnection have been set up.
This is done automatically when necessary, but for correct
overriding of library interfaces by local extensions, you should
call this function before calling
<link linkend="tp-proxy-or-subclass-hook-on-interface-add"><function>tp_proxy_or_subclass_hook_on_interface_add()</function></link> with first argument
<link linkend="TP-TYPE-CONNECTION--CAPS"><literal>TP_TYPE_CONNECTION</literal></link>.</para>
<para>
</para><para role="since">Since 0.7.6</para></refsect2>
<refsect2 id="tp-connection-presence-type-cmp-availability" role="function" condition="since:0.7.16">
<title>tp_connection_presence_type_cmp_availability ()</title>
<indexterm zone="tp-connection-presence-type-cmp-availability" role="0.7.16"><primary sortas="tp_connection_presence_type_cmp_availability">tp_connection_presence_type_cmp_availability</primary></indexterm><programlisting><link linkend="gint">gint</link>                tp_connection_presence_type_cmp_availability
                                                        (<link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link> p1,
                                                         <link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link> p2);</programlisting>
<para>
Compares <parameter>p1</parameter> and <parameter>p2</parameter> like <link linkend="strcmp"><function>strcmp()</function></link>. <parameter>p1</parameter> &gt; <parameter>p2</parameter> means <parameter>p1</parameter> is more available
than <parameter>p2</parameter>.
</para>
<para>
The order used is: available &gt; busy &gt; away &gt; xa &gt; hidden &gt; offline &gt; error &gt;
unknown &gt; unset</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>p1</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpConnectionPresenceType"><type>TpConnectionPresenceType</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>p2</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpConnectionPresenceType"><type>TpConnectionPresenceType</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> -1, 0 or 1, if <parameter>p1</parameter> is &lt;, == or &gt; than <parameter>p2</parameter>.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.16</para></refsect2>
<refsect2 id="tp-connection-parse-object-path" role="function" condition="since:0.7.27">
<title>tp_connection_parse_object_path ()</title>
<indexterm zone="tp-connection-parse-object-path" role="0.7.27"><primary sortas="tp_connection_parse_object_path">tp_connection_parse_object_path</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_connection_parse_object_path     (<link linkend="TpConnection">TpConnection</link> *self,
                                                         <link linkend="gchar">gchar</link> **protocol,
                                                         <link linkend="gchar">gchar</link> **cm_name);</programlisting>
<para>
If the object path of <parameter>connection</parameter> is in the correct form, set
<parameter>protocol</parameter> and <parameter>cm_name</parameter>, return TRUE. Otherwise leave them unchanged and
return FALSE.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a connection
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>protocol</parameter>&#160;:</term>
<listitem><simpara> If not NULL, used to return the protocol of the connection
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cm_name</parameter>&#160;:</term>
<listitem><simpara> If not NULL, used to return the connection manager name of the
connection
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the object path was correctly parsed, FALSE otherwise.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.27</para></refsect2>
<refsect2 id="TpConnection-struct" role="struct">
<title>TpConnection</title>
<indexterm zone="TpConnection-struct" role="0.7.1"><primary sortas="TpConnection">TpConnection</primary></indexterm><programlisting>typedef struct _TpConnection TpConnection;</programlisting>
<para>
A proxy object for a Telepathy connection.
</para>
<para>
(Changed in 0.7.12: the layout of the structure is visible, allowing
subclassing.)</para>
<para>
</para><variablelist role="struct">
</variablelist><para role="since">Since 0.7.1</para></refsect2>
<refsect2 id="TpConnectionClass" role="struct" condition="since:0.7.1">
<title>TpConnectionClass</title>
<indexterm zone="TpConnectionClass" role="0.7.1"><primary sortas="TpConnectionClass">TpConnectionClass</primary></indexterm><programlisting>typedef struct {
    TpProxyClass parent_class;
} TpConnectionClass;
</programlisting>
<para>
The class of a <link linkend="TpConnection"><type>TpConnection</type></link>. In addition to <parameter>parent_class</parameter> there are four
pointers reserved for possible future use.
</para>
<para>
(Changed in 0.7.12: the layout of the structure is visible, allowing
subclassing.)</para>
<para>
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="TpProxyClass">TpProxyClass</link>&#160;<structfield>parent_class</structfield>;</term>
<listitem><simpara> the parent class
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since 0.7.1</para></refsect2>
<refsect2 id="TP-UNKNOWN-CONNECTION-STATUS--CAPS" role="macro" condition="since:0.7.1">
<title>TP_UNKNOWN_CONNECTION_STATUS</title>
<indexterm zone="TP-UNKNOWN-CONNECTION-STATUS--CAPS" role="0.7.1"><primary sortas="TP_UNKNOWN_CONNECTION_STATUS">TP_UNKNOWN_CONNECTION_STATUS</primary></indexterm><programlisting>#define TP_UNKNOWN_CONNECTION_STATUS ((TpConnectionStatus) -1)
</programlisting>
<para>
An invalid connection status used in <link linkend="TpConnection"><type>TpConnection</type></link> to indicate that the
status has not yet been discovered.</para>
<para>
</para><para role="since">Since 0.7.1</para></refsect2>
<refsect2 id="TP-ERRORS-DISCONNECTED--CAPS" role="macro" condition="since:0.7.1">
<title>TP_ERRORS_DISCONNECTED</title>
<indexterm zone="TP-ERRORS-DISCONNECTED--CAPS" role="0.7.1"><primary sortas="TP_ERRORS_DISCONNECTED">TP_ERRORS_DISCONNECTED</primary></indexterm><programlisting>#define TP_ERRORS_DISCONNECTED (tp_errors_disconnected_quark ())
</programlisting>
<para>
<link linkend="GError"><type>GError</type></link> domain representing a Telepathy connection becoming disconnected.
The <parameter>code</parameter> in a <link linkend="GError"><type>GError</type></link> with this domain must be a member of
<link linkend="TpConnectionStatusReason"><type>TpConnectionStatusReason</type></link>.
</para>
<para>
This macro expands to a function call returning a <link linkend="GQuark"><type>GQuark</type></link>.</para>
<para>
</para><para role="since">Since 0.7.1</para></refsect2>
<refsect2 id="tp-cli-connection-callback-for-connect" role="function">
<title>tp_cli_connection_callback_for_connect ()</title>
<indexterm zone="tp-cli-connection-callback-for-connect"><primary sortas="tp_cli_connection_callback_for_connect">tp_cli_connection_callback_for_connect</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_connection_callback_for_connect)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a Connect method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-call-connect" role="function">
<title>tp_cli_connection_call_connect ()</title>
<indexterm zone="tp-cli-connection-call-connect"><primary sortas="tp_cli_connection_call_connect">tp_cli_connection_call_connect</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_connection_call_connect     (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-connection-callback-for-connect">tp_cli_connection_callback_for_connect</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a Connect method call.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;Request that the connection be established. This will be done           asynchronously and errors will be returned by emitting           &lt;tp:member-ref&gt;StatusChanged&lt;/tp:member-ref&gt; signals.&lt;/p&gt;          &lt;p&gt;Calling this method on a Connection that is already connecting           or connected is allowed, and has no effect.&lt;/p&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-run-connect" role="function">
<title>tp_cli_connection_run_connect ()</title>
<indexterm zone="tp-cli-connection-run-connect"><primary sortas="tp_cli_connection_run_connect">tp_cli_connection_run_connect</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_connection_run_connect       (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method Connect and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;Request that the connection be established. This will be done           asynchronously and errors will be returned by emitting           &lt;tp:member-ref&gt;StatusChanged&lt;/tp:member-ref&gt; signals.&lt;/p&gt;          &lt;p&gt;Calling this method on a Connection that is already connecting           or connected is allowed, and has no effect.&lt;/p&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpConnection"><type>TpConnection</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-callback-for-disconnect" role="function">
<title>tp_cli_connection_callback_for_disconnect ()</title>
<indexterm zone="tp-cli-connection-callback-for-disconnect"><primary sortas="tp_cli_connection_callback_for_disconnect">tp_cli_connection_callback_for_disconnect</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_connection_callback_for_disconnect)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a Disconnect method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-call-disconnect" role="function">
<title>tp_cli_connection_call_disconnect ()</title>
<indexterm zone="tp-cli-connection-call-disconnect"><primary sortas="tp_cli_connection_call_disconnect">tp_cli_connection_call_disconnect</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_connection_call_disconnect  (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-connection-callback-for-disconnect">tp_cli_connection_callback_for_disconnect</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a Disconnect method call.
</para>
<para>
Request that the connection be closed. This closes the connection if         it&apos;s not already in DISCONNECTED state, and destroys the connection         object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-run-disconnect" role="function">
<title>tp_cli_connection_run_disconnect ()</title>
<indexterm zone="tp-cli-connection-run-disconnect"><primary sortas="tp_cli_connection_run_disconnect">tp_cli_connection_run_disconnect</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_connection_run_disconnect    (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method Disconnect and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Request that the connection be closed. This closes the connection if         it&apos;s not already in DISCONNECTED state, and destroys the connection         object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpConnection"><type>TpConnection</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-callback-for-get-interfaces" role="function">
<title>tp_cli_connection_callback_for_get_interfaces ()</title>
<indexterm zone="tp-cli-connection-callback-for-get-interfaces"><primary sortas="tp_cli_connection_callback_for_get_interfaces">tp_cli_connection_callback_for_get_interfaces</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_connection_callback_for_get_interfaces)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> **out_Interfaces,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a GetInterfaces method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Interfaces</parameter>&#160;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>: An array of D-Bus interface names
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-call-get-interfaces" role="function">
<title>tp_cli_connection_call_get_interfaces ()</title>
<indexterm zone="tp-cli-connection-call-get-interfaces"><primary sortas="tp_cli_connection_call_get_interfaces">tp_cli_connection_call_get_interfaces</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_connection_call_get_interfaces
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-connection-callback-for-get-interfaces">tp_cli_connection_callback_for_get_interfaces</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a GetInterfaces method call.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;Get the optional interfaces supported by this connection.           Before the connection status changes to CONNECTED, the return           from this method may change at any time, but it is guaranteed that           interfaces will only be added, not removed. After the connection           status changes to CONNECTED, the return from this method cannot           change further.&lt;/p&gt;          &lt;p&gt;There is no explicit change notification; reasonable behaviour           for a client would be to retrieve the interfaces list once           initially, and once more when it becomes CONNECTED.&lt;/p&gt;          &lt;tp:rationale&gt;           &lt;p&gt;In some connection managers, certain capabilities of a connection             are known to be implemented for all connections (e.g. support             for SimplePresence), and some interfaces (like SimplePresence) can             even be used before connecting. Other capabilities may             or may not exist, depending on server functionality; by the time             the connection goes CONNECTED, the connection manager is expected             to have evaluated the server&apos;s functionality and enabled any extra             interfaces for the remainder of the Connection&apos;s lifetime.&lt;/p&gt;         &lt;/tp:rationale&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-run-get-interfaces" role="function">
<title>tp_cli_connection_run_get_interfaces ()</title>
<indexterm zone="tp-cli-connection-run-get-interfaces"><primary sortas="tp_cli_connection_run_get_interfaces">tp_cli_connection_run_get_interfaces</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_connection_run_get_interfaces
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="gchar">gchar</link> ***out_Interfaces,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method GetInterfaces and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;Get the optional interfaces supported by this connection.           Before the connection status changes to CONNECTED, the return           from this method may change at any time, but it is guaranteed that           interfaces will only be added, not removed. After the connection           status changes to CONNECTED, the return from this method cannot           change further.&lt;/p&gt;          &lt;p&gt;There is no explicit change notification; reasonable behaviour           for a client would be to retrieve the interfaces list once           initially, and once more when it becomes CONNECTED.&lt;/p&gt;          &lt;tp:rationale&gt;           &lt;p&gt;In some connection managers, certain capabilities of a connection             are known to be implemented for all connections (e.g. support             for SimplePresence), and some interfaces (like SimplePresence) can             even be used before connecting. Other capabilities may             or may not exist, depending on server functionality; by the time             the connection goes CONNECTED, the connection manager is expected             to have evaluated the server&apos;s functionality and enabled any extra             interfaces for the remainder of the Connection&apos;s lifetime.&lt;/p&gt;         &lt;/tp:rationale&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpConnection"><type>TpConnection</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Interfaces</parameter>&#160;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> is returned: An array of D-Bus interface names
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-callback-for-get-protocol" role="function">
<title>tp_cli_connection_callback_for_get_protocol ()</title>
<indexterm zone="tp-cli-connection-callback-for-get-protocol"><primary sortas="tp_cli_connection_callback_for_get_protocol">tp_cli_connection_callback_for_get_protocol</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_connection_callback_for_get_protocol)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *out_Protocol,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a GetProtocol method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Protocol</parameter>&#160;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>: A string identifier for the protocol
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-call-get-protocol" role="function">
<title>tp_cli_connection_call_get_protocol ()</title>
<indexterm zone="tp-cli-connection-call-get-protocol"><primary sortas="tp_cli_connection_call_get_protocol">tp_cli_connection_call_get_protocol</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_connection_call_get_protocol
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-connection-callback-for-get-protocol">tp_cli_connection_callback_for_get_protocol</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a GetProtocol method call.
</para>
<para>
Get the protocol this connection is using.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-run-get-protocol" role="function">
<title>tp_cli_connection_run_get_protocol ()</title>
<indexterm zone="tp-cli-connection-run-get-protocol"><primary sortas="tp_cli_connection_run_get_protocol">tp_cli_connection_run_get_protocol</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_connection_run_get_protocol  (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="gchar">gchar</link> **out_Protocol,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method GetProtocol and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Get the protocol this connection is using.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpConnection"><type>TpConnection</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Protocol</parameter>&#160;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> is returned: A string identifier for the protocol
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-callback-for-get-self-handle" role="function">
<title>tp_cli_connection_callback_for_get_self_handle ()</title>
<indexterm zone="tp-cli-connection-callback-for-get-self-handle"><primary sortas="tp_cli_connection_callback_for_get_self_handle">tp_cli_connection_callback_for_get_self_handle</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_connection_callback_for_get_self_handle)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="guint">guint</link> out_Self_Handle,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a GetSelfHandle method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Self_Handle</parameter>&#160;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>: The value of the &lt;tp:member-ref&gt;SelfHandle&lt;/tp:member-ref&gt; property
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-call-get-self-handle" role="function">
<title>tp_cli_connection_call_get_self_handle ()</title>
<indexterm zone="tp-cli-connection-call-get-self-handle"><primary sortas="tp_cli_connection_call_get_self_handle">tp_cli_connection_call_get_self_handle</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_connection_call_get_self_handle
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-connection-callback-for-get-self-handle">tp_cli_connection_callback_for_get_self_handle</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a GetSelfHandle method call.
</para>
<para>
Returns the value of the SelfHandle property. Change notification         is via the SelfHandleChanged signal.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-run-get-self-handle" role="function">
<title>tp_cli_connection_run_get_self_handle ()</title>
<indexterm zone="tp-cli-connection-run-get-self-handle"><primary sortas="tp_cli_connection_run_get_self_handle">tp_cli_connection_run_get_self_handle</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_connection_run_get_self_handle
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> *out_Self_Handle,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method GetSelfHandle and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Returns the value of the SelfHandle property. Change notification         is via the SelfHandleChanged signal.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpConnection"><type>TpConnection</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Self_Handle</parameter>&#160;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> is returned: The value of the &lt;tp:member-ref&gt;SelfHandle&lt;/tp:member-ref&gt; property
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-callback-for-get-status" role="function">
<title>tp_cli_connection_callback_for_get_status ()</title>
<indexterm zone="tp-cli-connection-callback-for-get-status"><primary sortas="tp_cli_connection_callback_for_get_status">tp_cli_connection_callback_for_get_status</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_connection_callback_for_get_status)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="guint">guint</link> out_Status,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a GetStatus method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Status</parameter>&#160;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>: An integer representing the current status
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-call-get-status" role="function">
<title>tp_cli_connection_call_get_status ()</title>
<indexterm zone="tp-cli-connection-call-get-status"><primary sortas="tp_cli_connection_call_get_status">tp_cli_connection_call_get_status</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_connection_call_get_status  (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-connection-callback-for-get-status">tp_cli_connection_callback_for_get_status</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a GetStatus method call.
</para>
<para>
Get the current status as defined in the         &lt;tp:member-ref&gt;StatusChanged&lt;/tp:member-ref&gt; signal.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-run-get-status" role="function">
<title>tp_cli_connection_run_get_status ()</title>
<indexterm zone="tp-cli-connection-run-get-status"><primary sortas="tp_cli_connection_run_get_status">tp_cli_connection_run_get_status</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_connection_run_get_status    (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> *out_Status,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method GetStatus and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Get the current status as defined in the         &lt;tp:member-ref&gt;StatusChanged&lt;/tp:member-ref&gt; signal.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpConnection"><type>TpConnection</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Status</parameter>&#160;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> is returned: An integer representing the current status
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-callback-for-hold-handles" role="function">
<title>tp_cli_connection_callback_for_hold_handles ()</title>
<indexterm zone="tp-cli-connection-callback-for-hold-handles"><primary sortas="tp_cli_connection_callback_for_hold_handles">tp_cli_connection_callback_for_hold_handles</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_connection_callback_for_hold_handles)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a HoldHandles method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-call-hold-handles" role="function">
<title>tp_cli_connection_call_hold_handles ()</title>
<indexterm zone="tp-cli-connection-call-hold-handles"><primary sortas="tp_cli_connection_call_hold_handles">tp_cli_connection_call_hold_handles</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_connection_call_hold_handles
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Handle_Type,
                                                         const <link linkend="GArray">GArray</link> *in_Handles,
                                                         <link linkend="tp-cli-connection-callback-for-hold-handles">tp_cli_connection_callback_for_hold_handles</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a HoldHandles method call.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;Notify the connection manger that your client is holding a copy         of handles which may not be in use in any existing channel or         list, and were not obtained by using the         &lt;tp:member-ref&gt;RequestHandles&lt;/tp:member-ref&gt; method. For         example, a handle observed in an emitted signal, or displayed         somewhere in the UI that is not associated with a channel. The         connection manager must not deallocate a handle where any clients         have used this method to indicate it is in use until the         &lt;tp:member-ref&gt;ReleaseHandles&lt;/tp:member-ref&gt;         method is called, or the clients disappear from the bus.&lt;/p&gt;          &lt;p&gt;Note that HoldHandles is idempotent - calling it multiple times           is equivalent to calling it once. If a handle is &amp;quot;referenced&amp;quot; by           several components which share a D-Bus unique name, the client           should perform reference counting internally, and only call           ReleaseHandles when none of the cooperating components need the           handle any longer.&lt;/p&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Handle_Type</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: The type of handle to be held
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Handles</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: A array of integer handles to hold
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-run-hold-handles" role="function">
<title>tp_cli_connection_run_hold_handles ()</title>
<indexterm zone="tp-cli-connection-run-hold-handles"><primary sortas="tp_cli_connection_run_hold_handles">tp_cli_connection_run_hold_handles</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_connection_run_hold_handles  (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Handle_Type,
                                                         const <link linkend="GArray">GArray</link> *in_Handles,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method HoldHandles and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;Notify the connection manger that your client is holding a copy         of handles which may not be in use in any existing channel or         list, and were not obtained by using the         &lt;tp:member-ref&gt;RequestHandles&lt;/tp:member-ref&gt; method. For         example, a handle observed in an emitted signal, or displayed         somewhere in the UI that is not associated with a channel. The         connection manager must not deallocate a handle where any clients         have used this method to indicate it is in use until the         &lt;tp:member-ref&gt;ReleaseHandles&lt;/tp:member-ref&gt;         method is called, or the clients disappear from the bus.&lt;/p&gt;          &lt;p&gt;Note that HoldHandles is idempotent - calling it multiple times           is equivalent to calling it once. If a handle is &amp;quot;referenced&amp;quot; by           several components which share a D-Bus unique name, the client           should perform reference counting internally, and only call           ReleaseHandles when none of the cooperating components need the           handle any longer.&lt;/p&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpConnection"><type>TpConnection</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Handle_Type</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: The type of handle to be held
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Handles</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: A array of integer handles to hold
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-callback-for-inspect-handles" role="function">
<title>tp_cli_connection_callback_for_inspect_handles ()</title>
<indexterm zone="tp-cli-connection-callback-for-inspect-handles"><primary sortas="tp_cli_connection_callback_for_inspect_handles">tp_cli_connection_callback_for_inspect_handles</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_connection_callback_for_inspect_handles)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> **out_Identifiers,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a InspectHandles method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Identifiers</parameter>&#160;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>: An array of identifiers corresponding to the given handles, in the same order.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-call-inspect-handles" role="function">
<title>tp_cli_connection_call_inspect_handles ()</title>
<indexterm zone="tp-cli-connection-call-inspect-handles"><primary sortas="tp_cli_connection_call_inspect_handles">tp_cli_connection_call_inspect_handles</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_connection_call_inspect_handles
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Handle_Type,
                                                         const <link linkend="GArray">GArray</link> *in_Handles,
                                                         <link linkend="tp-cli-connection-callback-for-inspect-handles">tp_cli_connection_callback_for_inspect_handles</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a InspectHandles method call.
</para>
<para>
Return a string representation for a number of handles of a given         type.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Handle_Type</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: The type of handle to be inspected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Handles</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: An array of integer handles of this type
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-run-inspect-handles" role="function">
<title>tp_cli_connection_run_inspect_handles ()</title>
<indexterm zone="tp-cli-connection-run-inspect-handles"><primary sortas="tp_cli_connection_run_inspect_handles">tp_cli_connection_run_inspect_handles</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_connection_run_inspect_handles
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Handle_Type,
                                                         const <link linkend="GArray">GArray</link> *in_Handles,
                                                         <link linkend="gchar">gchar</link> ***out_Identifiers,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method InspectHandles and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Return a string representation for a number of handles of a given         type.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpConnection"><type>TpConnection</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Handle_Type</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: The type of handle to be inspected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Handles</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: An array of integer handles of this type
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Identifiers</parameter>&#160;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> is returned: An array of identifiers corresponding to the given handles, in the same order.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-callback-for-list-channels" role="function">
<title>tp_cli_connection_callback_for_list_channels ()</title>
<indexterm zone="tp-cli-connection-callback-for-list-channels"><primary sortas="tp_cli_connection_callback_for_list_channels">tp_cli_connection_callback_for_list_channels</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_connection_callback_for_list_channels)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *out_Channel_Info,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a ListChannels method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Channel_Info</parameter>&#160;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>: An array of structs representing channels.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-call-list-channels" role="function">
<title>tp_cli_connection_call_list_channels ()</title>
<indexterm zone="tp-cli-connection-call-list-channels"><primary sortas="tp_cli_connection_call_list_channels">tp_cli_connection_call_list_channels</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_connection_call_list_channels
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-connection-callback-for-list-channels">tp_cli_connection_callback_for_list_channels</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a ListChannels method call.
</para>
<para>
List all the channels which currently exist on this connection.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-run-list-channels" role="function">
<title>tp_cli_connection_run_list_channels ()</title>
<indexterm zone="tp-cli-connection-run-list-channels"><primary sortas="tp_cli_connection_run_list_channels">tp_cli_connection_run_list_channels</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_connection_run_list_channels (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GPtrArray">GPtrArray</link> **out_Channel_Info,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method ListChannels and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
List all the channels which currently exist on this connection.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpConnection"><type>TpConnection</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Channel_Info</parameter>&#160;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> is returned: An array of structs representing channels.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-callback-for-release-handles" role="function">
<title>tp_cli_connection_callback_for_release_handles ()</title>
<indexterm zone="tp-cli-connection-callback-for-release-handles"><primary sortas="tp_cli_connection_callback_for_release_handles">tp_cli_connection_callback_for_release_handles</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_connection_callback_for_release_handles)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a ReleaseHandles method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-call-release-handles" role="function">
<title>tp_cli_connection_call_release_handles ()</title>
<indexterm zone="tp-cli-connection-call-release-handles"><primary sortas="tp_cli_connection_call_release_handles">tp_cli_connection_call_release_handles</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_connection_call_release_handles
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Handle_Type,
                                                         const <link linkend="GArray">GArray</link> *in_Handles,
                                                         <link linkend="tp-cli-connection-callback-for-release-handles">tp_cli_connection_callback_for_release_handles</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a ReleaseHandles method call.
</para>
<para>
Explicitly notify the connection manager that your client is no         longer holding any references to the given handles, and that they         may be deallocated if they are not held by any other clients or         referenced by any existing channels. See HoldHandles for notes.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Handle_Type</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: An integer handle type (as defined in RequestHandle)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Handles</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: An array of integer handles being held by the client
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-run-release-handles" role="function">
<title>tp_cli_connection_run_release_handles ()</title>
<indexterm zone="tp-cli-connection-run-release-handles"><primary sortas="tp_cli_connection_run_release_handles">tp_cli_connection_run_release_handles</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_connection_run_release_handles
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Handle_Type,
                                                         const <link linkend="GArray">GArray</link> *in_Handles,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method ReleaseHandles and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Explicitly notify the connection manager that your client is no         longer holding any references to the given handles, and that they         may be deallocated if they are not held by any other clients or         referenced by any existing channels. See HoldHandles for notes.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpConnection"><type>TpConnection</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Handle_Type</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: An integer handle type (as defined in RequestHandle)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Handles</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: An array of integer handles being held by the client
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-callback-for-request-channel" role="function">
<title>tp_cli_connection_callback_for_request_channel ()</title>
<indexterm zone="tp-cli-connection-callback-for-request-channel"><primary sortas="tp_cli_connection_callback_for_request_channel">tp_cli_connection_callback_for_request_channel</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_connection_callback_for_request_channel)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *out_Object_Path,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a RequestChannel method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Object_Path</parameter>&#160;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>: The D-Bus object path for the channel created or retrieved
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-call-request-channel" role="function">
<title>tp_cli_connection_call_request_channel ()</title>
<indexterm zone="tp-cli-connection-call-request-channel"><primary sortas="tp_cli_connection_call_request_channel">tp_cli_connection_call_request_channel</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_connection_call_request_channel
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_Type,
                                                         <link linkend="guint">guint</link> in_Handle_Type,
                                                         <link linkend="guint">guint</link> in_Handle,
                                                         <link linkend="gboolean">gboolean</link> in_Suppress_Handler,
                                                         <link linkend="tp-cli-connection-callback-for-request-channel">tp_cli_connection_callback_for_request_channel</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a RequestChannel method call.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;Request a channel satisfying the specified type and communicating           with the contact, room, list etc. indicated by the given           handle_type and handle. The handle_type and handle may both be           zero to request the creation of a new, empty channel, which may           or may not be possible, depending on the protocol and channel           type.&lt;/p&gt;          &lt;p&gt;On success, the returned channel will always be of the requested           type (i.e. implement the requested channel-type interface).&lt;/p&gt;          &lt;p&gt;If a new, empty channel is requested, on success the returned           channel will always be an &amp;quot;anonymous&amp;quot; channel for which the type           and handle are both zero.&lt;/p&gt;          &lt;p&gt;If a channel to a contact, room etc. is requested, on success, the           returned channel may either be a new or existing channel to           the requested entity (i.e. its           &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.Channel&quot;&gt;TargetHandleType&lt;/tp:dbus-ref&gt;           and &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.Channel&quot;&gt;TargetHandle&lt;/tp:dbus-ref&gt;           properties are the           requested handle type and handle), or a newly created &amp;quot;anonymous&amp;quot;           channel associated with the requested handle in some           implementation-specific way.&lt;/p&gt;          &lt;p&gt;For example, for a contact handle, the returned channel           might be &amp;quot;anonymous&amp;quot;, but implement the groups interface and have           the requested contact already present among the members.&lt;/p&gt;          &lt;p&gt;If the request cannot be satisfied, an error is raised and no           channel is created.&lt;/p&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Type</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: A D-Bus interface name representing base channel type
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Handle_Type</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: An integer representing the handle type, or Handle_Type_None if           no handle is specified
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Handle</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: A nonzero integer handle representing a contact, room, list etc.           according to handle_type, or zero if the handle_type is           Handle_Type_None
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Suppress_Handler</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: &lt;p&gt;Clients SHOULD always set this to true.&lt;/p&gt;            &lt;tp:rationale&gt;             &lt;p&gt;The historical meaning was that clients that did not               intend to take responsibility for displaying the channel to               the user could set this to FALSE, in which case the channel               dispatcher would launch an appropriate channel handler.&lt;/p&gt;              &lt;p&gt;However, clients whose functionality relies on having a               working channel dispatcher should obtain that functionality by               calling methods on the channel dispatcher, so that they will               get an appropriate error if the channel dispatcher is missing               or not working.&lt;/p&gt;              &lt;p&gt;The channel dispatcher itself should set this to true too,               so that it will ignore the               &lt;tp:member-ref&gt;NewChannel&lt;/tp:member-ref&gt; signal that results               from the creation of the channel. It can then dispatch the               channel returned from this method to an               appropriate handler.&lt;/p&gt;              &lt;p&gt;So, there is no sensible use-case for setting this to false,               and setting it to false can result in unhandled channels (in               the case where clients assume that a channel dispatcher is               present, but it isn&apos;t).&lt;/p&gt;           &lt;/tp:rationale&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-run-request-channel" role="function">
<title>tp_cli_connection_run_request_channel ()</title>
<indexterm zone="tp-cli-connection-run-request-channel"><primary sortas="tp_cli_connection_run_request_channel">tp_cli_connection_run_request_channel</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_connection_run_request_channel
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_Type,
                                                         <link linkend="guint">guint</link> in_Handle_Type,
                                                         <link linkend="guint">guint</link> in_Handle,
                                                         <link linkend="gboolean">gboolean</link> in_Suppress_Handler,
                                                         <link linkend="gchar">gchar</link> **out_Object_Path,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method RequestChannel and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;Request a channel satisfying the specified type and communicating           with the contact, room, list etc. indicated by the given           handle_type and handle. The handle_type and handle may both be           zero to request the creation of a new, empty channel, which may           or may not be possible, depending on the protocol and channel           type.&lt;/p&gt;          &lt;p&gt;On success, the returned channel will always be of the requested           type (i.e. implement the requested channel-type interface).&lt;/p&gt;          &lt;p&gt;If a new, empty channel is requested, on success the returned           channel will always be an &amp;quot;anonymous&amp;quot; channel for which the type           and handle are both zero.&lt;/p&gt;          &lt;p&gt;If a channel to a contact, room etc. is requested, on success, the           returned channel may either be a new or existing channel to           the requested entity (i.e. its           &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.Channel&quot;&gt;TargetHandleType&lt;/tp:dbus-ref&gt;           and &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.Channel&quot;&gt;TargetHandle&lt;/tp:dbus-ref&gt;           properties are the           requested handle type and handle), or a newly created &amp;quot;anonymous&amp;quot;           channel associated with the requested handle in some           implementation-specific way.&lt;/p&gt;          &lt;p&gt;For example, for a contact handle, the returned channel           might be &amp;quot;anonymous&amp;quot;, but implement the groups interface and have           the requested contact already present among the members.&lt;/p&gt;          &lt;p&gt;If the request cannot be satisfied, an error is raised and no           channel is created.&lt;/p&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpConnection"><type>TpConnection</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Type</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: A D-Bus interface name representing base channel type
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Handle_Type</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: An integer representing the handle type, or Handle_Type_None if           no handle is specified
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Handle</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: A nonzero integer handle representing a contact, room, list etc.           according to handle_type, or zero if the handle_type is           Handle_Type_None
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Suppress_Handler</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: &lt;p&gt;Clients SHOULD always set this to true.&lt;/p&gt;            &lt;tp:rationale&gt;             &lt;p&gt;The historical meaning was that clients that did not               intend to take responsibility for displaying the channel to               the user could set this to FALSE, in which case the channel               dispatcher would launch an appropriate channel handler.&lt;/p&gt;              &lt;p&gt;However, clients whose functionality relies on having a               working channel dispatcher should obtain that functionality by               calling methods on the channel dispatcher, so that they will               get an appropriate error if the channel dispatcher is missing               or not working.&lt;/p&gt;              &lt;p&gt;The channel dispatcher itself should set this to true too,               so that it will ignore the               &lt;tp:member-ref&gt;NewChannel&lt;/tp:member-ref&gt; signal that results               from the creation of the channel. It can then dispatch the               channel returned from this method to an               appropriate handler.&lt;/p&gt;              &lt;p&gt;So, there is no sensible use-case for setting this to false,               and setting it to false can result in unhandled channels (in               the case where clients assume that a channel dispatcher is               present, but it isn&apos;t).&lt;/p&gt;           &lt;/tp:rationale&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Object_Path</parameter>&#160;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> is returned: The D-Bus object path for the channel created or retrieved
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-callback-for-request-handles" role="function">
<title>tp_cli_connection_callback_for_request_handles ()</title>
<indexterm zone="tp-cli-connection-callback-for-request-handles"><primary sortas="tp_cli_connection_callback_for_request_handles">tp_cli_connection_callback_for_request_handles</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_connection_callback_for_request_handles)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="GArray">GArray</link> *out_Handles,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a RequestHandles method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Handles</parameter>&#160;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>: An array of integer handle numbers in the same order as the given identifiers.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-call-request-handles" role="function">
<title>tp_cli_connection_call_request_handles ()</title>
<indexterm zone="tp-cli-connection-call-request-handles"><primary sortas="tp_cli_connection_call_request_handles">tp_cli_connection_call_request_handles</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_connection_call_request_handles
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Handle_Type,
                                                         const <link linkend="gchar">gchar</link> **in_Identifiers,
                                                         <link linkend="tp-cli-connection-callback-for-request-handles">tp_cli_connection_callback_for_request_handles</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a RequestHandles method call.
</para>
<para>
Request several handles from the connection manager which represent a         number of contacts, rooms or server-stored lists on the service. The         connection manager should record that these handles are in use by the         client who invokes this method, and must not deallocate the handles         until the client disconnects from the bus or calls the         &lt;tp:member-ref&gt;ReleaseHandles&lt;/tp:member-ref&gt;         method. Where the identifier refers to an entity that already has a         handle in this connection manager, this handle should be returned         instead. The handle number 0 must not be returned by the connection         manager.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Handle_Type</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: The type of handle required
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Identifiers</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: An array of identifiers of entities to request handles for
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-run-request-handles" role="function">
<title>tp_cli_connection_run_request_handles ()</title>
<indexterm zone="tp-cli-connection-run-request-handles"><primary sortas="tp_cli_connection_run_request_handles">tp_cli_connection_run_request_handles</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_connection_run_request_handles
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Handle_Type,
                                                         const <link linkend="gchar">gchar</link> **in_Identifiers,
                                                         <link linkend="GArray">GArray</link> **out_Handles,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method RequestHandles and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Request several handles from the connection manager which represent a         number of contacts, rooms or server-stored lists on the service. The         connection manager should record that these handles are in use by the         client who invokes this method, and must not deallocate the handles         until the client disconnects from the bus or calls the         &lt;tp:member-ref&gt;ReleaseHandles&lt;/tp:member-ref&gt;         method. Where the identifier refers to an entity that already has a         handle in this connection manager, this handle should be returned         instead. The handle number 0 must not be returned by the connection         manager.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpConnection"><type>TpConnection</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Handle_Type</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: The type of handle required
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Identifiers</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: An array of identifiers of entities to request handles for
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Handles</parameter>&#160;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> is returned: An array of integer handle numbers in the same order as the given identifiers.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-signal-callback-new-channel" role="function">
<title>tp_cli_connection_signal_callback_new_channel ()</title>
<indexterm zone="tp-cli-connection-signal-callback-new-channel"><primary sortas="tp_cli_connection_signal_callback_new_channel">tp_cli_connection_signal_callback_new_channel</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_connection_signal_callback_new_channel)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg_Object_Path,
                                                         const <link linkend="gchar">gchar</link> *arg_Channel_Type,
                                                         <link linkend="guint">guint</link> arg_Handle_Type,
                                                         <link linkend="guint">guint</link> arg_Handle,
                                                         <link linkend="gboolean">gboolean</link> arg_Suppress_Handler,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal NewChannel.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-connection-connect-to-new-channel"><function>tp_cli_connection_connect_to_new_channel()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Object_Path</parameter>&#160;:</term>
<listitem><simpara> A D-Bus object path for the channel object on this service
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Channel_Type</parameter>&#160;:</term>
<listitem><simpara> A D-Bus interface name representing the channel type
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Handle_Type</parameter>&#160;:</term>
<listitem><simpara> An integer representing the type of handle this channel           communicates with, or Handle_Type_None if no handle is specified
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Handle</parameter>&#160;:</term>
<listitem><simpara> A handle indicating the specific contact, room or list this           channel communicates with, or zero if no handle is specified
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Suppress_Handler</parameter>&#160;:</term>
<listitem><simpara> &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           &lt;p&gt;If true, the channel was requested by a client that intends to             present it to the user itself (i.e. it passed suppress_handler=TRUE             to the &lt;tp:member-ref&gt;RequestChannel&lt;/tp:member-ref&gt; method), so no             other handler should be             launched. Clients MAY assume that channels where this is true             were created by a user request.&lt;/p&gt;            &lt;p&gt;If false, either the channel was created due to incoming             information from the service, or the channel was requested by             a local client that does not intend to handle the channel itself             (this usage is deprecated).&lt;/p&gt;            &lt;p&gt;Clients MUST NOT assume that only incoming channels will have             this flag set to false.&lt;/p&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-connect-to-new-channel" role="function">
<title>tp_cli_connection_connect_to_new_channel ()</title>
<indexterm zone="tp-cli-connection-connect-to-new-channel"><primary sortas="tp_cli_connection_connect_to_new_channel">tp_cli_connection_connect_to_new_channel</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_connection_connect_to_new_channel
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="tp-cli-connection-signal-callback-new-channel">tp_cli_connection_signal_callback_new_channel</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal NewChannel.
</para>
<para>
Emitted when a new Channel object is created, either through user         request or incoming information from the service.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpConnection"><type>TpConnection</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-signal-callback-self-handle-changed" role="function">
<title>tp_cli_connection_signal_callback_self_handle_changed ()</title>
<indexterm zone="tp-cli-connection-signal-callback-self-handle-changed"><primary sortas="tp_cli_connection_signal_callback_self_handle_changed">tp_cli_connection_signal_callback_self_handle_changed</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_connection_signal_callback_self_handle_changed)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="guint">guint</link> arg_Self_Handle,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal SelfHandleChanged.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-connection-connect-to-self-handle-changed"><function>tp_cli_connection_connect_to_self_handle_changed()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Self_Handle</parameter>&#160;:</term>
<listitem><simpara> The new value of the SelfHandle property.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-connect-to-self-handle-changed" role="function">
<title>tp_cli_connection_connect_to_self_handle_changed ()</title>
<indexterm zone="tp-cli-connection-connect-to-self-handle-changed"><primary sortas="tp_cli_connection_connect_to_self_handle_changed">tp_cli_connection_connect_to_self_handle_changed</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_connection_connect_to_self_handle_changed
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="tp-cli-connection-signal-callback-self-handle-changed">tp_cli_connection_signal_callback_self_handle_changed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal SelfHandleChanged.
</para>
<para>
Emitted whenever the &lt;tp:member-ref&gt;SelfHandle&lt;/tp:member-ref&gt; property         changes. If the connection         is not yet in the CONNECTED state, this signal is not guaranteed         to be emitted.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpConnection"><type>TpConnection</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-signal-callback-status-changed" role="function">
<title>tp_cli_connection_signal_callback_status_changed ()</title>
<indexterm zone="tp-cli-connection-signal-callback-status-changed"><primary sortas="tp_cli_connection_signal_callback_status_changed">tp_cli_connection_signal_callback_status_changed</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_connection_signal_callback_status_changed)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="guint">guint</link> arg_Status,
                                                         <link linkend="guint">guint</link> arg_Reason,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal StatusChanged.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-connection-connect-to-status-changed"><function>tp_cli_connection_connect_to_status_changed()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Status</parameter>&#160;:</term>
<listitem><simpara> An integer indicating the new status, as defined by ConnectionStatus
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Reason</parameter>&#160;:</term>
<listitem><simpara> An integer indicating the reason for the status change, as defined           by ConnectionStatusReason
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-connect-to-status-changed" role="function">
<title>tp_cli_connection_connect_to_status_changed ()</title>
<indexterm zone="tp-cli-connection-connect-to-status-changed"><primary sortas="tp_cli_connection_connect_to_status_changed">tp_cli_connection_connect_to_status_changed</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_connection_connect_to_status_changed
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="tp-cli-connection-signal-callback-status-changed">tp_cli_connection_signal_callback_status_changed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal StatusChanged.
</para>
<para>
Emitted when the status of the connection changes.  All states and         reasons have numerical values, as defined in ConnectionStatus         and ConnectionStatusReason.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpConnection"><type>TpConnection</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-signal-callback-connection-error" role="function">
<title>tp_cli_connection_signal_callback_connection_error ()</title>
<indexterm zone="tp-cli-connection-signal-callback-connection-error"><primary sortas="tp_cli_connection_signal_callback_connection_error">tp_cli_connection_signal_callback_connection_error</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_connection_signal_callback_connection_error)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg_Error,
                                                         <link linkend="GHashTable">GHashTable</link> *arg_Details,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal ConnectionError.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-connection-connect-to-connection-error"><function>tp_cli_connection_connect_to_connection_error()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Error</parameter>&#160;:</term>
<listitem><simpara> The name of a D-Bus error describing the error that occurred,           which may correspond to a           &lt;tp:type&gt;Connection_Status_Reason&lt;/tp:type&gt;, or may be a more           specific Telepathy error           (such as           &lt;code&gt;org.freedesktop.Telepathy.Errors.ConnectionRefused&lt;/code&gt;           for Connection_Status_Reason_Network_Error)           or a protocol-specific or connection-manager-specific error in a           suitable namespace.            &lt;tp:rationale&gt;             For instance, a SIP connection manager could signal             &amp;quot;402 Payment Required&amp;quot; as an error in a             connection-manager-specific namespace, or a link-local             XMPP implementation that used Avahi could provide the error             given to it by the avahi-daemon.           &lt;/tp:rationale&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Details</parameter>&#160;:</term>
<listitem><simpara> &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           &lt;p&gt;Additional information about the error, which may include             the following well-known keys:&lt;/p&gt;            &lt;dl&gt;             &lt;dt&gt;debug-message (s)&lt;/dt&gt;             &lt;dd&gt;Debugging information on the change, corresponding to the               message part of a D-Bus error message, which SHOULD NOT be               displayed to users under normal circumstances&lt;/dd&gt;           &lt;/dl&gt;            &lt;tp:rationale&gt;             &lt;p&gt;This argument allows for future extensions. For instance,               if indicating DNS lookup failure, we could define a key               that indicates the hostname that could not be found.&lt;/p&gt;           &lt;/tp:rationale&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-connect-to-connection-error" role="function">
<title>tp_cli_connection_connect_to_connection_error ()</title>
<indexterm zone="tp-cli-connection-connect-to-connection-error"><primary sortas="tp_cli_connection_connect_to_connection_error">tp_cli_connection_connect_to_connection_error</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_connection_connect_to_connection_error
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="tp-cli-connection-signal-callback-connection-error">tp_cli_connection_signal_callback_connection_error</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal ConnectionError.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;Emitted when an error occurs that renders this connection unusable.         &lt;/p&gt;          &lt;p&gt;Whenever this signal is emitted, it MUST immediately be followed by           a &lt;tp:member-ref&gt;StatusChanged&lt;/tp:member-ref&gt; signal with status           Connection_Status_Reason_Disconnected and an appropriate reason           code.&lt;/p&gt;          &lt;p&gt;Connection managers SHOULD emit this signal on disconnection, but           need not do so. Clients MUST support connection managers that emit           StatusChanged(Disconnected, ...) without first emitting           ConnectionError.&lt;/p&gt;          &lt;tp:rationale&gt;           &lt;p&gt;This signal provides additional information about the reason             for disconnection. The reason for connection is always             straightforward - it was requested - so it does not need further             explanation. However, on errors, it can be useful to provide             additional information.&lt;/p&gt;            &lt;p&gt;The &lt;tp:type&gt;Connection_Status_Reason&lt;/tp:type&gt; is not given             here, since it will be signalled in             &lt;tp:member-ref&gt;StatusChanged&lt;/tp:member-ref&gt;. A reasonable client             implementation would be to store the information given by this             signal until StatusChanged is received, at which point the             information given by this signal can be used to supplement the             StatusChanged signal.&lt;/p&gt;         &lt;/tp:rationale&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpConnection"><type>TpConnection</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>
<refsect1 id="telepathy-glib-connection.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="TpConnection--connection-ready" role="property"><title>The <literal>&quot;connection-ready&quot;</literal> property</title>
<indexterm zone="TpConnection--connection-ready"><primary sortas="TpConnection:connection-ready">TpConnection:connection-ready</primary></indexterm><programlisting>  &quot;connection-ready&quot;         <link linkend="gboolean">gboolean</link>              : Read</programlisting>
<para>
Initially <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>; changes to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> when the connection has gone to
CONNECTED status, introspection has finished and it's ready for use.
</para>
<para>
By the time this property becomes <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>, any extra interfaces will
have been set up and the <link linkend="TpProxy--interfaces"><type>"interfaces"</type></link> property will have been
populated.</para>
<para>
</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="TpConnection--self-handle" role="property"><title>The <literal>&quot;self-handle&quot;</literal> property</title>
<indexterm zone="TpConnection--self-handle"><primary sortas="TpConnection:self-handle">TpConnection:self-handle</primary></indexterm><programlisting>  &quot;self-handle&quot;              <link linkend="guint">guint</link>                 : Read</programlisting>
<para>
The <link linkend="TP-HANDLE-TYPE-CONTACT--CAPS"><literal>TP_HANDLE_TYPE_CONTACT</literal></link> handle of the local user on this connection,
or 0 if we don't know yet or if the connection has become invalid.</para>
<para>
</para><para>Default value: 0</para>
</refsect2>
<refsect2 id="TpConnection--status" role="property"><title>The <literal>&quot;status&quot;</literal> property</title>
<indexterm zone="TpConnection--status"><primary sortas="TpConnection:status">TpConnection:status</primary></indexterm><programlisting>  &quot;status&quot;                   <link linkend="guint">guint</link>                 : Read</programlisting>
<para>
This connection's status, or TP_UNKNOWN_CONNECTION_STATUS if we don't
know yet.</para>
<para>
</para><para>Default value: 4294967295</para>
</refsect2>
<refsect2 id="TpConnection--status-reason" role="property"><title>The <literal>&quot;status-reason&quot;</literal> property</title>
<indexterm zone="TpConnection--status-reason"><primary sortas="TpConnection:status-reason">TpConnection:status-reason</primary></indexterm><programlisting>  &quot;status-reason&quot;            <link linkend="guint">guint</link>                 : Read</programlisting>
<para>
The reason why <link linkend="TpConnection--status"><type>"status"</type></link> changed to its current value,
or TP_CONNECTION_STATUS_REASON_NONE_SPECIFIED if unknown.
know yet.</para>
<para>
</para><para>Default value: 0</para>
</refsect2>
</refsect1>



<refsect1 id="telepathy-glib-connection.see-also">
<title>See Also</title>
#TpConnectionManager, <link linkend="TpChannel"><type>TpChannel</type></link>
</refsect1>

</refentry>
