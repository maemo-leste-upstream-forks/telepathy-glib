<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-account-manager">
<refmeta>
<refentrytitle role="top_of_page" id="telepathy-glib-account-manager.top_of_page">TpAccountManager</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>TpAccountManager</refname>
<refpurpose>proxy object for the Telepathy account manager</refpurpose>
</refnamediv>

<refsynopsisdiv id="telepathy-glib-account-manager.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>
<anchor id="TpAccountManager"/>
<synopsis>

#include &lt;telepathy-glib/account-manager.h&gt;

                    <link linkend="TpAccountManager-struct">TpAccountManager</link>;
                    <link linkend="TpAccountManagerClass">TpAccountManagerClass</link>;
<link linkend="TpAccountManager">TpAccountManager</link> *  <link linkend="tp-account-manager-new">tp_account_manager_new</link>              (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *bus_daemon);
<link linkend="void">void</link>                <link linkend="tp-account-manager-init-known-interfaces">tp_account_manager_init_known_interfaces</link>
                                                        (void);
<link linkend="TpAccountManager">TpAccountManager</link> *  <link linkend="tp-account-manager-dup">tp_account_manager_dup</link>              (void);
<link linkend="void">void</link>                <link linkend="tp-account-manager-create-account-async">tp_account_manager_create_account_async</link>
                                                        (<link linkend="TpAccountManager">TpAccountManager</link> *manager,
                                                         const <link linkend="gchar">gchar</link> *connection_manager,
                                                         const <link linkend="gchar">gchar</link> *protocol,
                                                         const <link linkend="gchar">gchar</link> *display_name,
                                                         <link linkend="GHashTable">GHashTable</link> *parameters,
                                                         <link linkend="GHashTable">GHashTable</link> *properties,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="TpAccount">TpAccount</link> *         <link linkend="tp-account-manager-create-account-finish">tp_account_manager_create_account_finish</link>
                                                        (<link linkend="TpAccountManager">TpAccountManager</link> *manager,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="TpAccount">TpAccount</link> *         <link linkend="tp-account-manager-ensure-account">tp_account_manager_ensure_account</link>   (<link linkend="TpAccountManager">TpAccountManager</link> *manager,
                                                         const <link linkend="gchar">gchar</link> *path);
<link linkend="GList">GList</link> *             <link linkend="tp-account-manager-get-valid-accounts">tp_account_manager_get_valid_accounts</link>
                                                        (<link linkend="TpAccountManager">TpAccountManager</link> *manager);
<link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link>  <link linkend="tp-account-manager-get-most-available-presence">tp_account_manager_get_most_available_presence</link>
                                                        (<link linkend="TpAccountManager">TpAccountManager</link> *manager,
                                                         <link linkend="gchar">gchar</link> **status,
                                                         <link linkend="gchar">gchar</link> **message);
<link linkend="void">void</link>                <link linkend="tp-account-manager-set-all-requested-presences">tp_account_manager_set_all_requested_presences</link>
                                                        (<link linkend="TpAccountManager">TpAccountManager</link> *manager,
                                                         <link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link> type,
                                                         const <link linkend="gchar">gchar</link> *status,
                                                         const <link linkend="gchar">gchar</link> *message);
<link linkend="void">void</link>                <link linkend="tp-account-manager-enable-restart">tp_account_manager_enable_restart</link>   (<link linkend="TpAccountManager">TpAccountManager</link> *manager);

#define             <link linkend="TP-ACCOUNT-MANAGER-FEATURE-CORE--CAPS">TP_ACCOUNT_MANAGER_FEATURE_CORE</link>
<link linkend="gboolean">gboolean</link>            <link linkend="tp-account-manager-is-prepared">tp_account_manager_is_prepared</link>      (<link linkend="TpAccountManager">TpAccountManager</link> *manager,
                                                         <link linkend="GQuark">GQuark</link> feature);
<link linkend="void">void</link>                <link linkend="tp-account-manager-prepare-async">tp_account_manager_prepare_async</link>    (<link linkend="TpAccountManager">TpAccountManager</link> *manager,
                                                         const <link linkend="GQuark">GQuark</link> *features,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-account-manager-prepare-finish">tp_account_manager_prepare_finish</link>   (<link linkend="TpAccountManager">TpAccountManager</link> *manager,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);


<link linkend="void">void</link>                (<link linkend="tp-cli-account-manager-callback-for-create-account">*tp_cli_account_manager_callback_for_create_account</link>)
                                                        (<link linkend="TpAccountManager">TpAccountManager</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *out_Account,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-account-manager-call-create-account">tp_cli_account_manager_call_create_account</link>
                                                        (<link linkend="TpAccountManager">TpAccountManager</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_Connection_Manager,
                                                         const <link linkend="gchar">gchar</link> *in_Protocol,
                                                         const <link linkend="gchar">gchar</link> *in_Display_Name,
                                                         <link linkend="GHashTable">GHashTable</link> *in_Parameters,
                                                         <link linkend="GHashTable">GHashTable</link> *in_Properties,
                                                         <link linkend="tp-cli-account-manager-callback-for-create-account">tp_cli_account_manager_callback_for_create_account</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-account-manager-signal-callback-account-removed">*tp_cli_account_manager_signal_callback_account_removed</link>)
                                                        (<link linkend="TpAccountManager">TpAccountManager</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg_Account,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-account-manager-connect-to-account-removed">tp_cli_account_manager_connect_to_account_removed</link>
                                                        (<link linkend="TpAccountManager">TpAccountManager</link> *proxy,
                                                         <link linkend="tp-cli-account-manager-signal-callback-account-removed">tp_cli_account_manager_signal_callback_account_removed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                (<link linkend="tp-cli-account-manager-signal-callback-account-validity-changed">*tp_cli_account_manager_signal_callback_account_validity_changed</link>)
                                                        (<link linkend="TpAccountManager">TpAccountManager</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg_Account,
                                                         <link linkend="gboolean">gboolean</link> arg_Valid,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-account-manager-connect-to-account-validity-changed">tp_cli_account_manager_connect_to_account_validity_changed</link>
                                                        (<link linkend="TpAccountManager">TpAccountManager</link> *proxy,
                                                         <link linkend="tp-cli-account-manager-signal-callback-account-validity-changed">tp_cli_account_manager_signal_callback_account_validity_changed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
</synopsis>
</refsynopsisdiv>

<refsect1 id="telepathy-glib-account-manager.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="TpProxy">TpProxy</link>
         +----TpAccountManager
</synopsis>
</refsect1>






<refsect1 id="telepathy-glib-account-manager.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="TpAccountManager-account-disabled">account-disabled</link>&quot;                               : Run Last
  &quot;<link linkend="TpAccountManager-account-enabled">account-enabled</link>&quot;                                : Run Last
  &quot;<link linkend="TpAccountManager-account-removed">account-removed</link>&quot;                                : Run Last
  &quot;<link linkend="TpAccountManager-account-validity-changed">account-validity-changed</link>&quot;                       : Run Last
  &quot;<link linkend="TpAccountManager-most-available-presence-changed">most-available-presence-changed</link>&quot;                : Run Last
</synopsis>
</refsect1>


<refsect1 id="telepathy-glib-account-manager.description" role="desc">
<title role="desc.title">Description</title>
<para>
The <link linkend="TpAccountManager"><type>TpAccountManager</type></link> object is used to communicate with the Telepathy
AccountManager service.</para>
<para>
</para>
</refsect1>

<refsect1 id="telepathy-glib-account-manager.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="TpAccountManager-struct" role="struct">
<title>TpAccountManager</title>
<indexterm zone="TpAccountManager-struct" role="0.7.32"><primary sortas="TpAccountManager">TpAccountManager</primary></indexterm><programlisting>typedef struct _TpAccountManager TpAccountManager;</programlisting>
<para>
The Telepathy Account Manager stores real-time communication accounts and
their configuration, places accounts online on request, and manipulates
accounts' presence, nicknames and avatars.</para>
<para>
</para><para role="since">Since 0.7.32</para></refsect2>
<refsect2 id="TpAccountManagerClass" role="struct">
<title>TpAccountManagerClass</title>
<indexterm zone="TpAccountManagerClass"><primary sortas="TpAccountManagerClass">TpAccountManagerClass</primary></indexterm><programlisting>typedef struct {
} TpAccountManagerClass;
</programlisting>
<para>
The class of a <link linkend="TpAccount"><type>TpAccount</type></link>.</para>
<para>
</para></refsect2>
<refsect2 id="tp-account-manager-new" role="function">
<title>tp_account_manager_new ()</title>
<indexterm zone="tp-account-manager-new"><primary sortas="tp_account_manager_new">tp_account_manager_new</primary></indexterm><programlisting><link linkend="TpAccountManager">TpAccountManager</link> *  tp_account_manager_new              (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *bus_daemon);</programlisting>
<para>
Convenience function to create a new account manager proxy. The returned
<link linkend="TpAccountManager"><type>TpAccountManager</type></link> is not guaranteed to be ready on return.
</para>
<para>
Use <link linkend="tp-account-manager-dup"><function>tp_account_manager_dup()</function></link> instead if you want an account manager proxy
on the starter or session bus (which is almost always the right thing for
Telepathy).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bus_daemon</parameter>&#160;:</term>
<listitem><simpara> Proxy for the D-Bus daemon
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a new reference to an account manager proxy
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-account-manager-init-known-interfaces" role="function" condition="since:0.7.32">
<title>tp_account_manager_init_known_interfaces ()</title>
<indexterm zone="tp-account-manager-init-known-interfaces" role="0.7.32"><primary sortas="tp_account_manager_init_known_interfaces">tp_account_manager_init_known_interfaces</primary></indexterm><programlisting><link linkend="void">void</link>                tp_account_manager_init_known_interfaces
                                                        (void);</programlisting>
<para>
Ensure that the known interfaces for TpAccountManager have been set up.
This is done automatically when necessary, but for correct
overriding of library interfaces by local extensions, you should
call this function before calling
<link linkend="tp-proxy-or-subclass-hook-on-interface-add"><function>tp_proxy_or_subclass_hook_on_interface_add()</function></link> with first argument
<link linkend="TP-TYPE-ACCOUNT-MANAGER--CAPS"><literal>TP_TYPE_ACCOUNT_MANAGER</literal></link>.</para>
<para>
</para><para role="since">Since 0.7.32</para></refsect2>
<refsect2 id="tp-account-manager-dup" role="function" condition="since:0.9.0">
<title>tp_account_manager_dup ()</title>
<indexterm zone="tp-account-manager-dup" role="0.9.0"><primary sortas="tp_account_manager_dup">tp_account_manager_dup</primary></indexterm><programlisting><link linkend="TpAccountManager">TpAccountManager</link> *  tp_account_manager_dup              (void);</programlisting>
<para>
Returns an account manager proxy on the D-Bus daemon on which this
process was activated (if it was launched by D-Bus service activation), or
the session bus (otherwise).
</para>
<para>
The returned <link linkend="TpAccountManager"><type>TpAccountManager</type></link> is cached; the same <link linkend="TpAccountManager"><type>TpAccountManager</type></link> object
will be returned by this function repeatedly, as long as at least one
reference exists. Note that the returned <link linkend="TpAccountManager"><type>TpAccountManager</type></link> is not guaranteed
to be ready on return.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> an account manager proxy on the starter or session bus, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
         if it wasn't possible to get a dbus daemon proxy for the
         appropriate bus

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-manager-create-account-async" role="function" condition="since:0.9.0">
<title>tp_account_manager_create_account_async ()</title>
<indexterm zone="tp-account-manager-create-account-async" role="0.9.0"><primary sortas="tp_account_manager_create_account_async">tp_account_manager_create_account_async</primary></indexterm><programlisting><link linkend="void">void</link>                tp_account_manager_create_account_async
                                                        (<link linkend="TpAccountManager">TpAccountManager</link> *manager,
                                                         const <link linkend="gchar">gchar</link> *connection_manager,
                                                         const <link linkend="gchar">gchar</link> *protocol,
                                                         const <link linkend="gchar">gchar</link> *display_name,
                                                         <link linkend="GHashTable">GHashTable</link> *parameters,
                                                         <link linkend="GHashTable">GHashTable</link> *properties,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Requests an asynchronous create of an account on the account manager
<parameter>manager</parameter>. When the operation is finished, <parameter>callback</parameter> will be called. You can
then call <link linkend="tp-account-manager-create-account-finish"><function>tp_account_manager_create_account_finish()</function></link> to get the result of
the operation.
</para>
<para>
<parameter>callback</parameter> will only be called when the newly created <link linkend="TpAccount"><type>TpAccount</type></link> has the
<link linkend="TP-ACCOUNT-FEATURE-CORE--CAPS"><literal>TP_ACCOUNT_FEATURE_CORE</literal></link> feature ready on it, so when calling
<link linkend="tp-account-manager-create-account-finish"><function>tp_account_manager_create_account_finish()</function></link>, one can guarantee this feature
will be ready.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>manager</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccountManager"><type>TpAccountManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>connection_manager</parameter>&#160;:</term>
<listitem><simpara> the name of a connection manager
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>protocol</parameter>&#160;:</term>
<listitem><simpara> the name of a protocol
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>display_name</parameter>&#160;:</term>
<listitem><simpara> the display name for the account
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parameters</parameter>&#160;:</term>
<listitem><simpara> parameters for the new account
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>properties</parameter>&#160;:</term>
<listitem><simpara> properties for the new account
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> a callback to call when the request is satisfied
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> data to pass to <parameter>callback</parameter>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-manager-create-account-finish" role="function" condition="since:0.9.0">
<title>tp_account_manager_create_account_finish ()</title>
<indexterm zone="tp-account-manager-create-account-finish" role="0.9.0"><primary sortas="tp_account_manager_create_account_finish">tp_account_manager_create_account_finish</primary></indexterm><programlisting><link linkend="TpAccount">TpAccount</link> *         tp_account_manager_create_account_finish
                                                        (<link linkend="TpAccountManager">TpAccountManager</link> *manager,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Finishes an async create account operation, and returns a new <link linkend="TpAccount"><type>TpAccount</type></link>
object, with the <link linkend="TP-ACCOUNT-FEATURE-CORE--CAPS"><literal>TP_ACCOUNT_FEATURE_CORE</literal></link> feature ready on it.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>manager</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccountManager"><type>TpAccountManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GAsyncResult"><type>GAsyncResult</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GError"><type>GError</type></link> to be filled
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a new <link linkend="TpAccount"><type>TpAccount</type></link> which was just created on success, otherwise
         <link linkend="NULL--CAPS"><literal>NULL</literal></link>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-manager-ensure-account" role="function" condition="since:0.9.0">
<title>tp_account_manager_ensure_account ()</title>
<indexterm zone="tp-account-manager-ensure-account" role="0.9.0"><primary sortas="tp_account_manager_ensure_account">tp_account_manager_ensure_account</primary></indexterm><programlisting><link linkend="TpAccount">TpAccount</link> *         tp_account_manager_ensure_account   (<link linkend="TpAccountManager">TpAccountManager</link> *manager,
                                                         const <link linkend="gchar">gchar</link> *path);</programlisting>
<para>
Lookup an account in the account manager <parameter>manager</parameter>. If the desired account
has already been ensured then the same object will be returned, otherwise
it will create a new <link linkend="TpAccount"><type>TpAccount</type></link> and add it to <parameter>manager</parameter>. As a result, if
<parameter>manager</parameter> thinks that the account doesn't exist, this will still add it to
<parameter>manager</parameter> to avoid races. Note that the returned <link linkend="TpAccount"><type>TpAccount</type></link> is not guaranteed
to be ready on return.
</para>
<para>
The caller must keep a ref to the returned object using <link linkend="g-object-ref"><function>g_object_ref()</function></link> if
it is to be kept.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>manager</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccountManager"><type>TpAccountManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> the object path for an account
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a new <link linkend="TpAccount"><type>TpAccount</type></link> at <parameter>path</parameter>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-manager-get-valid-accounts" role="function" condition="since:0.9.0">
<title>tp_account_manager_get_valid_accounts ()</title>
<indexterm zone="tp-account-manager-get-valid-accounts" role="0.9.0"><primary sortas="tp_account_manager_get_valid_accounts">tp_account_manager_get_valid_accounts</primary></indexterm><programlisting><link linkend="GList">GList</link> *             tp_account_manager_get_valid_accounts
                                                        (<link linkend="TpAccountManager">TpAccountManager</link> *manager);</programlisting>
<para>
Returns a newly allocated <link linkend="GList"><type>GList</type></link> of valid accounts in <parameter>manager</parameter>. The list
must be freed with <link linkend="g-list-free"><function>g_list_free()</function></link> after used. None of the accounts in the
returned list are guaranteed to be ready.
</para>
<para>
Note that the <link linkend="TpAccount"><type>TpAccount</type></link><!-- -->s in the returned <link linkend="GList"><type>GList</type></link> are not reffed
before returning from this function. One could ref every item in the list
like the following example:
<informalexample><programlisting>
GList *accounts;
account = tp_account_manager_get_valid_accounts (manager);
g_list_foreach (accounts, (GFunc) g_object_ref, NULL);
</programlisting></informalexample>
</para>
<para>
The list of valid accounts returned is not guaranteed to have been retrieved
until <link linkend="TP-ACCOUNT-MANAGER-FEATURE-CORE--CAPS"><literal>TP_ACCOUNT_MANAGER_FEATURE_CORE</literal></link> is prepared
(<link linkend="tp-account-manager-prepare-async"><function>tp_account_manager_prepare_async()</function></link> has returned). Until this feature has
been prepared, an empty list (<link linkend="NULL--CAPS"><literal>NULL</literal></link>) will be returned.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>manager</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccountManager"><type>TpAccountManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a newly allocated <link linkend="GList"><type>GList</type></link> of valid accounts in <parameter>manager</parameter>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-manager-get-most-available-presence" role="function" condition="since:0.9.0">
<title>tp_account_manager_get_most_available_presence ()</title>
<indexterm zone="tp-account-manager-get-most-available-presence" role="0.9.0"><primary sortas="tp_account_manager_get_most_available_presence">tp_account_manager_get_most_available_presence</primary></indexterm><programlisting><link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link>  tp_account_manager_get_most_available_presence
                                                        (<link linkend="TpAccountManager">TpAccountManager</link> *manager,
                                                         <link linkend="gchar">gchar</link> **status,
                                                         <link linkend="gchar">gchar</link> **message);</programlisting>
<para>
Gets the most available presence over all accounts in <parameter>manager</parameter>. This
function does not average presences across all accounts, but it merely
finds the "most available" presence. As a result, there is a guarantee
that there exists at least one account in <parameter>manager</parameter> with the returned
presence.
</para>
<para>
If no accounts are enabled or valid the output will be
(<link linkend="TP-CONNECTION-PRESENCE-TYPE-OFFLINE--CAPS"><literal>TP_CONNECTION_PRESENCE_TYPE_OFFLINE</literal></link>, "offline", "").
</para>
<para>
The return value of this function is not guaranteed to have been retrieved
until <link linkend="tp-account-manager-prepare-async"><function>tp_account_manager_prepare_async()</function></link> has finished; until then, the
value will be the same as if no accounts are enabled or valid.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>manager</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccountManager"><type>TpAccountManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara> a string to fill with the actual status
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> a string to fill with the actual status message
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the most available presence across all accounts

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-manager-set-all-requested-presences" role="function" condition="since:0.9.0">
<title>tp_account_manager_set_all_requested_presences ()</title>
<indexterm zone="tp-account-manager-set-all-requested-presences" role="0.9.0"><primary sortas="tp_account_manager_set_all_requested_presences">tp_account_manager_set_all_requested_presences</primary></indexterm><programlisting><link linkend="void">void</link>                tp_account_manager_set_all_requested_presences
                                                        (<link linkend="TpAccountManager">TpAccountManager</link> *manager,
                                                         <link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link> type,
                                                         const <link linkend="gchar">gchar</link> *status,
                                                         const <link linkend="gchar">gchar</link> *message);</programlisting>
<para>
Iterates through the accounts in <parameter>manager</parameter> and requests the presence
(<parameter>type</parameter>, <parameter>status</parameter> and <parameter>message</parameter>). Note that the presence requested here is
merely a request, and if might not be satisfiable.
</para>
<para>
You can find the most available presence across all accounts by calling
<link linkend="tp-account-manager-get-most-available-presence"><function>tp_account_manager_get_most_available_presence()</function></link>.
</para>
<para>
Setting a requested presence on all accounts will have no effect
until <link linkend="tp-account-manager-prepare-async"><function>tp_account_manager_prepare_async()</function></link> has finished.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>manager</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccountManager"><type>TpAccountManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> a presence type to request
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara> a status to request
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> a status message to request
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-manager-enable-restart" role="function">
<title>tp_account_manager_enable_restart ()</title>
<indexterm zone="tp-account-manager-enable-restart"><primary sortas="tp_account_manager_enable_restart">tp_account_manager_enable_restart</primary></indexterm><programlisting><link linkend="void">void</link>                tp_account_manager_enable_restart   (<link linkend="TpAccountManager">TpAccountManager</link> *manager);</programlisting>
<para>
Enable autostarting the account manager D-Bus service. This means
that the account manager will be restarted if it disappears from
the bus.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>manager</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccountManager"><type>TpAccountManager</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TP-ACCOUNT-MANAGER-FEATURE-CORE--CAPS" role="macro" condition="since:0.9.0">
<title>TP_ACCOUNT_MANAGER_FEATURE_CORE</title>
<indexterm zone="TP-ACCOUNT-MANAGER-FEATURE-CORE--CAPS" role="0.9.0"><primary sortas="TP_ACCOUNT_MANAGER_FEATURE_CORE">TP_ACCOUNT_MANAGER_FEATURE_CORE</primary></indexterm><programlisting>#define             TP_ACCOUNT_MANAGER_FEATURE_CORE</programlisting>
<para>
Expands to a call to a function that returns a quark for the "core" feature
on a <link linkend="TpAccountManager"><type>TpAccountManager</type></link>.
</para>
<para>
When this feature is prepared, the list of accounts have been retrieved and
are available for use, and change-notification has been set up.
</para>
<para>
One can ask for a feature to be prepared using the
<link linkend="tp-account-manager-prepare-async"><function>tp_account_manager_prepare_async()</function></link> function, and waiting for it to callback.</para>
<para>
</para><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-manager-is-prepared" role="function" condition="since:0.9.0">
<title>tp_account_manager_is_prepared ()</title>
<indexterm zone="tp-account-manager-is-prepared" role="0.9.0"><primary sortas="tp_account_manager_is_prepared">tp_account_manager_is_prepared</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_account_manager_is_prepared      (<link linkend="TpAccountManager">TpAccountManager</link> *manager,
                                                         <link linkend="GQuark">GQuark</link> feature);</programlisting>
<para>
<!-- --></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>manager</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccountManager"><type>TpAccountManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>feature</parameter>&#160;:</term>
<listitem><simpara> a feature which is required
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> whether <parameter>feature</parameter> is ready on <parameter>manager</parameter>, otherwise <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-manager-prepare-async" role="function" condition="since:0.9.0">
<title>tp_account_manager_prepare_async ()</title>
<indexterm zone="tp-account-manager-prepare-async" role="0.9.0"><primary sortas="tp_account_manager_prepare_async">tp_account_manager_prepare_async</primary></indexterm><programlisting><link linkend="void">void</link>                tp_account_manager_prepare_async    (<link linkend="TpAccountManager">TpAccountManager</link> *manager,
                                                         const <link linkend="GQuark">GQuark</link> *features,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Requests an asynchronous preparation of <parameter>manager</parameter> with the features specified
by <parameter>features</parameter>. When the operation is finished, <parameter>callback</parameter> will be called. You
can then call <link linkend="tp-account-manager-prepare-finish"><function>tp_account_manager_prepare_finish()</function></link> to get the result of the
operation.
</para>
<para>
If <parameter>features</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>, then <parameter>callback</parameter> will be called when the implied
<link linkend="TP-ACCOUNT-FEATURE-CORE--CAPS"><literal>TP_ACCOUNT_FEATURE_CORE</literal></link> feature is ready.
</para>
<para>
If <link linkend="NULL--CAPS"><literal>NULL</literal></link> is given to <parameter>callback</parameter>, then no callback will be called when the
operation is finished. Instead, it will simply set <parameter>features</parameter> on <parameter>manager</parameter>.
Note that if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>, then <parameter>user_data</parameter> must also be <link linkend="NULL--CAPS"><literal>NULL</literal></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>manager</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccountManager"><type>TpAccountManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>features</parameter>&#160;:</term>
<listitem><simpara> a 0-terminated list of features, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> a callback to call when the request is satisfied
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> data to pass to <parameter>callback</parameter>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-manager-prepare-finish" role="function" condition="since:0.9.0">
<title>tp_account_manager_prepare_finish ()</title>
<indexterm zone="tp-account-manager-prepare-finish" role="0.9.0"><primary sortas="tp_account_manager_prepare_finish">tp_account_manager_prepare_finish</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_account_manager_prepare_finish   (<link linkend="TpAccountManager">TpAccountManager</link> *manager,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Finishes an async preparation of the account manager <parameter>manager</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>manager</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccountManager"><type>TpAccountManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GAsyncResult"><type>GAsyncResult</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GError"><type>GError</type></link> to fill
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the preparation was successful, otherwise <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-cli-account-manager-callback-for-create-account" role="function">
<title>tp_cli_account_manager_callback_for_create_account ()</title>
<indexterm zone="tp-cli-account-manager-callback-for-create-account"><primary sortas="tp_cli_account_manager_callback_for_create_account">tp_cli_account_manager_callback_for_create_account</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_account_manager_callback_for_create_account)
                                                        (<link linkend="TpAccountManager">TpAccountManager</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *out_Account,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a CreateAccount method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Account</parameter>&#160;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>: The new &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy&quot;&gt;Account&lt;/tp:dbus-ref&gt;.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-account-manager-call-create-account" role="function">
<title>tp_cli_account_manager_call_create_account ()</title>
<indexterm zone="tp-cli-account-manager-call-create-account"><primary sortas="tp_cli_account_manager_call_create_account">tp_cli_account_manager_call_create_account</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_account_manager_call_create_account
                                                        (<link linkend="TpAccountManager">TpAccountManager</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_Connection_Manager,
                                                         const <link linkend="gchar">gchar</link> *in_Protocol,
                                                         const <link linkend="gchar">gchar</link> *in_Display_Name,
                                                         <link linkend="GHashTable">GHashTable</link> *in_Parameters,
                                                         <link linkend="GHashTable">GHashTable</link> *in_Properties,
                                                         <link linkend="tp-cli-account-manager-callback-for-create-account">tp_cli_account_manager_callback_for_create_account</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a CreateAccount method call.
</para>
<para>
Request the creation of a new &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy&quot;&gt;Account&lt;/tp:dbus-ref&gt;. The         account manager SHOULD NOT allow invalid accounts to be created.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Connection_Manager</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: The name of the connection manager, e.g. &amp;quot;salut&amp;quot;.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Protocol</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: The protocol, e.g. &amp;quot;local-xmpp&amp;quot;.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Display_Name</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: The initial value of the new account&apos;s &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.Account&quot;&gt;DisplayName&lt;/tp:dbus-ref&gt;           property. The account manager SHOULD modify this to make it unique if           an Account already exists with the same display name, for instance by           appending a number or the &apos;account&apos; parameter. Account manager           implementations SHOULD accept an empty string, but account editing           user interfaces should avoid passing an empty string for this           parameter.            &lt;tp:rationale&gt;             &lt;p&gt;The account creation UI may ask the user for a name for the new               account. If the author of the UI chooses not to do this, the               account creation UI is better able to suggest a default display               name because it has protocol-specific knowledge which the account               manager does not.&lt;/p&gt;              &lt;p&gt;The account manager always knows the complete list of accounts so               it can easily tell whether it should append something to the               display name to avoid presenting two identically-named accounts to               the user.&lt;/p&gt;           &lt;/tp:rationale&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Parameters</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: Initial parameter values, as would be passed to           &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.ConnectionManager&quot;&gt;RequestConnection&lt;/tp:dbus-ref&gt;.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Properties</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           &lt;p&gt;The values of any other properties to be set immediately on the             new Account.&lt;/p&gt;            &lt;p&gt;Only the properties mentioned in             &lt;tp:member-ref&gt;SupportedAccountProperties&lt;/tp:member-ref&gt; are             acceptable here. In particular, the &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.Account&quot;&gt;DisplayName&lt;/tp:dbus-ref&gt;             and &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.Account&quot;&gt;Parameters&lt;/tp:dbus-ref&gt;             properties are never allowed here, since they are set using the other             arguments to this method.&lt;/p&gt;            &lt;p&gt;Account manager implementations SHOULD support creating accounts             with an empty value for this argument.&lt;/p&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-account-manager-signal-callback-account-removed" role="function">
<title>tp_cli_account_manager_signal_callback_account_removed ()</title>
<indexterm zone="tp-cli-account-manager-signal-callback-account-removed"><primary sortas="tp_cli_account_manager_signal_callback_account_removed">tp_cli_account_manager_signal_callback_account_removed</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_account_manager_signal_callback_account_removed)
                                                        (<link linkend="TpAccountManager">TpAccountManager</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg_Account,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal AccountRemoved.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-account-manager-connect-to-account-removed"><function>tp_cli_account_manager_connect_to_account_removed()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Account</parameter>&#160;:</term>
<listitem><simpara> An Account, which must not be used any more.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-account-manager-connect-to-account-removed" role="function">
<title>tp_cli_account_manager_connect_to_account_removed ()</title>
<indexterm zone="tp-cli-account-manager-connect-to-account-removed"><primary sortas="tp_cli_account_manager_connect_to_account_removed">tp_cli_account_manager_connect_to_account_removed</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_account_manager_connect_to_account_removed
                                                        (<link linkend="TpAccountManager">TpAccountManager</link> *proxy,
                                                         <link linkend="tp-cli-account-manager-signal-callback-account-removed">tp_cli_account_manager_signal_callback_account_removed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal AccountRemoved.
</para>
<para>
The given account has been removed.          &lt;tp:rationale&gt;           This is effectively change notification for the valid and invalid           accounts lists. On emission of this signal, the Account indicated           will no longer be present in either of the lists.         &lt;/tp:rationale&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpAccountManager"><type>TpAccountManager</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-account-manager-signal-callback-account-validity-changed" role="function">
<title>tp_cli_account_manager_signal_callback_account_validity_changed ()</title>
<indexterm zone="tp-cli-account-manager-signal-callback-account-validity-changed"><primary sortas="tp_cli_account_manager_signal_callback_account_validity_changed">tp_cli_account_manager_signal_callback_account_validity_changed</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_account_manager_signal_callback_account_validity_changed)
                                                        (<link linkend="TpAccountManager">TpAccountManager</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg_Account,
                                                         <link linkend="gboolean">gboolean</link> arg_Valid,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal AccountValidityChanged.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-account-manager-connect-to-account-validity-changed"><function>tp_cli_account_manager_connect_to_account_validity_changed()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Account</parameter>&#160;:</term>
<listitem><simpara> An Account.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Valid</parameter>&#160;:</term>
<listitem><simpara> True if the account is now valid.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-account-manager-connect-to-account-validity-changed" role="function">
<title>tp_cli_account_manager_connect_to_account_validity_changed ()</title>
<indexterm zone="tp-cli-account-manager-connect-to-account-validity-changed"><primary sortas="tp_cli_account_manager_connect_to_account_validity_changed">tp_cli_account_manager_connect_to_account_validity_changed</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_account_manager_connect_to_account_validity_changed
                                                        (<link linkend="TpAccountManager">TpAccountManager</link> *proxy,
                                                         <link linkend="tp-cli-account-manager-signal-callback-account-validity-changed">tp_cli_account_manager_signal_callback_account_validity_changed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal AccountValidityChanged.
</para>
<para>
The validity of the given account has changed. New accounts are         also indicated by this signal, as an account validity change         (usually to True) on an account that did not previously exist.          &lt;tp:rationale&gt;           This is effectively change notification for the valid and invalid           accounts lists.         &lt;/tp:rationale&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpAccountManager"><type>TpAccountManager</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

<refsect1 id="telepathy-glib-account-manager.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="TpAccountManager-account-disabled" role="signal"><title>The <literal>&quot;account-disabled&quot;</literal> signal</title>
<indexterm zone="TpAccountManager-account-disabled" role="0.9.0"><primary sortas="TpAccountManager::account-disabled">TpAccountManager::account-disabled</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpAccountManager">TpAccountManager</link> *manager,
                                                        <link linkend="TpAccount">TpAccount</link>        *account,
                                                        <link linkend="gpointer">gpointer</link>          user_data)      : Run Last</programlisting>
<para>
Emitted when an account from <parameter>manager</parameter> is disabled.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>manager</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccountManager"><type>TpAccountManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist><para>Since 0.9.0</para></refsect2><refsect2 id="TpAccountManager-account-enabled" role="signal"><title>The <literal>&quot;account-enabled&quot;</literal> signal</title>
<indexterm zone="TpAccountManager-account-enabled" role="0.9.0"><primary sortas="TpAccountManager::account-enabled">TpAccountManager::account-enabled</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpAccountManager">TpAccountManager</link> *manager,
                                                        <link linkend="TpAccount">TpAccount</link>        *account,
                                                        <link linkend="gpointer">gpointer</link>          user_data)      : Run Last</programlisting>
<para>
Emitted when an account from <parameter>manager</parameter> is enabled.
</para>
<para>
Note that the returned <link linkend="TpAccount"><type>TpAccount</type></link> <parameter>account</parameter> is not guaranteed to have any
features pre-prepared, including <link linkend="TP-ACCOUNT-FEATURE-CORE--CAPS"><literal>TP_ACCOUNT_FEATURE_CORE</literal></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>manager</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccountManager"><type>TpAccountManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist><para>Since 0.9.0</para></refsect2><refsect2 id="TpAccountManager-account-removed" role="signal"><title>The <literal>&quot;account-removed&quot;</literal> signal</title>
<indexterm zone="TpAccountManager-account-removed" role="0.9.0"><primary sortas="TpAccountManager::account-removed">TpAccountManager::account-removed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpAccountManager">TpAccountManager</link> *manager,
                                                        <link linkend="TpAccount">TpAccount</link>        *account,
                                                        <link linkend="gpointer">gpointer</link>          user_data)      : Run Last</programlisting>
<para>
Emitted when an account is removed from <parameter>manager</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>manager</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccountManager"><type>TpAccountManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist><para>Since 0.9.0</para></refsect2><refsect2 id="TpAccountManager-account-validity-changed" role="signal"><title>The <literal>&quot;account-validity-changed&quot;</literal> signal</title>
<indexterm zone="TpAccountManager-account-validity-changed" role="0.9.0"><primary sortas="TpAccountManager::account-validity-changed">TpAccountManager::account-validity-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpAccountManager">TpAccountManager</link> *manager,
                                                        <link linkend="TpAccount">TpAccount</link>        *account,
                                                        <link linkend="gboolean">gboolean</link>          valid,
                                                        <link linkend="gpointer">gpointer</link>          user_data)      : Run Last</programlisting>
<para>
Emitted when the validity on <parameter>account</parameter> changes. <parameter>account</parameter> is not guaranteed
to be ready when this signal is emitted.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>manager</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccountManager"><type>TpAccountManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>valid</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the account is now valid
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist><para>Since 0.9.0</para></refsect2><refsect2 id="TpAccountManager-most-available-presence-changed" role="signal"><title>The <literal>&quot;most-available-presence-changed&quot;</literal> signal</title>
<indexterm zone="TpAccountManager-most-available-presence-changed" role="0.9.0"><primary sortas="TpAccountManager::most-available-presence-changed">TpAccountManager::most-available-presence-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpAccountManager">TpAccountManager</link> *manager,
                                                        <link linkend="guint">guint</link>             account,
                                                        <link linkend="gchar">gchar</link>            *presence,
                                                        <link linkend="gchar">gchar</link>            *status,
                                                        <link linkend="gpointer">gpointer</link>          user_data)      : Run Last</programlisting>
<para>
Emitted when the most available presence on <parameter>manager</parameter> changes.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>manager</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccountManager"><type>TpAccountManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>presence</parameter>&#160;:</term>
<listitem><simpara> new presence type
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara> new status
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> new status message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist><para>Since 0.9.0</para></refsect2>
</refsect1>


<refsect1 id="telepathy-glib-account-manager.see-also">
<title>See Also</title>
#TpAccount
</refsect1>

</refentry>
