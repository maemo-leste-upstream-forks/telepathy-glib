<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-TpMessageMixin">
<refmeta>
<refentrytitle role="top_of_page" id="telepathy-glib-TpMessageMixin.top_of_page">TpMessageMixin</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>TpMessageMixin</refname>
<refpurpose>a mixin implementation of the text channel type and the
 Messages interface</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv id="telepathy-glib-TpMessageMixin.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;telepathy-glib/message-mixin.h&gt;

                    <link linkend="TpMessage">TpMessage</link>;
<link linkend="guint">guint</link>               <link linkend="tp-message-append-part">tp_message_append_part</link>              (<link linkend="TpMessage">TpMessage</link> *self);
<link linkend="guint">guint</link>               <link linkend="tp-message-count-parts">tp_message_count_parts</link>              (<link linkend="TpMessage">TpMessage</link> *self);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-message-delete-key">tp_message_delete_key</link>               (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part,
                                                         const <link linkend="gchar">gchar</link> *key);
<link linkend="void">void</link>                <link linkend="tp-message-delete-part">tp_message_delete_part</link>              (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part);
<link linkend="void">void</link>                <link linkend="tp-message-destroy">tp_message_destroy</link>                  (<link linkend="TpMessage">TpMessage</link> *self);
<link linkend="TpMessage">TpMessage</link>*          <link linkend="tp-message-new">tp_message_new</link>                      (<link linkend="TpBaseConnection">TpBaseConnection</link> *connection,
                                                         <link linkend="guint">guint</link> initial_parts,
                                                         <link linkend="guint">guint</link> size_hint);
const <link linkend="GHashTable">GHashTable</link>*   <link linkend="tp-message-peek">tp_message_peek</link>                     (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part);
<link linkend="void">void</link>                <link linkend="tp-message-ref-handle">tp_message_ref_handle</link>               (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="TpHandleType">TpHandleType</link> handle_type,
                                                         <link linkend="TpHandle">TpHandle</link> handle);
<link linkend="void">void</link>                <link linkend="tp-message-set">tp_message_set</link>                      (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         const <link linkend="GValue">GValue</link> *source);
<link linkend="void">void</link>                <link linkend="tp-message-set-boolean">tp_message_set_boolean</link>              (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="gboolean">gboolean</link> b);
<link linkend="void">void</link>                <link linkend="tp-message-set-bytes">tp_message_set_bytes</link>                (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="guint">guint</link> len,
                                                         <link linkend="gconstpointer">gconstpointer</link> bytes);
<link linkend="void">void</link>                <link linkend="tp-message-set-handle">tp_message_set_handle</link>               (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="TpHandleType">TpHandleType</link> handle_type,
                                                         <link linkend="TpHandle">TpHandle</link> handle_or_0);
#define             <link linkend="tp-message-set-int16">tp_message_set_int16</link>                (s, p, k, i)
<link linkend="void">void</link>                <link linkend="tp-message-set-int32">tp_message_set_int32</link>                (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="gint32">gint32</link> i);
<link linkend="void">void</link>                <link linkend="tp-message-set-int64">tp_message_set_int64</link>                (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="gint64">gint64</link> i);
<link linkend="void">void</link>                <link linkend="tp-message-set-string">tp_message_set_string</link>               (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         const <link linkend="gchar">gchar</link> *s);
<link linkend="void">void</link>                <link linkend="tp-message-set-string-printf">tp_message_set_string_printf</link>        (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         const <link linkend="gchar">gchar</link> *fmt,
                                                         ...);
#define             <link linkend="tp-message-set-uint16">tp_message_set_uint16</link>               (s, p, k, u)
<link linkend="void">void</link>                <link linkend="tp-message-set-uint32">tp_message_set_uint32</link>               (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="guint32">guint32</link> u);
<link linkend="void">void</link>                <link linkend="tp-message-set-uint64">tp_message_set_uint64</link>               (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="guint64">guint64</link> u);
<link linkend="void">void</link>                <link linkend="tp-message-take-message">tp_message_take_message</link>             (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="TpMessage">TpMessage</link> *message);
                    <link linkend="TpMessageMixin">TpMessageMixin</link>;
<link linkend="void">void</link>                (<link linkend="TpMessageMixinSendImpl">*TpMessageMixinSendImpl</link>)           (<link linkend="GObject">GObject</link> *object,
                                                         <link linkend="TpMessage">TpMessage</link> *message,
                                                         <link linkend="TpMessageSendingFlags">TpMessageSendingFlags</link> flags);
<link linkend="void">void</link>                <link linkend="tp-message-mixin-finalize">tp_message_mixin_finalize</link>           (<link linkend="GObject">GObject</link> *obj);
<link linkend="void">void</link>                <link linkend="tp-message-mixin-implement-sending">tp_message_mixin_implement_sending</link>  (<link linkend="GObject">GObject</link> *object,
                                                         <link linkend="TpMessageMixinSendImpl">TpMessageMixinSendImpl</link> send,
                                                         <link linkend="guint">guint</link> n_types,
                                                         const <link linkend="TpChannelTextMessageType">TpChannelTextMessageType</link> *types,
                                                         <link linkend="TpMessagePartSupportFlags">TpMessagePartSupportFlags</link> message_part_support_flags,
                                                         <link linkend="TpDeliveryReportingSupportFlags">TpDeliveryReportingSupportFlags</link> delivery_reporting_support_flags,
                                                         const <link linkend="gchar">gchar</link> * const *supported_content_types);
<link linkend="void">void</link>                <link linkend="tp-message-mixin-init">tp_message_mixin_init</link>               (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="gsize">gsize</link> offset,
                                                         <link linkend="TpBaseConnection">TpBaseConnection</link> *connection);
<link linkend="void">void</link>                <link linkend="tp-message-mixin-init-dbus-properties">tp_message_mixin_init_dbus_properties</link>
                                                        (<link linkend="GObjectClass">GObjectClass</link> *cls);
<link linkend="void">void</link>                <link linkend="tp-message-mixin-messages-iface-init">tp_message_mixin_messages_iface_init</link>
                                                        (<link linkend="gpointer">gpointer</link> g_iface,
                                                         <link linkend="gpointer">gpointer</link> iface_data);
<link linkend="void">void</link>                <link linkend="tp-message-mixin-get-dbus-property">tp_message_mixin_get_dbus_property</link>  (<link linkend="GObject">GObject</link> *object,
                                                         <link linkend="GQuark">GQuark</link> interface,
                                                         <link linkend="GQuark">GQuark</link> name,
                                                         <link linkend="GValue">GValue</link> *value,
                                                         <link linkend="gpointer">gpointer</link> unused);
<link linkend="void">void</link>                <link linkend="tp-message-mixin-sent">tp_message_mixin_sent</link>               (<link linkend="GObject">GObject</link> *object,
                                                         <link linkend="TpMessage">TpMessage</link> *message,
                                                         <link linkend="TpMessageSendingFlags">TpMessageSendingFlags</link> flags,
                                                         const <link linkend="gchar">gchar</link> *token,
                                                         const <link linkend="GError">GError</link> *error);
<link linkend="void">void</link>                <link linkend="tp-message-mixin-set-rescued">tp_message_mixin_set_rescued</link>        (<link linkend="GObject">GObject</link> *obj);
<link linkend="guint">guint</link>               <link linkend="tp-message-mixin-take-received">tp_message_mixin_take_received</link>      (<link linkend="GObject">GObject</link> *object,
                                                         <link linkend="TpMessage">TpMessage</link> *message);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-message-mixin-has-pending-messages">tp_message_mixin_has_pending_messages</link>
                                                        (<link linkend="GObject">GObject</link> *object,
                                                         <link linkend="TpHandle">TpHandle</link> *first_sender);
<link linkend="void">void</link>                <link linkend="tp-message-mixin-clear">tp_message_mixin_clear</link>              (<link linkend="GObject">GObject</link> *obj);
<link linkend="void">void</link>                <link linkend="tp-message-mixin-text-iface-init">tp_message_mixin_text_iface_init</link>    (<link linkend="gpointer">gpointer</link> g_iface,
                                                         <link linkend="gpointer">gpointer</link> iface_data);
</synopsis>
</refsynopsisdiv>









<refsect1 id="telepathy-glib-TpMessageMixin.description" role="desc">
<title role="desc.title">Description</title>
<para>
This mixin can be added to a channel GObject class to implement the
text channel type (with the Messages interface) in a general way.
The channel class should also have a <link linkend="TpDBusPropertiesMixinClass"><type>TpDBusPropertiesMixinClass</type></link>.
</para>
<para>
To use the messages mixin, include a <link linkend="TpMessageMixin"><type>TpMessageMixin</type></link> somewhere in your
instance structure, and call <link linkend="tp-message-mixin-init"><function>tp_message_mixin_init()</function></link> from your
constructor function, and <link linkend="tp-message-mixin-finalize"><function>tp_message_mixin_finalize()</function></link> from your dispose
or finalize function. In the class_init function, call
<link linkend="tp-message-mixin-init-dbus-properties"><function>tp_message_mixin_init_dbus_properties()</function></link> to hook this mixin into the D-Bus
properties mixin class. Finally, include the following in the fourth
argument of <link linkend="G-DEFINE-TYPE-WITH-CODE:CAPS"><function>G_DEFINE_TYPE_WITH_CODE()</function></link>:
</para>
<para>
<informalexample><programlisting>
 G_IMPLEMENT_INTERFACE (TP_TYPE_SVC_CHANNEL_TYPE_TEXT,
   tp_message_mixin_text_iface_init);
 G_IMPLEMENT_INTERFACE (TP_TYPE_SVC_CHANNEL_INTERFACE_MESSAGES,
   tp_message_mixin_messages_iface_init);
</programlisting></informalexample>
</para>
<para>
To support sending messages, you must call
<link linkend="tp-message-mixin-implement-sending"><function>tp_message_mixin_implement_sending()</function></link> in the constructor function. If you do
not, any attempt to send a message will fail with NotImplemented.
</para>
<para>
<parameter>since</parameter> 0.7.UNRELEASED</para>
<para>

</para>
</refsect1>

<refsect1 id="telepathy-glib-TpMessageMixin.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="TpMessage" role="struct">
<title>TpMessage</title>
<indexterm zone="TpMessage"><primary>TpMessage</primary></indexterm><programlisting>typedef struct _TpMessage TpMessage;</programlisting>
<para>
Opaque structure representing a message in the Telepathy messages interface
(an array of at least one mapping from string to variant, where the first
mapping contains message headers and subsequent mappings contain the
message body).</para>
<para>

</para></refsect2>
<refsect2 id="tp-message-append-part" role="function">
<title>tp_message_append_part ()</title>
<indexterm zone="tp-message-append-part"><primary>tp_message_append_part</primary></indexterm><programlisting><link linkend="guint">guint</link>               tp_message_append_part              (<link linkend="TpMessage">TpMessage</link> *self);</programlisting>
<para>
Append a body part to the message.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a message
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the part number

<parameter>since</parameter> 0.7.UNRELEASED
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-count-parts" role="function">
<title>tp_message_count_parts ()</title>
<indexterm zone="tp-message-count-parts"><primary>tp_message_count_parts</primary></indexterm><programlisting><link linkend="guint">guint</link>               tp_message_count_parts              (<link linkend="TpMessage">TpMessage</link> *self);</programlisting>
<para>
<!-- nothing more to say --></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a message
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the number of parts in the message, including the headers in
part 0

<parameter>since</parameter> 0.7.UNRELEASED
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-delete-key" role="function">
<title>tp_message_delete_key ()</title>
<indexterm zone="tp-message-delete-key"><primary>tp_message_delete_key</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_message_delete_key               (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part,
                                                         const <link linkend="gchar">gchar</link> *key);</programlisting>
<para>
Remove the given key and its value from the given part.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>part</parameter>&nbsp;:</term>
<listitem><simpara> a part number, which must be strictly less than the number
 returned by <link linkend="tp-message-count-parts"><function>tp_message_count_parts()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> a key in the mapping representing the part
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the key previously existed

<parameter>since</parameter> 0.7.UNRELEASED
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-delete-part" role="function">
<title>tp_message_delete_part ()</title>
<indexterm zone="tp-message-delete-part"><primary>tp_message_delete_part</primary></indexterm><programlisting><link linkend="void">void</link>                tp_message_delete_part              (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part);</programlisting>
<para>
Delete the given body part from the message.
</para>
<para>
<parameter>since</parameter> 0.7.UNRELEASED</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>part</parameter>&nbsp;:</term>
<listitem><simpara> a part number, which must be strictly greater than 0, and strictly
 less than the number returned by <link linkend="tp-message-count-parts"><function>tp_message_count_parts()</function></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-destroy" role="function">
<title>tp_message_destroy ()</title>
<indexterm zone="tp-message-destroy"><primary>tp_message_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                tp_message_destroy                  (<link linkend="TpMessage">TpMessage</link> *self);</programlisting>
<para>
Destroy <parameter>self</parameter>.
</para>
<para>
<parameter>since</parameter> 0.7.UNRELEASED</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a message
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-new" role="function">
<title>tp_message_new ()</title>
<indexterm zone="tp-message-new"><primary>tp_message_new</primary></indexterm><programlisting><link linkend="TpMessage">TpMessage</link>*          tp_message_new                      (<link linkend="TpBaseConnection">TpBaseConnection</link> *connection,
                                                         <link linkend="guint">guint</link> initial_parts,
                                                         <link linkend="guint">guint</link> size_hint);</programlisting>
<para>
<!-- nothing more to say --></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>connection</parameter>&nbsp;:</term>
<listitem><simpara> a connection on which to reference handles
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>initial_parts</parameter>&nbsp;:</term>
<listitem><simpara> number of parts to create (at least 1)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size_hint</parameter>&nbsp;:</term>
<listitem><simpara> preallocate space for this many parts (at least <parameter>initial_parts</parameter>)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a newly allocated message suitable to be passed to
tp_message_mixin_take_received

<parameter>since</parameter> 0.7.UNRELEASED
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-peek" role="function">
<title>tp_message_peek ()</title>
<indexterm zone="tp-message-peek"><primary>tp_message_peek</primary></indexterm><programlisting>const <link linkend="GHashTable">GHashTable</link>*   tp_message_peek                     (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part);</programlisting>
<para>
<!-- nothing more to say --></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>part</parameter>&nbsp;:</term>
<listitem><simpara> a part number
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the <link linkend="GHashTable"><type>GHashTable</type></link> used to implement the given part, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if the
 part number is out of range. The hash table is only valid as long as the
 message is valid and the part is not deleted.

<parameter>since</parameter> 0.7.UNRELEASED
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-ref-handle" role="function">
<title>tp_message_ref_handle ()</title>
<indexterm zone="tp-message-ref-handle"><primary>tp_message_ref_handle</primary></indexterm><programlisting><link linkend="void">void</link>                tp_message_ref_handle               (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="TpHandleType">TpHandleType</link> handle_type,
                                                         <link linkend="TpHandle">TpHandle</link> handle);</programlisting>
<para>
Reference the given handle until this message is destroyed.
</para>
<para>
<parameter>since</parameter> 0.7.UNRELEASED</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handle_type</parameter>&nbsp;:</term>
<listitem><simpara> a handle type, greater than <link linkend="TP-HANDLE-TYPE-NONE:CAPS"><literal>TP_HANDLE_TYPE_NONE</literal></link> and less than
 <link linkend="NUM-TP-HANDLE-TYPES:CAPS"><literal>NUM_TP_HANDLE_TYPES</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handle</parameter>&nbsp;:</term>
<listitem><simpara> a handle of the given type
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-set" role="function">
<title>tp_message_set ()</title>
<indexterm zone="tp-message-set"><primary>tp_message_set</primary></indexterm><programlisting><link linkend="void">void</link>                tp_message_set                      (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         const <link linkend="GValue">GValue</link> *source);</programlisting>
<para>
Set <parameter>key</parameter> in part <parameter>part</parameter> of <parameter>self</parameter> to have a copy of <parameter>source</parameter> as its value.
</para>
<para>
If <parameter>source</parameter> represents a data structure containing handles, they should
all be referenced with <link linkend="tp-message-ref-handle"><function>tp_message_ref_handle()</function></link> first.
</para>
<para>
<parameter>since</parameter> 0.7.UNRELEASED</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>part</parameter>&nbsp;:</term>
<listitem><simpara> a part number, which must be strictly less than the number
 returned by <link linkend="tp-message-count-parts"><function>tp_message_count_parts()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> a key in the mapping representing the part
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>source</parameter>&nbsp;:</term>
<listitem><simpara> a value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-set-boolean" role="function">
<title>tp_message_set_boolean ()</title>
<indexterm zone="tp-message-set-boolean"><primary>tp_message_set_boolean</primary></indexterm><programlisting><link linkend="void">void</link>                tp_message_set_boolean              (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="gboolean">gboolean</link> b);</programlisting>
<para>
Set <parameter>key</parameter> in part <parameter>part</parameter> of <parameter>self</parameter> to have <parameter>b</parameter> as a boolean value.
</para>
<para>
<parameter>since</parameter> 0.7.UNRELEASED</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>part</parameter>&nbsp;:</term>
<listitem><simpara> a part number, which must be strictly less than the number
 returned by <link linkend="tp-message-count-parts"><function>tp_message_count_parts()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> a key in the mapping representing the part
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>b</parameter>&nbsp;:</term>
<listitem><simpara> a boolean value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-set-bytes" role="function">
<title>tp_message_set_bytes ()</title>
<indexterm zone="tp-message-set-bytes"><primary>tp_message_set_bytes</primary></indexterm><programlisting><link linkend="void">void</link>                tp_message_set_bytes                (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="guint">guint</link> len,
                                                         <link linkend="gconstpointer">gconstpointer</link> bytes);</programlisting>
<para>
Set <parameter>key</parameter> in part <parameter>part</parameter> of <parameter>self</parameter> to have <parameter>bytes</parameter> as a byte-array value.
</para>
<para>
<parameter>since</parameter> 0.7.UNRELEASED</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>part</parameter>&nbsp;:</term>
<listitem><simpara> a part number, which must be strictly less than the number
 returned by <link linkend="tp-message-count-parts"><function>tp_message_count_parts()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> a key in the mapping representing the part
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara> a number of bytes
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bytes</parameter>&nbsp;:</term>
<listitem><simpara> an array of <parameter>len</parameter> bytes
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-set-handle" role="function">
<title>tp_message_set_handle ()</title>
<indexterm zone="tp-message-set-handle"><primary>tp_message_set_handle</primary></indexterm><programlisting><link linkend="void">void</link>                tp_message_set_handle               (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="TpHandleType">TpHandleType</link> handle_type,
                                                         <link linkend="TpHandle">TpHandle</link> handle_or_0);</programlisting>
<para>
If <parameter>handle_or_0</parameter> is not zero, reference it with <link linkend="tp-message-ref-handle"><function>tp_message_ref_handle()</function></link>.
</para>
<para>
Set <parameter>key</parameter> in part <parameter>part</parameter> of <parameter>self</parameter> to have <parameter>handle_or_0</parameter> as an unsigned integer
value.
</para>
<para>
<parameter>since</parameter> 0.7.UNRELEASED</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>part</parameter>&nbsp;:</term>
<listitem><simpara> a part number, which must be strictly less than the number
 returned by <link linkend="tp-message-count-parts"><function>tp_message_count_parts()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> a key in the mapping representing the part
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handle_type</parameter>&nbsp;:</term>
<listitem><simpara> a handle type
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handle_or_0</parameter>&nbsp;:</term>
<listitem><simpara> a handle of that type, or 0
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-set-int16" role="macro">
<title>tp_message_set_int16()</title>
<indexterm zone="tp-message-set-int16"><primary>tp_message_set_int16</primary></indexterm><programlisting>#define             tp_message_set_int16(s, p, k, i)</programlisting>
<para>
Set <parameter>key</parameter> in part <parameter>part</parameter> of <parameter>self</parameter> to have <parameter>i</parameter> as a signed integer value.
</para>
<para>
<parameter>since</parameter> 0.7.UNRELEASED</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara> a message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>p</parameter>&nbsp;:</term>
<listitem><simpara> a part number, which must be strictly less than the number
 returned by <link linkend="tp-message-count-parts"><function>tp_message_count_parts()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>k</parameter>&nbsp;:</term>
<listitem><simpara> a key in the mapping representing the part
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>i</parameter>&nbsp;:</term>
<listitem><simpara> an integer value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-set-int32" role="function">
<title>tp_message_set_int32 ()</title>
<indexterm zone="tp-message-set-int32"><primary>tp_message_set_int32</primary></indexterm><programlisting><link linkend="void">void</link>                tp_message_set_int32                (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="gint32">gint32</link> i);</programlisting>
<para>
Set <parameter>key</parameter> in part <parameter>part</parameter> of <parameter>self</parameter> to have <parameter>i</parameter> as a signed integer value.
</para>
<para>
<parameter>since</parameter> 0.7.UNRELEASED</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>part</parameter>&nbsp;:</term>
<listitem><simpara> a part number, which must be strictly less than the number
 returned by <link linkend="tp-message-count-parts"><function>tp_message_count_parts()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> a key in the mapping representing the part
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>i</parameter>&nbsp;:</term>
<listitem><simpara> an integer value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-set-int64" role="function">
<title>tp_message_set_int64 ()</title>
<indexterm zone="tp-message-set-int64"><primary>tp_message_set_int64</primary></indexterm><programlisting><link linkend="void">void</link>                tp_message_set_int64                (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="gint64">gint64</link> i);</programlisting>
<para>
Set <parameter>key</parameter> in part <parameter>part</parameter> of <parameter>self</parameter> to have <parameter>i</parameter> as a signed integer value.
</para>
<para>
<parameter>since</parameter> 0.7.UNRELEASED</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>part</parameter>&nbsp;:</term>
<listitem><simpara> a part number, which must be strictly less than the number
 returned by <link linkend="tp-message-count-parts"><function>tp_message_count_parts()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> a key in the mapping representing the part
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>i</parameter>&nbsp;:</term>
<listitem><simpara> an integer value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-set-string" role="function">
<title>tp_message_set_string ()</title>
<indexterm zone="tp-message-set-string"><primary>tp_message_set_string</primary></indexterm><programlisting><link linkend="void">void</link>                tp_message_set_string               (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         const <link linkend="gchar">gchar</link> *s);</programlisting>
<para>
Set <parameter>key</parameter> in part <parameter>part</parameter> of <parameter>self</parameter> to have <parameter>s</parameter> as a string value.
</para>
<para>
<parameter>since</parameter> 0.7.UNRELEASED</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>part</parameter>&nbsp;:</term>
<listitem><simpara> a part number, which must be strictly less than the number
 returned by <link linkend="tp-message-count-parts"><function>tp_message_count_parts()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> a key in the mapping representing the part
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara> a string value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-set-string-printf" role="function">
<title>tp_message_set_string_printf ()</title>
<indexterm zone="tp-message-set-string-printf"><primary>tp_message_set_string_printf</primary></indexterm><programlisting><link linkend="void">void</link>                tp_message_set_string_printf        (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         const <link linkend="gchar">gchar</link> *fmt,
                                                         ...);</programlisting>
<para>
Set <parameter>key</parameter> in part <parameter>part</parameter> of <parameter>self</parameter> to have a string value constructed from a
printf-style format string.
</para>
<para>
<parameter>since</parameter> 0.7.UNRELEASED</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>part</parameter>&nbsp;:</term>
<listitem><simpara> a part number, which must be strictly less than the number
 returned by <link linkend="tp-message-count-parts"><function>tp_message_count_parts()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> a key in the mapping representing the part
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fmt</parameter>&nbsp;:</term>
<listitem><simpara> a printf-style format string for the string value
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara> arguments for the format string
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-set-uint16" role="macro">
<title>tp_message_set_uint16()</title>
<indexterm zone="tp-message-set-uint16"><primary>tp_message_set_uint16</primary></indexterm><programlisting>#define             tp_message_set_uint16(s, p, k, u)</programlisting>
<para>
Set <parameter>key</parameter> in part <parameter>part</parameter> of <parameter>self</parameter> to have <parameter>u</parameter> as an unsigned integer value.
</para>
<para>
<parameter>since</parameter> 0.7.UNRELEASED</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara> a message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>p</parameter>&nbsp;:</term>
<listitem><simpara> a part number, which must be strictly less than the number
 returned by <link linkend="tp-message-count-parts"><function>tp_message_count_parts()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>k</parameter>&nbsp;:</term>
<listitem><simpara> a key in the mapping representing the part
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>u</parameter>&nbsp;:</term>
<listitem><simpara> an unsigned integer value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-set-uint32" role="function">
<title>tp_message_set_uint32 ()</title>
<indexterm zone="tp-message-set-uint32"><primary>tp_message_set_uint32</primary></indexterm><programlisting><link linkend="void">void</link>                tp_message_set_uint32               (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="guint32">guint32</link> u);</programlisting>
<para>
Set <parameter>key</parameter> in part <parameter>part</parameter> of <parameter>self</parameter> to have <parameter>u</parameter> as an unsigned integer value.
</para>
<para>
<parameter>since</parameter> 0.7.UNRELEASED</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>part</parameter>&nbsp;:</term>
<listitem><simpara> a part number, which must be strictly less than the number
 returned by <link linkend="tp-message-count-parts"><function>tp_message_count_parts()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> a key in the mapping representing the part
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>u</parameter>&nbsp;:</term>
<listitem><simpara> an unsigned integer value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-set-uint64" role="function">
<title>tp_message_set_uint64 ()</title>
<indexterm zone="tp-message-set-uint64"><primary>tp_message_set_uint64</primary></indexterm><programlisting><link linkend="void">void</link>                tp_message_set_uint64               (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="guint64">guint64</link> u);</programlisting>
<para>
Set <parameter>key</parameter> in part <parameter>part</parameter> of <parameter>self</parameter> to have <parameter>u</parameter> as an unsigned integer value.
</para>
<para>
<parameter>since</parameter> 0.7.UNRELEASED</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>part</parameter>&nbsp;:</term>
<listitem><simpara> a part number, which must be strictly less than the number
 returned by <link linkend="tp-message-count-parts"><function>tp_message_count_parts()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> a key in the mapping representing the part
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>u</parameter>&nbsp;:</term>
<listitem><simpara> an unsigned integer value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-take-message" role="function">
<title>tp_message_take_message ()</title>
<indexterm zone="tp-message-take-message"><primary>tp_message_take_message</primary></indexterm><programlisting><link linkend="void">void</link>                tp_message_take_message             (<link linkend="TpMessage">TpMessage</link> *self,
                                                         <link linkend="guint">guint</link> part,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="TpMessage">TpMessage</link> *message);</programlisting>
<para>
Set <parameter>key</parameter> in part <parameter>part</parameter> of <parameter>self</parameter> to have <parameter>message</parameter> as an aa{sv} value (that
is, an array of Message_Part), and take ownership of <parameter>message</parameter>.  The caller
should not use <parameter>message</parameter> after passing it to this function.  All handle
references owned by <parameter>message</parameter> will subsequently belong to and be released
with <parameter>self</parameter>.
</para>
<para>
<parameter>since</parameter> 0.7.UNRELEASED</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>part</parameter>&nbsp;:</term>
<listitem><simpara> a part number, which must be strictly less than the number
 returned by <link linkend="tp-message-count-parts"><function>tp_message_count_parts()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> a key in the mapping representing the part
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&nbsp;:</term>
<listitem><simpara> another (distinct) message created for the same <link linkend="TpBaseConnection"><type>TpBaseConnection</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TpMessageMixin" role="struct">
<title>TpMessageMixin</title>
<indexterm zone="TpMessageMixin"><primary>TpMessageMixin</primary></indexterm><programlisting>typedef struct {
} TpMessageMixin;
</programlisting>
<para>
Structure to be included in the instance structure of objects that
use this mixin. Initialize it with <link linkend="tp-message-mixin-init"><function>tp_message_mixin_init()</function></link>.
</para>
<para>
There are no public fields.
</para>
<para>
<parameter>since</parameter> 0.7.UNRELEASED</para>
<para>

</para></refsect2>
<refsect2 id="TpMessageMixinSendImpl" role="function">
<title>TpMessageMixinSendImpl ()</title>
<indexterm zone="TpMessageMixinSendImpl"><primary>TpMessageMixinSendImpl</primary></indexterm><programlisting><link linkend="void">void</link>                (*TpMessageMixinSendImpl)           (<link linkend="GObject">GObject</link> *object,
                                                         <link linkend="TpMessage">TpMessage</link> *message,
                                                         <link linkend="TpMessageSendingFlags">TpMessageSendingFlags</link> flags);</programlisting>
<para>
Signature of a virtual method which may be implemented to allow messages
to be sent. It must arrange for <link linkend="tp-message-mixin-sent"><function>tp_message_mixin_sent()</function></link> to be called when
the message has submitted or when message submission has failed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> An instance of the implementation that uses this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&nbsp;:</term>
<listitem><simpara> An outgoing message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&nbsp;:</term>
<listitem><simpara> flags with which to send the message
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-mixin-finalize" role="function">
<title>tp_message_mixin_finalize ()</title>
<indexterm zone="tp-message-mixin-finalize"><primary>tp_message_mixin_finalize</primary></indexterm><programlisting><link linkend="void">void</link>                tp_message_mixin_finalize           (<link linkend="GObject">GObject</link> *obj);</programlisting>
<para>
Free resources held by the text mixin.
</para>
<para>
<parameter>since</parameter> 0.7.UNRELEASED</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object with this mixin.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-mixin-implement-sending" role="function">
<title>tp_message_mixin_implement_sending ()</title>
<indexterm zone="tp-message-mixin-implement-sending"><primary>tp_message_mixin_implement_sending</primary></indexterm><programlisting><link linkend="void">void</link>                tp_message_mixin_implement_sending  (<link linkend="GObject">GObject</link> *object,
                                                         <link linkend="TpMessageMixinSendImpl">TpMessageMixinSendImpl</link> send,
                                                         <link linkend="guint">guint</link> n_types,
                                                         const <link linkend="TpChannelTextMessageType">TpChannelTextMessageType</link> *types,
                                                         <link linkend="TpMessagePartSupportFlags">TpMessagePartSupportFlags</link> message_part_support_flags,
                                                         <link linkend="TpDeliveryReportingSupportFlags">TpDeliveryReportingSupportFlags</link> delivery_reporting_support_flags,
                                                         const <link linkend="gchar">gchar</link> * const *supported_content_types);</programlisting>
<para>
Set the callback used to implement SendMessage, and the types of message
that can be sent. This must be called from the init, constructor or
constructed callback, after <link linkend="tp-message-mixin-init"><function>tp_message_mixin_init()</function></link>, and may only be called
once per object.
</para>
<para>
<parameter>since</parameter> 0.7.UNRELEASED</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> An instance of the implementation that uses this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>send</parameter>&nbsp;:</term>
<listitem><simpara> An implementation of <link linkend="SendMessage"><function>SendMessage()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_types</parameter>&nbsp;:</term>
<listitem><simpara> Number of supported message types
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>types</parameter>&nbsp;:</term>
<listitem><simpara> <parameter>n_types</parameter> supported message types
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message_part_support_flags</parameter>&nbsp;:</term>
<listitem><simpara> Flags indicating what message part structures
 are supported
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>delivery_reporting_support_flags</parameter>&nbsp;:</term>
<listitem><simpara> Flags indicating what kind of delivery
 reports are supported
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>supported_content_types</parameter>&nbsp;:</term>
<listitem><simpara> The supported content types
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-mixin-init" role="function">
<title>tp_message_mixin_init ()</title>
<indexterm zone="tp-message-mixin-init"><primary>tp_message_mixin_init</primary></indexterm><programlisting><link linkend="void">void</link>                tp_message_mixin_init               (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="gsize">gsize</link> offset,
                                                         <link linkend="TpBaseConnection">TpBaseConnection</link> *connection);</programlisting>
<para>
Initialize the mixin. Should be called from the implementation's
instance init function or constructor like so:
</para>
<para>
<informalexample><programlisting>
tp_message_mixin_init ((GObject *) self,
    G_STRUCT_OFFSET (SomeObject, message_mixin),
    self->connection);
</programlisting></informalexample>
</para>
<para>
<parameter>since</parameter> 0.7.UNRELEASED</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An instance of the implementation that uses this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara> The byte offset of the TpMessageMixin within the object structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>connection</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpBaseConnection"><type>TpBaseConnection</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-mixin-init-dbus-properties" role="function">
<title>tp_message_mixin_init_dbus_properties ()</title>
<indexterm zone="tp-message-mixin-init-dbus-properties"><primary>tp_message_mixin_init_dbus_properties</primary></indexterm><programlisting><link linkend="void">void</link>                tp_message_mixin_init_dbus_properties
                                                        (<link linkend="GObjectClass">GObjectClass</link> *cls);</programlisting>
<para>
Set up a <link linkend="TpDBusPropertiesMixinClass"><type>TpDBusPropertiesMixinClass</type></link> to use this mixin's implementation
of the Messages interface's properties.
</para>
<para>
This uses <link linkend="tp-message-mixin-get-dbus-property"><function>tp_message_mixin_get_dbus_property()</function></link> as the property getter
and sets a list of the supported properties for it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>cls</parameter>&nbsp;:</term>
<listitem><simpara> The class of an object with this mixin
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-mixin-messages-iface-init" role="function">
<title>tp_message_mixin_messages_iface_init ()</title>
<indexterm zone="tp-message-mixin-messages-iface-init"><primary>tp_message_mixin_messages_iface_init</primary></indexterm><programlisting><link linkend="void">void</link>                tp_message_mixin_messages_iface_init
                                                        (<link linkend="gpointer">gpointer</link> g_iface,
                                                         <link linkend="gpointer">gpointer</link> iface_data);</programlisting>
<para>
Fill in this mixin's Messages method implementations in the given interface
vtable.
</para>
<para>
<parameter>since</parameter> 0.7.UNRELEASED</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>g_iface</parameter>&nbsp;:</term>
<listitem><simpara> A pointer to the <link linkend="TpSvcChannelInterfaceMessagesClass"><type>TpSvcChannelInterfaceMessagesClass</type></link> in an object
 class
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iface_data</parameter>&nbsp;:</term>
<listitem><simpara> Ignored
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-mixin-get-dbus-property" role="function">
<title>tp_message_mixin_get_dbus_property ()</title>
<indexterm zone="tp-message-mixin-get-dbus-property"><primary>tp_message_mixin_get_dbus_property</primary></indexterm><programlisting><link linkend="void">void</link>                tp_message_mixin_get_dbus_property  (<link linkend="GObject">GObject</link> *object,
                                                         <link linkend="GQuark">GQuark</link> interface,
                                                         <link linkend="GQuark">GQuark</link> name,
                                                         <link linkend="GValue">GValue</link> *value,
                                                         <link linkend="gpointer">gpointer</link> unused);</programlisting>
<para>
An implementation of <link linkend="TpDBusPropertiesMixinGetter"><type>TpDBusPropertiesMixinGetter</type></link> which assumes that
the <parameter>object</parameter> has the messages mixin. It can only be used for the Messages
interface.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> An object with this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>interface</parameter>&nbsp;:</term>
<listitem><simpara> Must be <link linkend="TP-IFACE-QUARK-CHANNEL-INTERFACE-MESSAGES:CAPS"><literal>TP_IFACE_QUARK_CHANNEL_INTERFACE_MESSAGES</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> A quark representing the D-Bus property name, either
 "PendingMessages", "SupportedContentTypes" or "MessagePartSupportFlags"
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> A GValue pre-initialized to the right type, into which to put
 the value
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>unused</parameter>&nbsp;:</term>
<listitem><simpara> Ignored
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-mixin-sent" role="function">
<title>tp_message_mixin_sent ()</title>
<indexterm zone="tp-message-mixin-sent"><primary>tp_message_mixin_sent</primary></indexterm><programlisting><link linkend="void">void</link>                tp_message_mixin_sent               (<link linkend="GObject">GObject</link> *object,
                                                         <link linkend="TpMessage">TpMessage</link> *message,
                                                         <link linkend="TpMessageSendingFlags">TpMessageSendingFlags</link> flags,
                                                         const <link linkend="gchar">gchar</link> *token,
                                                         const <link linkend="GError">GError</link> *error);</programlisting>
<para>
Indicate to the message mixin that message submission to the IM server has
succeeded or failed.
</para>
<para>
After this function is called, <parameter>message</parameter> will have been freed, and must not
be dereferenced.
</para>
<para>
<parameter>since</parameter> 0.7.UNRELEASED</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing the Text and Messages interfaces with this
 mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&nbsp;:</term>
<listitem><simpara> The outgoing message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&nbsp;:</term>
<listitem><simpara> The flags used when sending the message, which may be a subset of
 those passed to the <link linkend="TpMessageMixinSendImpl"><type>TpMessageMixinSendImpl</type></link> implementation if not all are
 supported, or <link linkend="0:CAPS"><literal>0</literal></link> on error.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>token</parameter>&nbsp;:</term>
<listitem><simpara> A token representing the sent message (see the Telepathy D-Bus API
 specification), or an empty string if no suitable identifier is available,
 or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or the error with which message submission failed
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-mixin-set-rescued" role="function">
<title>tp_message_mixin_set_rescued ()</title>
<indexterm zone="tp-message-mixin-set-rescued"><primary>tp_message_mixin_set_rescued</primary></indexterm><programlisting><link linkend="void">void</link>                tp_message_mixin_set_rescued        (<link linkend="GObject">GObject</link> *obj);</programlisting>
<para>
Mark all pending messages as having been "rescued" from a channel that
previously closed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object with this mixin
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-mixin-take-received" role="function">
<title>tp_message_mixin_take_received ()</title>
<indexterm zone="tp-message-mixin-take-received"><primary>tp_message_mixin_take_received</primary></indexterm><programlisting><link linkend="guint">guint</link>               tp_message_mixin_take_received      (<link linkend="GObject">GObject</link> *object,
                                                         <link linkend="TpMessage">TpMessage</link> *message);</programlisting>
<para>
Receive a message into the pending messages queue, where it will stay
until acknowledged, and emit the Received and ReceivedMessage signals. Also
emit the SendError signal if the message is a failed delivery report.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> a channel with this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&nbsp;:</term>
<listitem><simpara> the message. Its ownership is claimed by the message
 mixin, so it must no longer be modified or freed
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the message ID

<parameter>since</parameter> 0.7.UNRELEASED
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-mixin-has-pending-messages" role="function">
<title>tp_message_mixin_has_pending_messages ()</title>
<indexterm zone="tp-message-mixin-has-pending-messages"><primary>tp_message_mixin_has_pending_messages</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_message_mixin_has_pending_messages
                                                        (<link linkend="GObject">GObject</link> *object,
                                                         <link linkend="TpHandle">TpHandle</link> *first_sender);</programlisting>
<para>
Return whether the channel <parameter>obj</parameter> has unacknowledged messages. If so, and
<parameter>first_sender</parameter> is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, the handle of the sender of the first message
is placed in it, without incrementing the handle's reference count.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> An object with this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_sender</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to store the sender of the oldest pending
 message
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if there are pending messages
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-mixin-clear" role="function">
<title>tp_message_mixin_clear ()</title>
<indexterm zone="tp-message-mixin-clear"><primary>tp_message_mixin_clear</primary></indexterm><programlisting><link linkend="void">void</link>                tp_message_mixin_clear              (<link linkend="GObject">GObject</link> *obj);</programlisting>
<para>
Clear the pending message queue, deleting all messages without emitting
PendingMessagesRemoved.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object with this mixin
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-message-mixin-text-iface-init" role="function">
<title>tp_message_mixin_text_iface_init ()</title>
<indexterm zone="tp-message-mixin-text-iface-init"><primary>tp_message_mixin_text_iface_init</primary></indexterm><programlisting><link linkend="void">void</link>                tp_message_mixin_text_iface_init    (<link linkend="gpointer">gpointer</link> g_iface,
                                                         <link linkend="gpointer">gpointer</link> iface_data);</programlisting>
<para>
Fill in this mixin's Text method implementations in the given interface
vtable.
</para>
<para>
<parameter>since</parameter> 0.7.UNRELEASED</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>g_iface</parameter>&nbsp;:</term>
<listitem><simpara> A pointer to the <link linkend="TpSvcChannelTypeTextClass"><type>TpSvcChannelTypeTextClass</type></link> in an object class
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iface_data</parameter>&nbsp;:</term>
<listitem><simpara> Ignored
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1 id="telepathy-glib-TpMessageMixin.see-also">
<title>See Also</title>
<link linkend="TpSvcChannelTypeText"><type>TpSvcChannelTypeText</type></link>, <link linkend="TpSvcChannelInterfaceMessages"><type>TpSvcChannelInterfaceMessages</type></link>,
 <link linkend="TpDBusPropertiesMixin"><type>TpDBusPropertiesMixin</type></link>
</refsect1>

</refentry>
