<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-channel-tubes">
<refmeta>
<refentrytitle role="top_of_page">Tubes channels</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Tubes channels</refname>
<refpurpose>client-side wrappers for the Tubes channel type</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;telepathy-glib/channel.h&gt;


<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-channel-type-tubes-run-accept-d-bus-tube">tp_cli_channel_type_tubes_run_accept_d_bus_tube</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_id,
                                                         <link linkend="gchar">gchar</link> **out_address,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-channel-type-tubes-run-accept-stream-tube">tp_cli_channel_type_tubes_run_accept_stream_tube</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_id,
                                                         <link linkend="guint">guint</link> in_address_type,
                                                         <link linkend="guint">guint</link> in_access_control,
                                                         const <link linkend="GValue">GValue</link> *in_access_control_param,
                                                         <link linkend="GValue">GValue</link> **out_address,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-channel-type-tubes-run-close-tube">tp_cli_channel_type_tubes_run_close_tube</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_id,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-channel-type-tubes-run-get-available-stream-tube-types">tp_cli_channel_type_tubes_run_get_available_stream_tube_types</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GHashTable">GHashTable</link> **out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-channel-type-tubes-run-get-available-tube-types">tp_cli_channel_type_tubes_run_get_available_tube_types</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GArray">GArray</link> **out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-channel-type-tubes-run-get-d-bus-names">tp_cli_channel_type_tubes_run_get_d_bus_names</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_id,
                                                         <link linkend="GPtrArray">GPtrArray</link> **out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-channel-type-tubes-run-get-d-bus-tube-address">tp_cli_channel_type_tubes_run_get_d_bus_tube_address</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_id,
                                                         <link linkend="gchar">gchar</link> **out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-channel-type-tubes-run-get-stream-tube-socket-address">tp_cli_channel_type_tubes_run_get_stream_tube_socket_address</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_id,
                                                         <link linkend="guint">guint</link> *out_address_type,
                                                         <link linkend="GValue">GValue</link> **out_address,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-channel-type-tubes-run-list-tubes">tp_cli_channel_type_tubes_run_list_tubes</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GPtrArray">GPtrArray</link> **out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-channel-type-tubes-run-offer-d-bus-tube">tp_cli_channel_type_tubes_run_offer_d_bus_tube</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_service,
                                                         <link linkend="GHashTable">GHashTable</link> *in_parameters,
                                                         <link linkend="guint">guint</link> *out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-channel-type-tubes-run-offer-stream-tube">tp_cli_channel_type_tubes_run_offer_stream_tube</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_service,
                                                         <link linkend="GHashTable">GHashTable</link> *in_parameters,
                                                         <link linkend="guint">guint</link> in_address_type,
                                                         const <link linkend="GValue">GValue</link> *in_address,
                                                         <link linkend="guint">guint</link> in_access_control,
                                                         const <link linkend="GValue">GValue</link> *in_access_control_param,
                                                         <link linkend="guint">guint</link> *out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-channel-type-tubes-call-accept-d-bus-tube">tp_cli_channel_type_tubes_call_accept_d_bus_tube</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_id,
                                                         <link linkend="tp-cli-channel-type-tubes-callback-for-accept-d-bus-tube">tp_cli_channel_type_tubes_callback_for_accept_d_bus_tube</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-channel-type-tubes-call-accept-stream-tube">tp_cli_channel_type_tubes_call_accept_stream_tube</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_id,
                                                         <link linkend="guint">guint</link> in_address_type,
                                                         <link linkend="guint">guint</link> in_access_control,
                                                         const <link linkend="GValue">GValue</link> *in_access_control_param,
                                                         <link linkend="tp-cli-channel-type-tubes-callback-for-accept-stream-tube">tp_cli_channel_type_tubes_callback_for_accept_stream_tube</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-channel-type-tubes-call-close-tube">tp_cli_channel_type_tubes_call_close_tube</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_id,
                                                         <link linkend="tp-cli-channel-type-tubes-callback-for-close-tube">tp_cli_channel_type_tubes_callback_for_close_tube</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-channel-type-tubes-call-get-available-stream-tube-types">tp_cli_channel_type_tubes_call_get_available_stream_tube_types</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-channel-type-tubes-callback-for-get-available-stream-tube-types">tp_cli_channel_type_tubes_callback_for_get_available_stream_tube_types</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-channel-type-tubes-call-get-available-tube-types">tp_cli_channel_type_tubes_call_get_available_tube_types</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-channel-type-tubes-callback-for-get-available-tube-types">tp_cli_channel_type_tubes_callback_for_get_available_tube_types</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-channel-type-tubes-call-get-d-bus-names">tp_cli_channel_type_tubes_call_get_d_bus_names</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_id,
                                                         <link linkend="tp-cli-channel-type-tubes-callback-for-get-d-bus-names">tp_cli_channel_type_tubes_callback_for_get_d_bus_names</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-channel-type-tubes-call-get-d-bus-tube-address">tp_cli_channel_type_tubes_call_get_d_bus_tube_address</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_id,
                                                         <link linkend="tp-cli-channel-type-tubes-callback-for-get-d-bus-tube-address">tp_cli_channel_type_tubes_callback_for_get_d_bus_tube_address</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-channel-type-tubes-call-get-stream-tube-socket-address">tp_cli_channel_type_tubes_call_get_stream_tube_socket_address</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_id,
                                                         <link linkend="tp-cli-channel-type-tubes-callback-for-get-stream-tube-socket-address">tp_cli_channel_type_tubes_callback_for_get_stream_tube_socket_address</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-channel-type-tubes-call-list-tubes">tp_cli_channel_type_tubes_call_list_tubes</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-channel-type-tubes-callback-for-list-tubes">tp_cli_channel_type_tubes_callback_for_list_tubes</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-channel-type-tubes-call-offer-d-bus-tube">tp_cli_channel_type_tubes_call_offer_d_bus_tube</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_service,
                                                         <link linkend="GHashTable">GHashTable</link> *in_parameters,
                                                         <link linkend="tp-cli-channel-type-tubes-callback-for-offer-d-bus-tube">tp_cli_channel_type_tubes_callback_for_offer_d_bus_tube</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-channel-type-tubes-call-offer-stream-tube">tp_cli_channel_type_tubes_call_offer_stream_tube</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_service,
                                                         <link linkend="GHashTable">GHashTable</link> *in_parameters,
                                                         <link linkend="guint">guint</link> in_address_type,
                                                         const <link linkend="GValue">GValue</link> *in_address,
                                                         <link linkend="guint">guint</link> in_access_control,
                                                         const <link linkend="GValue">GValue</link> *in_access_control_param,
                                                         <link linkend="tp-cli-channel-type-tubes-callback-for-offer-stream-tube">tp_cli_channel_type_tubes_callback_for_offer_stream_tube</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-type-tubes-callback-for-accept-d-bus-tube">*tp_cli_channel_type_tubes_callback_for_accept_d_bus_tube</link>)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *out_address,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-type-tubes-callback-for-accept-stream-tube">*tp_cli_channel_type_tubes_callback_for_accept_stream_tube</link>)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         const <link linkend="GValue">GValue</link> *out_address,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-type-tubes-callback-for-close-tube">*tp_cli_channel_type_tubes_callback_for_close_tube</link>)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-type-tubes-callback-for-get-available-stream-tube-types">*tp_cli_channel_type_tubes_callback_for_get_available_stream_tube_types</link>)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="GHashTable">GHashTable</link> *out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-type-tubes-callback-for-get-available-tube-types">*tp_cli_channel_type_tubes_callback_for_get_available_tube_types</link>)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         const <link linkend="GArray">GArray</link> *out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-type-tubes-callback-for-get-d-bus-names">*tp_cli_channel_type_tubes_callback_for_get_d_bus_names</link>)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-type-tubes-callback-for-get-d-bus-tube-address">*tp_cli_channel_type_tubes_callback_for_get_d_bus_tube_address</link>)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-type-tubes-callback-for-get-stream-tube-socket-address">*tp_cli_channel_type_tubes_callback_for_get_stream_tube_socket_address</link>)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="guint">guint</link> out_address_type,
                                                         const <link linkend="GValue">GValue</link> *out_address,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-type-tubes-callback-for-list-tubes">*tp_cli_channel_type_tubes_callback_for_list_tubes</link>)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-type-tubes-callback-for-offer-d-bus-tube">*tp_cli_channel_type_tubes_callback_for_offer_d_bus_tube</link>)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="guint">guint</link> out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-type-tubes-callback-for-offer-stream-tube">*tp_cli_channel_type_tubes_callback_for_offer_stream_tube</link>)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="guint">guint</link> out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link>* <link linkend="tp-cli-channel-type-tubes-connect-to-d-bus-names-changed">tp_cli_channel_type_tubes_connect_to_d_bus_names_changed</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="tp-cli-channel-type-tubes-signal-callback-d-bus-names-changed">tp_cli_channel_type_tubes_signal_callback_d_bus_names_changed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link>* <link linkend="tp-cli-channel-type-tubes-connect-to-new-tube">tp_cli_channel_type_tubes_connect_to_new_tube</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="tp-cli-channel-type-tubes-signal-callback-new-tube">tp_cli_channel_type_tubes_signal_callback_new_tube</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link>* <link linkend="tp-cli-channel-type-tubes-connect-to-stream-tube-new-connection">tp_cli_channel_type_tubes_connect_to_stream_tube_new_connection</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="tp-cli-channel-type-tubes-signal-callback-stream-tube-new-connection">tp_cli_channel_type_tubes_signal_callback_stream_tube_new_connection</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link>* <link linkend="tp-cli-channel-type-tubes-connect-to-tube-closed">tp_cli_channel_type_tubes_connect_to_tube_closed</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="tp-cli-channel-type-tubes-signal-callback-tube-closed">tp_cli_channel_type_tubes_signal_callback_tube_closed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link>* <link linkend="tp-cli-channel-type-tubes-connect-to-tube-state-changed">tp_cli_channel_type_tubes_connect_to_tube_state_changed</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="tp-cli-channel-type-tubes-signal-callback-tube-state-changed">tp_cli_channel_type_tubes_signal_callback_tube_state_changed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-type-tubes-signal-callback-d-bus-names-changed">*tp_cli_channel_type_tubes_signal_callback_d_bus_names_changed</link>)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="guint">guint</link> arg_id,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *arg_added,
                                                         const <link linkend="GArray">GArray</link> *arg_removed,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-type-tubes-signal-callback-new-tube">*tp_cli_channel_type_tubes_signal_callback_new_tube</link>)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="guint">guint</link> arg_id,
                                                         <link linkend="guint">guint</link> arg_initiator,
                                                         <link linkend="guint">guint</link> arg_type,
                                                         const <link linkend="gchar">gchar</link> *arg_service,
                                                         <link linkend="GHashTable">GHashTable</link> *arg_parameters,
                                                         <link linkend="guint">guint</link> arg_state,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-type-tubes-signal-callback-stream-tube-new-connection">*tp_cli_channel_type_tubes_signal_callback_stream_tube_new_connection</link>)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="guint">guint</link> arg_id,
                                                         <link linkend="guint">guint</link> arg_handle,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-type-tubes-signal-callback-tube-closed">*tp_cli_channel_type_tubes_signal_callback_tube_closed</link>)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="guint">guint</link> arg_id,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-type-tubes-signal-callback-tube-state-changed">*tp_cli_channel_type_tubes_signal_callback_tube_state_changed</link>)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="guint">guint</link> arg_id,
                                                         <link linkend="guint">guint</link> arg_state,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
A "tube" is a mechanism for arbitrary data transfer.
This section documents the auto-generated C wrappers for the Tubes
channel type.</para>
<para>

</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-run-accept-d-bus-tube" role="function"/>tp_cli_channel_type_tubes_run_accept_d_bus_tube ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_run_accept_d_bus_tube</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_channel_type_tubes_run_accept_d_bus_tube
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_id,
                                                         <link linkend="gchar">gchar</link> **out_address,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method AcceptDBusTube and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Accept a D-Bus tube that&apos;s in the &amp;quot;local pending&amp;quot; state. The         connection manager will attempt to open the tube. The tube remains in         the &amp;quot;local pending&amp;quot; state until the TubeStateChanged signal is         emitted.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpChannel"><type>TpChannel</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_id</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: The ID of the tube to accept.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_address</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned: The string describing the address of the private bus. The client           should not attempt to connect to the address until the tube is open.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-run-accept-stream-tube" role="function"/>tp_cli_channel_type_tubes_run_accept_stream_tube ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_run_accept_stream_tube</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_channel_type_tubes_run_accept_stream_tube
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_id,
                                                         <link linkend="guint">guint</link> in_address_type,
                                                         <link linkend="guint">guint</link> in_access_control,
                                                         const <link linkend="GValue">GValue</link> *in_access_control_param,
                                                         <link linkend="GValue">GValue</link> **out_address,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method AcceptStreamTube and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Accept a stream tube that&apos;s in the &amp;quot;local pending&amp;quot; state. The         connection manager will attempt to open the tube. The tube remains in         the &amp;quot;local pending&amp;quot; state until the TubeStateChanged signal is         emitted.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpChannel"><type>TpChannel</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_id</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: The ID of the tube to accept.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_address_type</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: The type of address the connection manager should listen on.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_access_control</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: The type of access control the connection manager should apply to           the socket.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_access_control_param</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: A parameter for the access control type, to be interpreted as           specified in the documentation for the Socket_Access_Control enum.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_address</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned: The address on which the connection manager will listen for           connections to this tube. The client should not attempt to connect           to the address until the tube is open.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-run-close-tube" role="function"/>tp_cli_channel_type_tubes_run_close_tube ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_run_close_tube</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_channel_type_tubes_run_close_tube
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_id,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method CloseTube and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Close a tube.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpChannel"><type>TpChannel</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_id</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: The ID of the tube to close.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-run-get-available-stream-tube-types" role="function"/>tp_cli_channel_type_tubes_run_get_available_stream_tube_types ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_run_get_available_stream_tube_types</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_channel_type_tubes_run_get_available_stream_tube_types
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GHashTable">GHashTable</link> **out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method GetAvailableStreamTubeTypes and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
List the available address types and access-control types         for stream tubes.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpChannel"><type>TpChannel</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned: &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           &lt;p&gt;A mapping from address types (members of Socket_Address_Type) to           arrays of access-control type (members of Socket_Access_Control)           that the connection manager supports for stream tubes with that           address type. For simplicity, if a CM supports offering a           particular type of tube, it is assumed to support accepting it.&lt;/p&gt;            &lt;p&gt;A typical value for a host without IPv6 support:&lt;/p&gt;            &lt;pre&gt;             {               Socket_Address_Type_IPv4:                 [Socket_Access_Control_Localhost, Socket_Access_Control_Port,                  Socket_Access_Control_Netmask],               Socket_Address_Type_Unix:                 [Socket_Access_Control_Localhost, Socket_Access_Control_Credentials]             }           &lt;/pre&gt;            &lt;p&gt;If stream tubes are not supported, this will be an empty             dictionary.&lt;/p&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-run-get-available-tube-types" role="function"/>tp_cli_channel_type_tubes_run_get_available_tube_types ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_run_get_available_tube_types</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_channel_type_tubes_run_get_available_tube_types
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GArray">GArray</link> **out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method GetAvailableTubeTypes and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpChannel"><type>TpChannel</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned: An array of the available tube types, as defined by the Tube_Type           enum.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-run-get-d-bus-names" role="function"/>tp_cli_channel_type_tubes_run_get_d_bus_names ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_run_get_d_bus_names</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_channel_type_tubes_run_get_d_bus_names
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_id,
                                                         <link linkend="GPtrArray">GPtrArray</link> **out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method GetDBusNames and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
For a multi-user (i.e. Handle_Type_Room) D-Bus tube, obtain a mapping         between contact handles and their unique bus names on this tube.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpChannel"><type>TpChannel</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_id</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: The ID of the tube to get names for.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned: An array of structures, each containing a contact handle and a D-Bus           bus name.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-run-get-d-bus-tube-address" role="function"/>tp_cli_channel_type_tubes_run_get_d_bus_tube_address ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_run_get_d_bus_tube_address</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_channel_type_tubes_run_get_d_bus_tube_address
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_id,
                                                         <link linkend="gchar">gchar</link> **out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method GetDBusTubeAddress and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
For a D-Bus tube, return a string describing the address of the         private bus.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpChannel"><type>TpChannel</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_id</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: The ID of the tube to get an address for.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned: The bus address.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-run-get-stream-tube-socket-address" role="function"/>tp_cli_channel_type_tubes_run_get_stream_tube_socket_address ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_run_get_stream_tube_socket_address</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_channel_type_tubes_run_get_stream_tube_socket_address
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_id,
                                                         <link linkend="guint">guint</link> *out_address_type,
                                                         <link linkend="GValue">GValue</link> **out_address,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method GetStreamTubeSocketAddress and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
For a stream tube, obtain the address of the socket used to         communicate over this tube.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpChannel"><type>TpChannel</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_id</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: The ID of the stream tube to get the socket for.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_address_type</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned: The type of the listening address of the socket, as a member of           Socket_Address_Type.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_address</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned: The listening address of the socket, as indicated by the           address_type.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-run-list-tubes" role="function"/>tp_cli_channel_type_tubes_run_list_tubes ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_run_list_tubes</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_channel_type_tubes_run_list_tubes
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GPtrArray">GPtrArray</link> **out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method ListTubes and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpChannel"><type>TpChannel</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned: Return an array of tuples, each representing a tube, with the          following members:           &lt;ul&gt;            &lt;li&gt;the tube&apos;s ID&lt;/li&gt;            &lt;li&gt;the tube&apos;s initiator&lt;/li&gt;            &lt;li&gt;the tube&apos;s type&lt;/li&gt;            &lt;li&gt;the tube&apos;s service&lt;/li&gt;            &lt;li&gt;the tube&apos;s parameters&lt;/li&gt;            &lt;li&gt;the tube&apos;s state&lt;/li&gt;          &lt;/ul&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-run-offer-d-bus-tube" role="function"/>tp_cli_channel_type_tubes_run_offer_d_bus_tube ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_run_offer_d_bus_tube</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_channel_type_tubes_run_offer_d_bus_tube
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_service,
                                                         <link linkend="GHashTable">GHashTable</link> *in_parameters,
                                                         <link linkend="guint">guint</link> *out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method OfferDBusTube and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Offers a D-Bus tube providing the service specified.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpChannel"><type>TpChannel</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_service</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: A string representing the service name that will be used over the           tube.           It should be a well-known D-Bus service name, of the form           com.example.ServiceName.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_parameters</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: A dictionary of properties for the new tube; the allowable keys,           types and values are defined by the service. Connection managers           must support the value being any primitive (non-container)           D-Bus type, or a byte array &apos;ay&apos;.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned: The ID of the new tube.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-run-offer-stream-tube" role="function"/>tp_cli_channel_type_tubes_run_offer_stream_tube ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_run_offer_stream_tube</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_channel_type_tubes_run_offer_stream_tube
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_service,
                                                         <link linkend="GHashTable">GHashTable</link> *in_parameters,
                                                         <link linkend="guint">guint</link> in_address_type,
                                                         const <link linkend="GValue">GValue</link> *in_address,
                                                         <link linkend="guint">guint</link> in_access_control,
                                                         const <link linkend="GValue">GValue</link> *in_access_control_param,
                                                         <link linkend="guint">guint</link> *out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method OfferStreamTube and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Offer a stream tube exporting the local socket specified.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpChannel"><type>TpChannel</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_service</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           A string representing the service name that will be used over the           tube.           It should be a well-known TCP service name as defined by           &lt;a href=&quot;http://www.iana.org/assignments/port-numbers&quot;&gt;             http://www.iana.org/assignments/port-numbers&lt;/a&gt; or           &lt;a href=&quot;http://www.dns-sd.org/ServiceTypes.html&quot;&gt;             http://www.dns-sd.org/ServiceTypes.html&lt;/a&gt;, for instance           &amp;quot;rsync&amp;quot; or &amp;quot;daap&amp;quot;.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_parameters</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           &lt;p&gt;A dictionary of properties for the new tube; the allowable keys,           types and values are defined by the service. Connection managers           must support the value being any primitive (non-container)           D-Bus type, or a byte array &apos;ay&apos;.&lt;/p&gt;           &lt;p&gt;These should usually be the same key-value pairs specified for           use in the DNS-SD TXT record for that service.&lt;/p&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_address_type</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: The type of the listening address of the local service, as a member of           Socket_Address_Type.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_address</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: The listening address of the local service, as indicated by the           address_type.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_access_control</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: The access control the local service applies to the local socket,           specified so the connection manager can behave appropriately           when it connects.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_access_control_param</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: A parameter for the access control type, to be interpreted as           specified in the documentation for the Socket_Access_Control enum.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned: The ID of the new tube.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-call-accept-d-bus-tube" role="function"/>tp_cli_channel_type_tubes_call_accept_d_bus_tube ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_call_accept_d_bus_tube</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_channel_type_tubes_call_accept_d_bus_tube
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_id,
                                                         <link linkend="tp-cli-channel-type-tubes-callback-for-accept-d-bus-tube">tp_cli_channel_type_tubes_callback_for_accept_d_bus_tube</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a AcceptDBusTube method call.
</para>
<para>
Accept a D-Bus tube that&apos;s in the &amp;quot;local pending&amp;quot; state. The         connection manager will attempt to open the tube. The tube remains in         the &amp;quot;local pending&amp;quot; state until the TubeStateChanged signal is         emitted.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_id</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: The ID of the tube to accept.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-call-accept-stream-tube" role="function"/>tp_cli_channel_type_tubes_call_accept_stream_tube ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_call_accept_stream_tube</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_channel_type_tubes_call_accept_stream_tube
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_id,
                                                         <link linkend="guint">guint</link> in_address_type,
                                                         <link linkend="guint">guint</link> in_access_control,
                                                         const <link linkend="GValue">GValue</link> *in_access_control_param,
                                                         <link linkend="tp-cli-channel-type-tubes-callback-for-accept-stream-tube">tp_cli_channel_type_tubes_callback_for_accept_stream_tube</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a AcceptStreamTube method call.
</para>
<para>
Accept a stream tube that&apos;s in the &amp;quot;local pending&amp;quot; state. The         connection manager will attempt to open the tube. The tube remains in         the &amp;quot;local pending&amp;quot; state until the TubeStateChanged signal is         emitted.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_id</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: The ID of the tube to accept.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_address_type</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: The type of address the connection manager should listen on.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_access_control</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: The type of access control the connection manager should apply to           the socket.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_access_control_param</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: A parameter for the access control type, to be interpreted as           specified in the documentation for the Socket_Access_Control enum.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-call-close-tube" role="function"/>tp_cli_channel_type_tubes_call_close_tube ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_call_close_tube</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_channel_type_tubes_call_close_tube
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_id,
                                                         <link linkend="tp-cli-channel-type-tubes-callback-for-close-tube">tp_cli_channel_type_tubes_callback_for_close_tube</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a CloseTube method call.
</para>
<para>
Close a tube.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_id</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: The ID of the tube to close.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-call-get-available-stream-tube-types" role="function"/>tp_cli_channel_type_tubes_call_get_available_stream_tube_types ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_call_get_available_stream_tube_types</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_channel_type_tubes_call_get_available_stream_tube_types
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-channel-type-tubes-callback-for-get-available-stream-tube-types">tp_cli_channel_type_tubes_callback_for_get_available_stream_tube_types</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a GetAvailableStreamTubeTypes method call.
</para>
<para>
List the available address types and access-control types         for stream tubes.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-call-get-available-tube-types" role="function"/>tp_cli_channel_type_tubes_call_get_available_tube_types ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_call_get_available_tube_types</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_channel_type_tubes_call_get_available_tube_types
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-channel-type-tubes-callback-for-get-available-tube-types">tp_cli_channel_type_tubes_callback_for_get_available_tube_types</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a GetAvailableTubeTypes method call.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-call-get-d-bus-names" role="function"/>tp_cli_channel_type_tubes_call_get_d_bus_names ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_call_get_d_bus_names</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_channel_type_tubes_call_get_d_bus_names
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_id,
                                                         <link linkend="tp-cli-channel-type-tubes-callback-for-get-d-bus-names">tp_cli_channel_type_tubes_callback_for_get_d_bus_names</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a GetDBusNames method call.
</para>
<para>
For a multi-user (i.e. Handle_Type_Room) D-Bus tube, obtain a mapping         between contact handles and their unique bus names on this tube.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_id</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: The ID of the tube to get names for.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-call-get-d-bus-tube-address" role="function"/>tp_cli_channel_type_tubes_call_get_d_bus_tube_address ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_call_get_d_bus_tube_address</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_channel_type_tubes_call_get_d_bus_tube_address
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_id,
                                                         <link linkend="tp-cli-channel-type-tubes-callback-for-get-d-bus-tube-address">tp_cli_channel_type_tubes_callback_for_get_d_bus_tube_address</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a GetDBusTubeAddress method call.
</para>
<para>
For a D-Bus tube, return a string describing the address of the         private bus.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_id</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: The ID of the tube to get an address for.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-call-get-stream-tube-socket-address" role="function"/>tp_cli_channel_type_tubes_call_get_stream_tube_socket_address ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_call_get_stream_tube_socket_address</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_channel_type_tubes_call_get_stream_tube_socket_address
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_id,
                                                         <link linkend="tp-cli-channel-type-tubes-callback-for-get-stream-tube-socket-address">tp_cli_channel_type_tubes_callback_for_get_stream_tube_socket_address</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a GetStreamTubeSocketAddress method call.
</para>
<para>
For a stream tube, obtain the address of the socket used to         communicate over this tube.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_id</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: The ID of the stream tube to get the socket for.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-call-list-tubes" role="function"/>tp_cli_channel_type_tubes_call_list_tubes ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_call_list_tubes</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_channel_type_tubes_call_list_tubes
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-channel-type-tubes-callback-for-list-tubes">tp_cli_channel_type_tubes_callback_for_list_tubes</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a ListTubes method call.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-call-offer-d-bus-tube" role="function"/>tp_cli_channel_type_tubes_call_offer_d_bus_tube ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_call_offer_d_bus_tube</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_channel_type_tubes_call_offer_d_bus_tube
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_service,
                                                         <link linkend="GHashTable">GHashTable</link> *in_parameters,
                                                         <link linkend="tp-cli-channel-type-tubes-callback-for-offer-d-bus-tube">tp_cli_channel_type_tubes_callback_for_offer_d_bus_tube</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a OfferDBusTube method call.
</para>
<para>
Offers a D-Bus tube providing the service specified.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_service</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: A string representing the service name that will be used over the           tube.           It should be a well-known D-Bus service name, of the form           com.example.ServiceName.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_parameters</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: A dictionary of properties for the new tube; the allowable keys,           types and values are defined by the service. Connection managers           must support the value being any primitive (non-container)           D-Bus type, or a byte array &apos;ay&apos;.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-call-offer-stream-tube" role="function"/>tp_cli_channel_type_tubes_call_offer_stream_tube ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_call_offer_stream_tube</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_channel_type_tubes_call_offer_stream_tube
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_service,
                                                         <link linkend="GHashTable">GHashTable</link> *in_parameters,
                                                         <link linkend="guint">guint</link> in_address_type,
                                                         const <link linkend="GValue">GValue</link> *in_address,
                                                         <link linkend="guint">guint</link> in_access_control,
                                                         const <link linkend="GValue">GValue</link> *in_access_control_param,
                                                         <link linkend="tp-cli-channel-type-tubes-callback-for-offer-stream-tube">tp_cli_channel_type_tubes_callback_for_offer_stream_tube</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a OfferStreamTube method call.
</para>
<para>
Offer a stream tube exporting the local socket specified.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_service</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           A string representing the service name that will be used over the           tube.           It should be a well-known TCP service name as defined by           &lt;a href=&quot;http://www.iana.org/assignments/port-numbers&quot;&gt;             http://www.iana.org/assignments/port-numbers&lt;/a&gt; or           &lt;a href=&quot;http://www.dns-sd.org/ServiceTypes.html&quot;&gt;             http://www.dns-sd.org/ServiceTypes.html&lt;/a&gt;, for instance           &amp;quot;rsync&amp;quot; or &amp;quot;daap&amp;quot;.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_parameters</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           &lt;p&gt;A dictionary of properties for the new tube; the allowable keys,           types and values are defined by the service. Connection managers           must support the value being any primitive (non-container)           D-Bus type, or a byte array &apos;ay&apos;.&lt;/p&gt;           &lt;p&gt;These should usually be the same key-value pairs specified for           use in the DNS-SD TXT record for that service.&lt;/p&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_address_type</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: The type of the listening address of the local service, as a member of           Socket_Address_Type.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_address</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: The listening address of the local service, as indicated by the           address_type.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_access_control</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: The access control the local service applies to the local socket,           specified so the connection manager can behave appropriately           when it connects.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_access_control_param</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: A parameter for the access control type, to be interpreted as           specified in the documentation for the Socket_Access_Control enum.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-callback-for-accept-d-bus-tube" role="function"/>tp_cli_channel_type_tubes_callback_for_accept_d_bus_tube ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_callback_for_accept_d_bus_tube</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_type_tubes_callback_for_accept_d_bus_tube)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *out_address,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a AcceptDBusTube method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_address</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>: The string describing the address of the private bus. The client           should not attempt to connect to the address until the tube is open.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-callback-for-accept-stream-tube" role="function"/>tp_cli_channel_type_tubes_callback_for_accept_stream_tube ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_callback_for_accept_stream_tube</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_type_tubes_callback_for_accept_stream_tube)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         const <link linkend="GValue">GValue</link> *out_address,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a AcceptStreamTube method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_address</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>: The address on which the connection manager will listen for           connections to this tube. The client should not attempt to connect           to the address until the tube is open.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-callback-for-close-tube" role="function"/>tp_cli_channel_type_tubes_callback_for_close_tube ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_callback_for_close_tube</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_type_tubes_callback_for_close_tube)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a CloseTube method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-callback-for-get-available-stream-tube-types" role="function"/>tp_cli_channel_type_tubes_callback_for_get_available_stream_tube_types ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_callback_for_get_available_stream_tube_types</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_type_tubes_callback_for_get_available_stream_tube_types)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="GHashTable">GHashTable</link> *out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a GetAvailableStreamTubeTypes method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>: &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           &lt;p&gt;A mapping from address types (members of Socket_Address_Type) to           arrays of access-control type (members of Socket_Access_Control)           that the connection manager supports for stream tubes with that           address type. For simplicity, if a CM supports offering a           particular type of tube, it is assumed to support accepting it.&lt;/p&gt;            &lt;p&gt;A typical value for a host without IPv6 support:&lt;/p&gt;            &lt;pre&gt;             {               Socket_Address_Type_IPv4:                 [Socket_Access_Control_Localhost, Socket_Access_Control_Port,                  Socket_Access_Control_Netmask],               Socket_Address_Type_Unix:                 [Socket_Access_Control_Localhost, Socket_Access_Control_Credentials]             }           &lt;/pre&gt;            &lt;p&gt;If stream tubes are not supported, this will be an empty             dictionary.&lt;/p&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-callback-for-get-available-tube-types" role="function"/>tp_cli_channel_type_tubes_callback_for_get_available_tube_types ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_callback_for_get_available_tube_types</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_type_tubes_callback_for_get_available_tube_types)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         const <link linkend="GArray">GArray</link> *out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a GetAvailableTubeTypes method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>: An array of the available tube types, as defined by the Tube_Type           enum.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-callback-for-get-d-bus-names" role="function"/>tp_cli_channel_type_tubes_callback_for_get_d_bus_names ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_callback_for_get_d_bus_names</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_type_tubes_callback_for_get_d_bus_names)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a GetDBusNames method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>: An array of structures, each containing a contact handle and a D-Bus           bus name.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-callback-for-get-d-bus-tube-address" role="function"/>tp_cli_channel_type_tubes_callback_for_get_d_bus_tube_address ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_callback_for_get_d_bus_tube_address</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_type_tubes_callback_for_get_d_bus_tube_address)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a GetDBusTubeAddress method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>: The bus address.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-callback-for-get-stream-tube-socket-address" role="function"/>tp_cli_channel_type_tubes_callback_for_get_stream_tube_socket_address ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_callback_for_get_stream_tube_socket_address</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_type_tubes_callback_for_get_stream_tube_socket_address)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="guint">guint</link> out_address_type,
                                                         const <link linkend="GValue">GValue</link> *out_address,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a GetStreamTubeSocketAddress method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_address_type</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>: The type of the listening address of the socket, as a member of           Socket_Address_Type.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_address</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>: The listening address of the socket, as indicated by the           address_type.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-callback-for-list-tubes" role="function"/>tp_cli_channel_type_tubes_callback_for_list_tubes ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_callback_for_list_tubes</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_type_tubes_callback_for_list_tubes)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a ListTubes method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>: Return an array of tuples, each representing a tube, with the          following members:           &lt;ul&gt;            &lt;li&gt;the tube&apos;s ID&lt;/li&gt;            &lt;li&gt;the tube&apos;s initiator&lt;/li&gt;            &lt;li&gt;the tube&apos;s type&lt;/li&gt;            &lt;li&gt;the tube&apos;s service&lt;/li&gt;            &lt;li&gt;the tube&apos;s parameters&lt;/li&gt;            &lt;li&gt;the tube&apos;s state&lt;/li&gt;          &lt;/ul&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-callback-for-offer-d-bus-tube" role="function"/>tp_cli_channel_type_tubes_callback_for_offer_d_bus_tube ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_callback_for_offer_d_bus_tube</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_type_tubes_callback_for_offer_d_bus_tube)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="guint">guint</link> out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a OfferDBusTube method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>: The ID of the new tube.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-callback-for-offer-stream-tube" role="function"/>tp_cli_channel_type_tubes_callback_for_offer_stream_tube ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_callback_for_offer_stream_tube</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_type_tubes_callback_for_offer_stream_tube)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="guint">guint</link> out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a OfferStreamTube method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>: The ID of the new tube.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-connect-to-d-bus-names-changed" role="function"/>tp_cli_channel_type_tubes_connect_to_d_bus_names_changed ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_connect_to_d_bus_names_changed</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link>* tp_cli_channel_type_tubes_connect_to_d_bus_names_changed
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="tp-cli-channel-type-tubes-signal-callback-d-bus-names-changed">tp_cli_channel_type_tubes_signal_callback_d_bus_names_changed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal DBusNamesChanged.
</para>
<para>
Emitted on a multi-user (i.e. Handle_Type_Room) D-Bus tube when a         participant opens or closes the tube.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpChannel"><type>TpChannel</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL:CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL:CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-connect-to-new-tube" role="function"/>tp_cli_channel_type_tubes_connect_to_new_tube ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_connect_to_new_tube</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link>* tp_cli_channel_type_tubes_connect_to_new_tube
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="tp-cli-channel-type-tubes-signal-callback-new-tube">tp_cli_channel_type_tubes_signal_callback_new_tube</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal NewTube.
</para>
<para>
Emitted when a tube is created.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpChannel"><type>TpChannel</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL:CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL:CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-connect-to-stream-tube-new-connection" role="function"/>tp_cli_channel_type_tubes_connect_to_stream_tube_new_connection ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_connect_to_stream_tube_new_connection</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link>* tp_cli_channel_type_tubes_connect_to_stream_tube_new_connection
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="tp-cli-channel-type-tubes-signal-callback-stream-tube-new-connection">tp_cli_channel_type_tubes_signal_callback_stream_tube_new_connection</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal StreamTubeNewConnection.
</para>
<para>
Emitted on a stream tube when a participant opens a new connection         to its socket.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpChannel"><type>TpChannel</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL:CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL:CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-connect-to-tube-closed" role="function"/>tp_cli_channel_type_tubes_connect_to_tube_closed ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_connect_to_tube_closed</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link>* tp_cli_channel_type_tubes_connect_to_tube_closed
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="tp-cli-channel-type-tubes-signal-callback-tube-closed">tp_cli_channel_type_tubes_signal_callback_tube_closed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal TubeClosed.
</para>
<para>
Emitted when a tube has been closed. The ID of a closed tube is no        longer valid. The ID may later be reused for a new tube.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpChannel"><type>TpChannel</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL:CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL:CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-connect-to-tube-state-changed" role="function"/>tp_cli_channel_type_tubes_connect_to_tube_state_changed ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_connect_to_tube_state_changed</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link>* tp_cli_channel_type_tubes_connect_to_tube_state_changed
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="tp-cli-channel-type-tubes-signal-callback-tube-state-changed">tp_cli_channel_type_tubes_signal_callback_tube_state_changed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal TubeStateChanged.
</para>
<para>
Emitted when the state of a tube changes.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpChannel"><type>TpChannel</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL:CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL:CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-signal-callback-d-bus-names-changed" role="function"/>tp_cli_channel_type_tubes_signal_callback_d_bus_names_changed ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_signal_callback_d_bus_names_changed</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_type_tubes_signal_callback_d_bus_names_changed)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="guint">guint</link> arg_id,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *arg_added,
                                                         const <link linkend="GArray">GArray</link> *arg_removed,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal DBusNamesChanged.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-channel-type-tubes-connect-to-d-bus-names-changed"><function>tp_cli_channel_type_tubes_connect_to_d_bus_names_changed()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_id</parameter>&nbsp;:</term>
<listitem><simpara> The ID of the tube whose names have changed.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_added</parameter>&nbsp;:</term>
<listitem><simpara> Array of handles and D-Bus names of new participants.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_removed</parameter>&nbsp;:</term>
<listitem><simpara> Array of handles of former participants.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-signal-callback-new-tube" role="function"/>tp_cli_channel_type_tubes_signal_callback_new_tube ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_signal_callback_new_tube</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_type_tubes_signal_callback_new_tube)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="guint">guint</link> arg_id,
                                                         <link linkend="guint">guint</link> arg_initiator,
                                                         <link linkend="guint">guint</link> arg_type,
                                                         const <link linkend="gchar">gchar</link> *arg_service,
                                                         <link linkend="GHashTable">GHashTable</link> *arg_parameters,
                                                         <link linkend="guint">guint</link> arg_state,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal NewTube.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-channel-type-tubes-connect-to-new-tube"><function>tp_cli_channel_type_tubes_connect_to_new_tube()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_id</parameter>&nbsp;:</term>
<listitem><simpara> The ID of the new tube.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_initiator</parameter>&nbsp;:</term>
<listitem><simpara> The handle of the contact who initiated the tube.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_type</parameter>&nbsp;:</term>
<listitem><simpara> The tube type, as defined by the Tube_Type enum.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_service</parameter>&nbsp;:</term>
<listitem><simpara> A string representing the service that will be used over the tube.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_parameters</parameter>&nbsp;:</term>
<listitem><simpara> The new tube&apos;s properties.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_state</parameter>&nbsp;:</term>
<listitem><simpara> The new tube&apos;s state.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-signal-callback-stream-tube-new-connection" role="function"/>tp_cli_channel_type_tubes_signal_callback_stream_tube_new_connection ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_signal_callback_stream_tube_new_connection</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_type_tubes_signal_callback_stream_tube_new_connection)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="guint">guint</link> arg_id,
                                                         <link linkend="guint">guint</link> arg_handle,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal StreamTubeNewConnection.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-channel-type-tubes-connect-to-stream-tube-new-connection"><function>tp_cli_channel_type_tubes_connect_to_stream_tube_new_connection()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_id</parameter>&nbsp;:</term>
<listitem><simpara> The ID of the tube
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_handle</parameter>&nbsp;:</term>
<listitem><simpara> The handle of the participant who opened the new connection
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-signal-callback-tube-closed" role="function"/>tp_cli_channel_type_tubes_signal_callback_tube_closed ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_signal_callback_tube_closed</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_type_tubes_signal_callback_tube_closed)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="guint">guint</link> arg_id,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal TubeClosed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-channel-type-tubes-connect-to-tube-closed"><function>tp_cli_channel_type_tubes_connect_to_tube_closed()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_id</parameter>&nbsp;:</term>
<listitem><simpara> The ID of the tube that was closed.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-cli-channel-type-tubes-signal-callback-tube-state-changed" role="function"/>tp_cli_channel_type_tubes_signal_callback_tube_state_changed ()</title>
<indexterm><primary>tp_cli_channel_type_tubes_signal_callback_tube_state_changed</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_type_tubes_signal_callback_tube_state_changed)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="guint">guint</link> arg_id,
                                                         <link linkend="guint">guint</link> arg_state,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal TubeStateChanged.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-channel-type-tubes-connect-to-tube-state-changed"><function>tp_cli_channel_type_tubes_connect_to_tube_state_changed()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_id</parameter>&nbsp;:</term>
<listitem><simpara> The ID of the tube that changed state.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_state</parameter>&nbsp;:</term>
<listitem><simpara> The new state of the tube; see the Tube_State enumeration.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1>
<title>See Also</title>
channel-group
</refsect1>


<refsect1><refsect2 /><refsect2 /></refsect1>
</refentry>
