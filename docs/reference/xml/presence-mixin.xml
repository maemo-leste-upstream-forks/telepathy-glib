<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-TpPresenceMixin">
<refmeta>
<refentrytitle role="top_of_page">TpPresenceMixin</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>TpPresenceMixin</refname>
<refpurpose>a mixin implementation of the Presence connection
 interface</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;telepathy-glib/presence-mixin.h&gt;


struct              <link linkend="TpPresenceStatusOptionalArgumentSpec">TpPresenceStatusOptionalArgumentSpec</link>;
                    <link linkend="TpPresenceStatusSpec">TpPresenceStatusSpec</link>;
<link linkend="gboolean">gboolean</link>            (<link linkend="TpPresenceMixinStatusAvailableFunc">*TpPresenceMixinStatusAvailableFunc</link>)
                                                        (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="guint">guint</link> index);
<link linkend="GHashTable">GHashTable</link>*         (<link linkend="TpPresenceMixinGetContactStatusesFunc">*TpPresenceMixinGetContactStatusesFunc</link>)
                                                        (<link linkend="GObject">GObject</link> *obj,
                                                         const <link linkend="GArray">GArray</link> *contacts,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            (<link linkend="TpPresenceMixinSetOwnStatusFunc">*TpPresenceMixinSetOwnStatusFunc</link>)  (<link linkend="GObject">GObject</link> *obj,
                                                         const <link linkend="TpPresenceStatus">TpPresenceStatus</link> *status,
                                                         <link linkend="GError">GError</link> **error);
                    <link linkend="TpPresenceStatus">TpPresenceStatus</link>;
<link linkend="TpPresenceStatus">TpPresenceStatus</link>*   <link linkend="tp-presence-status-new">tp_presence_status_new</link>              (<link linkend="guint">guint</link> index,
                                                         <link linkend="GHashTable">GHashTable</link> *optional_arguments);
<link linkend="void">void</link>                <link linkend="tp-presence-status-free">tp_presence_status_free</link>             (<link linkend="TpPresenceStatus">TpPresenceStatus</link> *status);
                    <link linkend="TpPresenceMixin">TpPresenceMixin</link>;
                    <link linkend="TpPresenceMixinClass">TpPresenceMixinClass</link>;
<link linkend="void">void</link>                <link linkend="tp-presence-mixin-class-init">tp_presence_mixin_class_init</link>        (<link linkend="GObjectClass">GObjectClass</link> *obj_cls,
                                                         <link linkend="glong">glong</link> offset,
                                                         <link linkend="TpPresenceMixinStatusAvailableFunc">TpPresenceMixinStatusAvailableFunc</link> status_available,
                                                         <link linkend="TpPresenceMixinGetContactStatusesFunc">TpPresenceMixinGetContactStatusesFunc</link> get_contact_statuses,
                                                         <link linkend="TpPresenceMixinSetOwnStatusFunc">TpPresenceMixinSetOwnStatusFunc</link> set_own_status,
                                                         const <link linkend="TpPresenceStatusSpec">TpPresenceStatusSpec</link> *statuses);
<link linkend="void">void</link>                <link linkend="tp-presence-mixin-init">tp_presence_mixin_init</link>              (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="glong">glong</link> offset);
<link linkend="void">void</link>                <link linkend="tp-presence-mixin-finalize">tp_presence_mixin_finalize</link>          (<link linkend="GObject">GObject</link> *obj);
<link linkend="void">void</link>                <link linkend="tp-presence-mixin-emit-presence-update">tp_presence_mixin_emit_presence_update</link>
                                                        (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="GHashTable">GHashTable</link> *contact_presences);
<link linkend="void">void</link>                <link linkend="tp-presence-mixin-emit-one-presence-update">tp_presence_mixin_emit_one_presence_update</link>
                                                        (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="TpHandle">TpHandle</link> handle,
                                                         const <link linkend="TpPresenceStatus">TpPresenceStatus</link> *status);
<link linkend="void">void</link>                <link linkend="tp-presence-mixin-iface-init">tp_presence_mixin_iface_init</link>        (<link linkend="gpointer">gpointer</link> g_iface,
                                                         <link linkend="gpointer">gpointer</link> iface_data);


</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
This mixin can be added to a <link linkend="TpBaseConnection"><type>TpBaseConnection</type></link> subclass to implement the
presence interface in a general way. It does not support protocols where it
is possible to set multiple statuses on yourself at once, however. Hence all
presence statuses will have the exclusive flag set.
</para>
<para>
There are plans to deprecate the notion of last activity time in the D-Bus
presence interface, so <link linkend="TpPresenceStatus"><type>TpPresenceStatus</type></link> doesn't include it at all.
Consequently, the last activity time field in presence data presented over
D-Bus will always be zero and the SetLastActivityTime method doesn't actually
do anything.
</para>
<para>
To use the presence mixin, include a <link linkend="TpPresenceMixinClass"><type>TpPresenceMixinClass</type></link> somewhere in your
class structure and a <link linkend="TpPresenceMixin"><type>TpPresenceMixin</type></link> somewhere in your instance structure,
and call <link linkend="tp-presence-mixin-class-init"><function>tp_presence_mixin_class_init()</function></link> from your class_init function,
<link linkend="tp-presence-mixin-init"><function>tp_presence_mixin_init()</function></link> from your init function or constructor, and
<link linkend="tp-presence-mixin-finalize"><function>tp_presence_mixin_finalize()</function></link> from your dispose or finalize function.
</para>
<para>
To use the presence mixin as the implementation of
<link linkend="TpSvcConnectionInterfacePresence"><type>TpSvcConnectionInterfacePresence</type></link>, in the function you pass to
G_IMPLEMENT_INTERFACE, you should call tp_presence_mixin_iface_init.
TpPresenceMixin implements all of the D-Bus methods in the Presence
interface.</para>
<para>

</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="TpPresenceStatusOptionalArgumentSpec" role="struct"/>struct TpPresenceStatusOptionalArgumentSpec</title>
<indexterm><primary>TpPresenceStatusOptionalArgumentSpec</primary></indexterm><programlisting>struct TpPresenceStatusOptionalArgumentSpec {
    const gchar *name;
    const gchar *dtype;
};
</programlisting>
<para>
Structure specifying a supported optional argument for a presence status.
</para>
<para>
In addition to the fields documented here, there are two gpointer fields
which must currently be <link linkend="NULL:CAPS"><literal>NULL</literal></link>. A meaning may be defined for these in a future
version of telepathy-glib.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term>const&nbsp;<link linkend="gchar">gchar</link>&nbsp;*<structfield>name</structfield>;</term>
<listitem><simpara> Name of the argument as passed over D-Bus
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>const&nbsp;<link linkend="gchar">gchar</link>&nbsp;*<structfield>dtype</structfield>;</term>
<listitem><simpara> D-Bus type signature of the argument
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="TpPresenceStatusSpec" role="struct"/>TpPresenceStatusSpec</title>
<indexterm><primary>TpPresenceStatusSpec</primary></indexterm><programlisting>typedef struct {
    const gchar *name;
    TpConnectionPresenceType presence_type;
    gboolean self;
    const TpPresenceStatusOptionalArgumentSpec *optional_arguments;
} TpPresenceStatusSpec;
</programlisting>
<para>
Structure specifying a supported presence status.
</para>
<para>
In addition to the fields documented here, there are two gpointer fields
which must currently be <link linkend="NULL:CAPS"><literal>NULL</literal></link>. A meaning may be defined for these in a future
version of telepathy-glib.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term>const&nbsp;<link linkend="gchar">gchar</link>&nbsp;*<structfield>name</structfield>;</term>
<listitem><simpara> String identifier of the presence status
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link>&nbsp;<structfield>presence_type</structfield>;</term>
<listitem><simpara> A type value, as specified by <link linkend="TpConnectionPresenceType"><type>TpConnectionPresenceType</type></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gboolean">gboolean</link>&nbsp;<structfield>self</structfield>;</term>
<listitem><simpara> Indicates if this status may be set on yourself
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>const&nbsp;<link linkend="TpPresenceStatusOptionalArgumentSpec">TpPresenceStatusOptionalArgumentSpec</link>&nbsp;*<structfield>optional_arguments</structfield>;</term>
<listitem><simpara> An array of <link linkend="TpPresenceStatusOptionalArgumentSpec"><type>TpPresenceStatusOptionalArgumentSpec</type></link>
 structures representing the optional arguments for this status, terminated
 by a NULL name. If there are no optional arguments for a status, this can be
 NULL.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="TpPresenceMixinStatusAvailableFunc" role="function"/>TpPresenceMixinStatusAvailableFunc ()</title>
<indexterm><primary>TpPresenceMixinStatusAvailableFunc</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            (*TpPresenceMixinStatusAvailableFunc)
                                                        (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="guint">guint</link> index);</programlisting>
<para>
Signature of the callback used to determine if a given status is currently
available.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing the presence interface with this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>index</parameter>&nbsp;:</term>
<listitem><simpara> The index of the presence status in the provided supported presence
 statuses array
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the status is available, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="TpPresenceMixinGetContactStatusesFunc" role="function"/>TpPresenceMixinGetContactStatusesFunc ()</title>
<indexterm><primary>TpPresenceMixinGetContactStatusesFunc</primary></indexterm><programlisting><link linkend="GHashTable">GHashTable</link>*         (*TpPresenceMixinGetContactStatusesFunc)
                                                        (<link linkend="GObject">GObject</link> *obj,
                                                         const <link linkend="GArray">GArray</link> *contacts,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Signature of the callback used to get the stored presence status of
contacts. The returned hash table should have contact handles mapped to their
respective presence statuses in <link linkend="TpPresenceStatus"><type>TpPresenceStatus</type></link> structs.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object with this mixin.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>contacts</parameter>&nbsp;:</term>
<listitem><simpara> An array of <link linkend="TpHandle"><type>TpHandle</type></link> for the contacts to get presence status for
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> Used to return a Telepathy D-Bus error if <link linkend="NULL:CAPS"><literal>NULL</literal></link> is returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The contact presence on success, <link linkend="NULL:CAPS"><literal>NULL</literal></link> with error set on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="TpPresenceMixinSetOwnStatusFunc" role="function"/>TpPresenceMixinSetOwnStatusFunc ()</title>
<indexterm><primary>TpPresenceMixinSetOwnStatusFunc</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            (*TpPresenceMixinSetOwnStatusFunc)  (<link linkend="GObject">GObject</link> *obj,
                                                         const <link linkend="TpPresenceStatus">TpPresenceStatus</link> *status,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Signature of the callback used to commit changes to the user's own presence
status in SetStatuses. It is also used in ClearStatus and RemoveStatus to
reset the user's own status back to the "default" one with a <link linkend="NULL:CAPS"><literal>NULL</literal></link> status
argument.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object with this mixin.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&nbsp;:</term>
<listitem><simpara> The status to set, or NULL for whatever the protocol defines as a
 "default" status
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> Used to return a Telepathy D-Bus error if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> is returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the operation was successful, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="TpPresenceStatus" role="struct"/>TpPresenceStatus</title>
<indexterm><primary>TpPresenceStatus</primary></indexterm><programlisting>typedef struct {
    guint index;
    GHashTable *optional_arguments;
} TpPresenceStatus;
</programlisting>
<para>
Structure representing a presence status.
</para>
<para>
In addition to the fields documented here, there are two gpointer fields
which must currently be <link linkend="NULL:CAPS"><literal>NULL</literal></link>. A meaning may be defined for these in a future
version of telepathy-glib.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="guint">guint</link>&nbsp;<structfield>index</structfield>;</term>
<listitem><simpara> Index of the presence status in the provided supported presence
 statuses array
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GHashTable">GHashTable</link>&nbsp;*<structfield>optional_arguments</structfield>;</term>
<listitem><simpara> A mapping of string identifiers to GValues of the
 optional status arguments, if any
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-presence-status-new" role="function"/>tp_presence_status_new ()</title>
<indexterm><primary>tp_presence_status_new</primary></indexterm><programlisting><link linkend="TpPresenceStatus">TpPresenceStatus</link>*   tp_presence_status_new              (<link linkend="guint">guint</link> index,
                                                         <link linkend="GHashTable">GHashTable</link> *optional_arguments);</programlisting>
<para>
Construct a presence status structure. You should free the returned
structure with <link linkend="tp-presence-status-free"><type>tp_presence_status_free</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>index</parameter>&nbsp;:</term>
<listitem><simpara> Index of the presence status in the provided supported presence
 statuses array
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>optional_arguments</parameter>&nbsp;:</term>
<listitem><simpara> Optional arguments for the presence statuses. Can be
 NULL if there are no optional arguments. The presence status object makes a
 copy of the hashtable, so you should free the original.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> A pointer to the newly allocated presence status structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-presence-status-free" role="function"/>tp_presence_status_free ()</title>
<indexterm><primary>tp_presence_status_free</primary></indexterm><programlisting><link linkend="void">void</link>                tp_presence_status_free             (<link linkend="TpPresenceStatus">TpPresenceStatus</link> *status);</programlisting>
<para>
Deallocate all resources associated with a presence status structure.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>status</parameter>&nbsp;:</term>
<listitem><simpara> A pointer to the presence status structure to free.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="TpPresenceMixin" role="struct"/>TpPresenceMixin</title>
<indexterm><primary>TpPresenceMixin</primary></indexterm><programlisting>typedef struct {
} TpPresenceMixin;
</programlisting>
<para>
Structure to be included in the instance structure of objects that
use this mixin. Initialize it with <link linkend="tp-presence-mixin-init"><function>tp_presence_mixin_init()</function></link>.
</para>
<para>
There are no public fields.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="TpPresenceMixinClass" role="struct"/>TpPresenceMixinClass</title>
<indexterm><primary>TpPresenceMixinClass</primary></indexterm><programlisting>typedef struct {
    TpPresenceMixinStatusAvailableFunc status_available;
    TpPresenceMixinGetContactStatusesFunc get_contact_statuses;
    TpPresenceMixinSetOwnStatusFunc set_own_status;

    const TpPresenceStatusSpec *statuses;
} TpPresenceMixinClass;
</programlisting>
<para>
Structure to be included in the class structure of objects that
use this mixin. Initialize it with <link linkend="tp-presence-mixin-class-init"><function>tp_presence_mixin_class_init()</function></link>.
</para>
<para>
All fields should be considered read-only.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="TpPresenceMixinStatusAvailableFunc">TpPresenceMixinStatusAvailableFunc</link>&nbsp;<structfield>status_available</structfield>;</term>
<listitem><simpara> The status-available function that was passed to
 <link linkend="tp-presence-mixin-class-init"><function>tp_presence_mixin_class_init()</function></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpPresenceMixinGetContactStatusesFunc">TpPresenceMixinGetContactStatusesFunc</link>&nbsp;<structfield>get_contact_statuses</structfield>;</term>
<listitem><simpara> The get-contact-statuses function that was passed to
 <link linkend="tp-presence-mixin-class-init"><function>tp_presence_mixin_class_init()</function></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpPresenceMixinSetOwnStatusFunc">TpPresenceMixinSetOwnStatusFunc</link>&nbsp;<structfield>set_own_status</structfield>;</term>
<listitem><simpara> The set-own-status function that was passed to
 <link linkend="tp-presence-mixin-class-init"><function>tp_presence_mixin_class_init()</function></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>const&nbsp;<link linkend="TpPresenceStatusSpec">TpPresenceStatusSpec</link>&nbsp;*<structfield>statuses</structfield>;</term>
<listitem><simpara> The presence statuses array that was passed to
 <link linkend="tp-presence-mixin-class-init"><function>tp_presence_mixin_class_init()</function></link>
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-presence-mixin-class-init" role="function"/>tp_presence_mixin_class_init ()</title>
<indexterm><primary>tp_presence_mixin_class_init</primary></indexterm><programlisting><link linkend="void">void</link>                tp_presence_mixin_class_init        (<link linkend="GObjectClass">GObjectClass</link> *obj_cls,
                                                         <link linkend="glong">glong</link> offset,
                                                         <link linkend="TpPresenceMixinStatusAvailableFunc">TpPresenceMixinStatusAvailableFunc</link> status_available,
                                                         <link linkend="TpPresenceMixinGetContactStatusesFunc">TpPresenceMixinGetContactStatusesFunc</link> get_contact_statuses,
                                                         <link linkend="TpPresenceMixinSetOwnStatusFunc">TpPresenceMixinSetOwnStatusFunc</link> set_own_status,
                                                         const <link linkend="TpPresenceStatusSpec">TpPresenceStatusSpec</link> *statuses);</programlisting>
<para>
Initialize the presence mixin. Should be called from the implementation's
class_init function like so:
</para>
<para>
<informalexample><programlisting>
tp_presence_mixin_class_init ((GObjectClass *)klass,
                              G_STRUCT_OFFSET (SomeObjectClass,
                                               presence_mixin));
</programlisting></informalexample></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj_cls</parameter>&nbsp;:</term>
<listitem><simpara> The class of the implementation that uses this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara> The byte offset of the TpPresenceMixinClass within the class
structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status_available</parameter>&nbsp;:</term>
<listitem><simpara> A callback to be used to determine if a given presence
 status is available. If NULL, all statuses are always considered available.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>get_contact_statuses</parameter>&nbsp;:</term>
<listitem><simpara> A callback to be used get the current presence status
 for contacts. This is used in implementations of various D-Bus methods and
 hence must be provided.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>set_own_status</parameter>&nbsp;:</term>
<listitem><simpara> A callback to be used to commit changes to the user's own
 presence status to the server. This is used in implementations of various
 D-Bus methods and hence must be provided.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>statuses</parameter>&nbsp;:</term>
<listitem><simpara> An array of <link linkend="TpPresenceStatusSpec"><type>TpPresenceStatusSpec</type></link> structures representing all
 presence statuses supported by the protocol, terminated by a NULL name.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-presence-mixin-init" role="function"/>tp_presence_mixin_init ()</title>
<indexterm><primary>tp_presence_mixin_init</primary></indexterm><programlisting><link linkend="void">void</link>                tp_presence_mixin_init              (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="glong">glong</link> offset);</programlisting>
<para>
Initialize the presence mixin. Should be called from the implementation's
instance init function like so:
</para>
<para>
<informalexample><programlisting>
tp_presence_mixin_init ((GObject *)self,
                        G_STRUCT_OFFSET (SomeObject, presence_mixin));
</programlisting></informalexample></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An instance of the implementation that uses this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara> The byte offset of the TpPresenceMixin within the object structure
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-presence-mixin-finalize" role="function"/>tp_presence_mixin_finalize ()</title>
<indexterm><primary>tp_presence_mixin_finalize</primary></indexterm><programlisting><link linkend="void">void</link>                tp_presence_mixin_finalize          (<link linkend="GObject">GObject</link> *obj);</programlisting>
<para>
Free resources held by the presence mixin.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object with this mixin.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-presence-mixin-emit-presence-update" role="function"/>tp_presence_mixin_emit_presence_update ()</title>
<indexterm><primary>tp_presence_mixin_emit_presence_update</primary></indexterm><programlisting><link linkend="void">void</link>                tp_presence_mixin_emit_presence_update
                                                        (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="GHashTable">GHashTable</link> *contact_presences);</programlisting>
<para>
Emit the PresenceUpdate signal for multiple contacts. For emitting
PresenceUpdate for a single contact, there is a convenience wrapper called
<link linkend="tp-presence-mixin-emit-one-presence-update"><type>tp_presence_mixin_emit_one_presence_update</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> A connection object with this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>contact_presences</parameter>&nbsp;:</term>
<listitem><simpara> A mapping of contact handles to <link linkend="TpPresenceStatus"><type>TpPresenceStatus</type></link>
 structures with the presence data to emit
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-presence-mixin-emit-one-presence-update" role="function"/>tp_presence_mixin_emit_one_presence_update ()</title>
<indexterm><primary>tp_presence_mixin_emit_one_presence_update</primary></indexterm><programlisting><link linkend="void">void</link>                tp_presence_mixin_emit_one_presence_update
                                                        (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="TpHandle">TpHandle</link> handle,
                                                         const <link linkend="TpPresenceStatus">TpPresenceStatus</link> *status);</programlisting>
<para>
Emit the PresenceUpdate signal for a single contact. This method is just a
convenience wrapper around <link linkend="tp-presence-mixin-emit-presence-update"><type>tp_presence_mixin_emit_presence_update</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> A connection object with this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handle</parameter>&nbsp;:</term>
<listitem><simpara> The handle of the contact to emit the signal for
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&nbsp;:</term>
<listitem><simpara> The new status to emit
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-presence-mixin-iface-init" role="function"/>tp_presence_mixin_iface_init ()</title>
<indexterm><primary>tp_presence_mixin_iface_init</primary></indexterm><programlisting><link linkend="void">void</link>                tp_presence_mixin_iface_init        (<link linkend="gpointer">gpointer</link> g_iface,
                                                         <link linkend="gpointer">gpointer</link> iface_data);</programlisting>
<para>
Fill in the vtable entries needed to implement the presence interface using
this mixin. This function should usually be called via G_IMPLEMENT_INTERFACE.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>g_iface</parameter>&nbsp;:</term>
<listitem><simpara> A pointer to the <link linkend="TpSvcConnectionInterfacePresenceClass"><type>TpSvcConnectionInterfacePresenceClass</type></link> in an
 object class
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iface_data</parameter>&nbsp;:</term>
<listitem><simpara> Ignored
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1>
<title>See Also</title>
<link linkend="TpSvcConnectionInterfacePresence"><type>TpSvcConnectionInterfacePresence</type></link>
</refsect1>

</refentry>
