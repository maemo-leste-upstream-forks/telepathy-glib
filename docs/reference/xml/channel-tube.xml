<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-channel-tube">
<refmeta>
<refentrytitle role="top_of_page" id="telepathy-glib-channel-tube.top_of_page">Tube channels</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Tube channels</refname>
<refpurpose>client-side wrappers for the Tube channel interface,
 StreamTube channel type and DBusTube channel type.</refpurpose>
</refnamediv>

<refsynopsisdiv id="telepathy-glib-channel-tube.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;telepathy-glib/channel.h&gt;

<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-channel-interface-tube-connect-to-tube-channel-state-changed">tp_cli_channel_interface_tube_connect_to_tube_channel_state_changed</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="tp-cli-channel-interface-tube-signal-callback-tube-channel-state-changed">tp_cli_channel_interface_tube_signal_callback_tube_channel_state_changed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-interface-tube-signal-callback-tube-channel-state-changed">*tp_cli_channel_interface_tube_signal_callback_tube_channel_state_changed</link>)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="guint">guint</link> arg_State,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-channel-type-stream-tube-run-offer">tp_cli_channel_type_stream_tube_run_offer</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_address_type,
                                                         const <link linkend="GValue">GValue</link> *in_address,
                                                         <link linkend="guint">guint</link> in_access_control,
                                                         <link linkend="GHashTable">GHashTable</link> *in_parameters,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-channel-type-stream-tube-run-accept">tp_cli_channel_type_stream_tube_run_accept</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_address_type,
                                                         <link linkend="guint">guint</link> in_access_control,
                                                         const <link linkend="GValue">GValue</link> *in_access_control_param,
                                                         <link linkend="GValue">GValue</link> **out_address,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-channel-type-stream-tube-call-offer">tp_cli_channel_type_stream_tube_call_offer</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_address_type,
                                                         const <link linkend="GValue">GValue</link> *in_address,
                                                         <link linkend="guint">guint</link> in_access_control,
                                                         <link linkend="GHashTable">GHashTable</link> *in_parameters,
                                                         <link linkend="tp-cli-channel-type-stream-tube-callback-for-offer">tp_cli_channel_type_stream_tube_callback_for_offer</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-channel-type-stream-tube-call-accept">tp_cli_channel_type_stream_tube_call_accept</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_address_type,
                                                         <link linkend="guint">guint</link> in_access_control,
                                                         const <link linkend="GValue">GValue</link> *in_access_control_param,
                                                         <link linkend="tp-cli-channel-type-stream-tube-callback-for-accept">tp_cli_channel_type_stream_tube_callback_for_accept</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-type-stream-tube-callback-for-offer">*tp_cli_channel_type_stream_tube_callback_for_offer</link>)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-type-stream-tube-callback-for-accept">*tp_cli_channel_type_stream_tube_callback_for_accept</link>)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         const <link linkend="GValue">GValue</link> *out_address,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-channel-type-stream-tube-connect-to-new-remote-connection">tp_cli_channel_type_stream_tube_connect_to_new_remote_connection</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="tp-cli-channel-type-stream-tube-signal-callback-new-remote-connection">tp_cli_channel_type_stream_tube_signal_callback_new_remote_connection</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-channel-type-stream-tube-connect-to-new-local-connection">tp_cli_channel_type_stream_tube_connect_to_new_local_connection</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="tp-cli-channel-type-stream-tube-signal-callback-new-local-connection">tp_cli_channel_type_stream_tube_signal_callback_new_local_connection</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-channel-type-stream-tube-connect-to-connection-closed">tp_cli_channel_type_stream_tube_connect_to_connection_closed</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="tp-cli-channel-type-stream-tube-signal-callback-connection-closed">tp_cli_channel_type_stream_tube_signal_callback_connection_closed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-type-stream-tube-signal-callback-new-remote-connection">*tp_cli_channel_type_stream_tube_signal_callback_new_remote_connection</link>)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="guint">guint</link> arg_Handle,
                                                         const <link linkend="GValue">GValue</link> *arg_Connection_Param,
                                                         <link linkend="guint">guint</link> arg_Connection_ID,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-type-stream-tube-signal-callback-new-local-connection">*tp_cli_channel_type_stream_tube_signal_callback_new_local_connection</link>)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="guint">guint</link> arg_Connection_ID,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-type-stream-tube-signal-callback-connection-closed">*tp_cli_channel_type_stream_tube_signal_callback_connection_closed</link>)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="guint">guint</link> arg_Connection_ID,
                                                         const <link linkend="gchar">gchar</link> *arg_Error,
                                                         const <link linkend="gchar">gchar</link> *arg_Message,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-channel-type-dbus-tube-run-offer">tp_cli_channel_type_dbus_tube_run_offer</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GHashTable">GHashTable</link> *in_parameters,
                                                         <link linkend="guint">guint</link> in_access_control,
                                                         <link linkend="gchar">gchar</link> **out_address,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-channel-type-dbus-tube-run-accept">tp_cli_channel_type_dbus_tube_run_accept</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_access_control,
                                                         <link linkend="gchar">gchar</link> **out_address,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-channel-type-dbus-tube-call-offer">tp_cli_channel_type_dbus_tube_call_offer</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GHashTable">GHashTable</link> *in_parameters,
                                                         <link linkend="guint">guint</link> in_access_control,
                                                         <link linkend="tp-cli-channel-type-dbus-tube-callback-for-offer">tp_cli_channel_type_dbus_tube_callback_for_offer</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-channel-type-dbus-tube-call-accept">tp_cli_channel_type_dbus_tube_call_accept</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_access_control,
                                                         <link linkend="tp-cli-channel-type-dbus-tube-callback-for-accept">tp_cli_channel_type_dbus_tube_callback_for_accept</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-type-dbus-tube-callback-for-offer">*tp_cli_channel_type_dbus_tube_callback_for_offer</link>)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *out_address,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-type-dbus-tube-callback-for-accept">*tp_cli_channel_type_dbus_tube_callback_for_accept</link>)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *out_address,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-channel-type-dbus-tube-connect-to-dbus-names-changed">tp_cli_channel_type_dbus_tube_connect_to_dbus_names_changed</link>
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="tp-cli-channel-type-dbus-tube-signal-callback-dbus-names-changed">tp_cli_channel_type_dbus_tube_signal_callback_dbus_names_changed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-type-dbus-tube-signal-callback-dbus-names-changed">*tp_cli_channel_type_dbus_tube_signal_callback_dbus_names_changed</link>)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="GHashTable">GHashTable</link> *arg_Added,
                                                         const <link linkend="GArray">GArray</link> *arg_Removed,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
</synopsis>
</refsynopsisdiv>









<refsect1 id="telepathy-glib-channel-tube.description" role="desc">
<title role="desc.title">Description</title>
<para>
A "tube" is a mechanism for arbitrary data transfer.
This section documents the auto-generated C wrappers for the Tube
channel interface, StreamTube channel type and DBusTube channel type.</para>
<para>
</para>
</refsect1>

<refsect1 id="telepathy-glib-channel-tube.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="tp-cli-channel-interface-tube-connect-to-tube-channel-state-changed" role="function">
<title>tp_cli_channel_interface_tube_connect_to_tube_channel_state_changed ()</title>
<indexterm zone="tp-cli-channel-interface-tube-connect-to-tube-channel-state-changed"><primary sortas="tp_cli_channel_interface_tube_connect_to_tube_channel_state_changed">tp_cli_channel_interface_tube_connect_to_tube_channel_state_changed</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_channel_interface_tube_connect_to_tube_channel_state_changed
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="tp-cli-channel-interface-tube-signal-callback-tube-channel-state-changed">tp_cli_channel_interface_tube_signal_callback_tube_channel_state_changed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal TubeChannelStateChanged.
</para>
<para>
Emitted when the state of the tube channel changes. Valid state         transitions are documented with &lt;tp:type&gt;Tube_Channel_State&lt;/tp:type&gt;.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpChannel"><type>TpChannel</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-interface-tube-signal-callback-tube-channel-state-changed" role="function">
<title>tp_cli_channel_interface_tube_signal_callback_tube_channel_state_changed ()</title>
<indexterm zone="tp-cli-channel-interface-tube-signal-callback-tube-channel-state-changed"><primary sortas="tp_cli_channel_interface_tube_signal_callback_tube_channel_state_changed">tp_cli_channel_interface_tube_signal_callback_tube_channel_state_changed</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_interface_tube_signal_callback_tube_channel_state_changed)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="guint">guint</link> arg_State,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal TubeChannelStateChanged.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-channel-interface-tube-connect-to-tube-channel-state-changed"><function>tp_cli_channel_interface_tube_connect_to_tube_channel_state_changed()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_State</parameter>&#160;:</term>
<listitem><simpara> The new state of the tube.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-type-stream-tube-run-offer" role="function">
<title>tp_cli_channel_type_stream_tube_run_offer ()</title>
<indexterm zone="tp-cli-channel-type-stream-tube-run-offer"><primary sortas="tp_cli_channel_type_stream_tube_run_offer">tp_cli_channel_type_stream_tube_run_offer</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_channel_type_stream_tube_run_offer
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_address_type,
                                                         const <link linkend="GValue">GValue</link> *in_address,
                                                         <link linkend="guint">guint</link> in_access_control,
                                                         <link linkend="GHashTable">GHashTable</link> *in_parameters,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method Offer and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Offer a stream tube exporting the local socket specified.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpChannel"><type>TpChannel</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_address_type</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: The type of the listening address of the local service, as a member of           Socket_Address_Type.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_address</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: The listening address of the local service, as indicated by the           address_type.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_access_control</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: The access control the local service applies to the local socket,           specified so the connection manager can behave appropriately           when it connects.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_parameters</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: The dictionary of arbitrary           &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.Channel.Interface.Tube&quot;&gt;Parameters&lt;/tp:dbus-ref&gt;           to send with the tube offer.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-type-stream-tube-run-accept" role="function">
<title>tp_cli_channel_type_stream_tube_run_accept ()</title>
<indexterm zone="tp-cli-channel-type-stream-tube-run-accept"><primary sortas="tp_cli_channel_type_stream_tube_run_accept">tp_cli_channel_type_stream_tube_run_accept</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_channel_type_stream_tube_run_accept
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_address_type,
                                                         <link linkend="guint">guint</link> in_access_control,
                                                         const <link linkend="GValue">GValue</link> *in_access_control_param,
                                                         <link linkend="GValue">GValue</link> **out_address,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method Accept and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Accept a stream tube that&apos;s in the &amp;quot;local pending&amp;quot; state. The         connection manager will attempt to open the tube. The tube remains in         the &amp;quot;local pending&amp;quot; state until the &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.Channel.Interface.Tube&quot;&gt;TubeChannelStateChanged&lt;/tp:dbus-ref&gt;         signal is emitted.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpChannel"><type>TpChannel</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_address_type</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: The type of address the connection manager should listen on.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_access_control</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           &lt;p&gt;The type of access control the connection manager should apply to           the socket.&lt;/p&gt;            &lt;p&gt;Note that if you plan to establish more than one connection           through the tube, the Socket_Access_Control_Port access control           can&apos;t be used as you can&apos;t connect more than once from the same           port.&lt;/p&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_access_control_param</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: A parameter for the access control type, to be interpreted as           specified in the documentation for the Socket_Access_Control enum.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_address</parameter>&#160;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> is returned: The address on which the connection manager will listen for           connections to this tube. The client should not attempt to connect           to the address until the tube is open.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-type-stream-tube-call-offer" role="function">
<title>tp_cli_channel_type_stream_tube_call_offer ()</title>
<indexterm zone="tp-cli-channel-type-stream-tube-call-offer"><primary sortas="tp_cli_channel_type_stream_tube_call_offer">tp_cli_channel_type_stream_tube_call_offer</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_channel_type_stream_tube_call_offer
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_address_type,
                                                         const <link linkend="GValue">GValue</link> *in_address,
                                                         <link linkend="guint">guint</link> in_access_control,
                                                         <link linkend="GHashTable">GHashTable</link> *in_parameters,
                                                         <link linkend="tp-cli-channel-type-stream-tube-callback-for-offer">tp_cli_channel_type_stream_tube_callback_for_offer</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a Offer method call.
</para>
<para>
Offer a stream tube exporting the local socket specified.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_address_type</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: The type of the listening address of the local service, as a member of           Socket_Address_Type.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_address</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: The listening address of the local service, as indicated by the           address_type.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_access_control</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: The access control the local service applies to the local socket,           specified so the connection manager can behave appropriately           when it connects.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_parameters</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: The dictionary of arbitrary           &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.Channel.Interface.Tube&quot;&gt;Parameters&lt;/tp:dbus-ref&gt;           to send with the tube offer.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-type-stream-tube-call-accept" role="function">
<title>tp_cli_channel_type_stream_tube_call_accept ()</title>
<indexterm zone="tp-cli-channel-type-stream-tube-call-accept"><primary sortas="tp_cli_channel_type_stream_tube_call_accept">tp_cli_channel_type_stream_tube_call_accept</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_channel_type_stream_tube_call_accept
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_address_type,
                                                         <link linkend="guint">guint</link> in_access_control,
                                                         const <link linkend="GValue">GValue</link> *in_access_control_param,
                                                         <link linkend="tp-cli-channel-type-stream-tube-callback-for-accept">tp_cli_channel_type_stream_tube_callback_for_accept</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a Accept method call.
</para>
<para>
Accept a stream tube that&apos;s in the &amp;quot;local pending&amp;quot; state. The         connection manager will attempt to open the tube. The tube remains in         the &amp;quot;local pending&amp;quot; state until the &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.Channel.Interface.Tube&quot;&gt;TubeChannelStateChanged&lt;/tp:dbus-ref&gt;         signal is emitted.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_address_type</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: The type of address the connection manager should listen on.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_access_control</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           &lt;p&gt;The type of access control the connection manager should apply to           the socket.&lt;/p&gt;            &lt;p&gt;Note that if you plan to establish more than one connection           through the tube, the Socket_Access_Control_Port access control           can&apos;t be used as you can&apos;t connect more than once from the same           port.&lt;/p&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_access_control_param</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: A parameter for the access control type, to be interpreted as           specified in the documentation for the Socket_Access_Control enum.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-type-stream-tube-callback-for-offer" role="function">
<title>tp_cli_channel_type_stream_tube_callback_for_offer ()</title>
<indexterm zone="tp-cli-channel-type-stream-tube-callback-for-offer"><primary sortas="tp_cli_channel_type_stream_tube_callback_for_offer">tp_cli_channel_type_stream_tube_callback_for_offer</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_type_stream_tube_callback_for_offer)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a Offer method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-type-stream-tube-callback-for-accept" role="function">
<title>tp_cli_channel_type_stream_tube_callback_for_accept ()</title>
<indexterm zone="tp-cli-channel-type-stream-tube-callback-for-accept"><primary sortas="tp_cli_channel_type_stream_tube_callback_for_accept">tp_cli_channel_type_stream_tube_callback_for_accept</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_type_stream_tube_callback_for_accept)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         const <link linkend="GValue">GValue</link> *out_address,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a Accept method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_address</parameter>&#160;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>: The address on which the connection manager will listen for           connections to this tube. The client should not attempt to connect           to the address until the tube is open.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-type-stream-tube-connect-to-new-remote-connection" role="function">
<title>tp_cli_channel_type_stream_tube_connect_to_new_remote_connection ()</title>
<indexterm zone="tp-cli-channel-type-stream-tube-connect-to-new-remote-connection"><primary sortas="tp_cli_channel_type_stream_tube_connect_to_new_remote_connection">tp_cli_channel_type_stream_tube_connect_to_new_remote_connection</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_channel_type_stream_tube_connect_to_new_remote_connection
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="tp-cli-channel-type-stream-tube-signal-callback-new-remote-connection">tp_cli_channel_type_stream_tube_signal_callback_new_remote_connection</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal NewRemoteConnection.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;Emitted each time a participant opens a new connection to its         socket.&lt;/p&gt;          &lt;p&gt;This signal is only fired on the offering side.&lt;/p&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpChannel"><type>TpChannel</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-type-stream-tube-connect-to-new-local-connection" role="function">
<title>tp_cli_channel_type_stream_tube_connect_to_new_local_connection ()</title>
<indexterm zone="tp-cli-channel-type-stream-tube-connect-to-new-local-connection"><primary sortas="tp_cli_channel_type_stream_tube_connect_to_new_local_connection">tp_cli_channel_type_stream_tube_connect_to_new_local_connection</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_channel_type_stream_tube_connect_to_new_local_connection
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="tp-cli-channel-type-stream-tube-signal-callback-new-local-connection">tp_cli_channel_type_stream_tube_signal_callback_new_local_connection</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal NewLocalConnection.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;Emitted when the tube application connects to the CM&apos;s socket.&lt;/p&gt;          &lt;p&gt;This signal is only fired on the accepting side.&lt;/p&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpChannel"><type>TpChannel</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-type-stream-tube-connect-to-connection-closed" role="function">
<title>tp_cli_channel_type_stream_tube_connect_to_connection_closed ()</title>
<indexterm zone="tp-cli-channel-type-stream-tube-connect-to-connection-closed"><primary sortas="tp_cli_channel_type_stream_tube_connect_to_connection_closed">tp_cli_channel_type_stream_tube_connect_to_connection_closed</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_channel_type_stream_tube_connect_to_connection_closed
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="tp-cli-channel-type-stream-tube-signal-callback-connection-closed">tp_cli_channel_type_stream_tube_signal_callback_connection_closed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal ConnectionClosed.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;Emitted when a connection has been closed.&lt;/p&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpChannel"><type>TpChannel</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-type-stream-tube-signal-callback-new-remote-connection" role="function">
<title>tp_cli_channel_type_stream_tube_signal_callback_new_remote_connection ()</title>
<indexterm zone="tp-cli-channel-type-stream-tube-signal-callback-new-remote-connection"><primary sortas="tp_cli_channel_type_stream_tube_signal_callback_new_remote_connection">tp_cli_channel_type_stream_tube_signal_callback_new_remote_connection</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_type_stream_tube_signal_callback_new_remote_connection)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="guint">guint</link> arg_Handle,
                                                         const <link linkend="GValue">GValue</link> *arg_Connection_Param,
                                                         <link linkend="guint">guint</link> arg_Connection_ID,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal NewRemoteConnection.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-channel-type-stream-tube-connect-to-new-remote-connection"><function>tp_cli_channel_type_stream_tube_connect_to_new_remote_connection()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Handle</parameter>&#160;:</term>
<listitem><simpara> The handle of the participant who opened the new connection
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Connection_Param</parameter>&#160;:</term>
<listitem><simpara> &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           &lt;p&gt;A parameter which can be used by the listening process to identify           the connection. Note that this parameter has a meaningful value           only in the Socket_Access_Control_Port and           Socket_Access_Control_Credentials cases. If a different           Socket_Access_Control has been chosen when offering the tube, this           parameter should be ignored.&lt;/p&gt;            &lt;p&gt;In the Socket_Access_Control_Port case, the variant           contains a struct Socket_Address_IPv4 (or Socket_Address_IPv6)           containing the address from which the CM is connected to the client           application.&lt;/p&gt;            &lt;p&gt;In the Socket_Access_Control_Credentials case, the variant           contains the byte (D-Bus signature &apos;y&apos;) that has been sent with           the credentials.&lt;/p&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Connection_ID</parameter>&#160;:</term>
<listitem><simpara> The unique ID associated with this connection. This ID will be used           to identifiy the connection when reporting errors with           &lt;tp:member-ref&gt;ConnectionClosed&lt;/tp:member-ref&gt;.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-type-stream-tube-signal-callback-new-local-connection" role="function">
<title>tp_cli_channel_type_stream_tube_signal_callback_new_local_connection ()</title>
<indexterm zone="tp-cli-channel-type-stream-tube-signal-callback-new-local-connection"><primary sortas="tp_cli_channel_type_stream_tube_signal_callback_new_local_connection">tp_cli_channel_type_stream_tube_signal_callback_new_local_connection</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_type_stream_tube_signal_callback_new_local_connection)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="guint">guint</link> arg_Connection_ID,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal NewLocalConnection.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-channel-type-stream-tube-connect-to-new-local-connection"><function>tp_cli_channel_type_stream_tube_connect_to_new_local_connection()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Connection_ID</parameter>&#160;:</term>
<listitem><simpara> The unique ID associated with this connection. This ID will be used           to identifiy the connection when reporting errors with           &lt;tp:member-ref&gt;ConnectionClosed&lt;/tp:member-ref&gt;.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-type-stream-tube-signal-callback-connection-closed" role="function">
<title>tp_cli_channel_type_stream_tube_signal_callback_connection_closed ()</title>
<indexterm zone="tp-cli-channel-type-stream-tube-signal-callback-connection-closed"><primary sortas="tp_cli_channel_type_stream_tube_signal_callback_connection_closed">tp_cli_channel_type_stream_tube_signal_callback_connection_closed</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_type_stream_tube_signal_callback_connection_closed)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="guint">guint</link> arg_Connection_ID,
                                                         const <link linkend="gchar">gchar</link> *arg_Error,
                                                         const <link linkend="gchar">gchar</link> *arg_Message,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal ConnectionClosed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-channel-type-stream-tube-connect-to-connection-closed"><function>tp_cli_channel_type_stream_tube_connect_to_connection_closed()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Connection_ID</parameter>&#160;:</term>
<listitem><simpara> The ID of the connection.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Error</parameter>&#160;:</term>
<listitem><simpara> &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           &lt;p&gt;The name of a D-Bus error describing the error that occurred.&lt;/p&gt;            &lt;p&gt;The following errors can be used:&lt;/p&gt;           &lt;ul&gt;             &lt;li&gt;&lt;code&gt;org.freedesktop.Telepathy.Error.Cancelled&lt;/code&gt;:                user closed the socket or the tube.&lt;/li&gt;             &lt;li&gt;&lt;code&gt;org.freedesktop.Telepathy.Error.ConnectionLost&lt;/code&gt;:                the bytestream relaying connection&apos;s data has been broken.&lt;/li&gt;             &lt;li&gt;&lt;code&gt;org.freedesktop.Telepathy.Error.ConnectionRefused&lt;/code&gt;:                the tube offer refused the connection.&lt;/li&gt;           &lt;/ul&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Message</parameter>&#160;:</term>
<listitem><simpara> A debug message.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-type-dbus-tube-run-offer" role="function">
<title>tp_cli_channel_type_dbus_tube_run_offer ()</title>
<indexterm zone="tp-cli-channel-type-dbus-tube-run-offer"><primary sortas="tp_cli_channel_type_dbus_tube_run_offer">tp_cli_channel_type_dbus_tube_run_offer</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_channel_type_dbus_tube_run_offer
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GHashTable">GHashTable</link> *in_parameters,
                                                         <link linkend="guint">guint</link> in_access_control,
                                                         <link linkend="gchar">gchar</link> **out_address,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method Offer and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Offers a D-Bus tube providing the service specified.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpChannel"><type>TpChannel</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_parameters</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: The dictionary of arbitrary           &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.Channel.Interface.Tube&quot;&gt;Parameters&lt;/tp:dbus-ref&gt;           to send with the tube offer.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_access_control</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: The access control the connection manager applies to the D-Bus socket.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_address</parameter>&#160;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> is returned: The string describing the address of the private bus. The client           SHOULD NOT attempt to connect to the address until the tube is open.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-type-dbus-tube-run-accept" role="function">
<title>tp_cli_channel_type_dbus_tube_run_accept ()</title>
<indexterm zone="tp-cli-channel-type-dbus-tube-run-accept"><primary sortas="tp_cli_channel_type_dbus_tube_run_accept">tp_cli_channel_type_dbus_tube_run_accept</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_channel_type_dbus_tube_run_accept
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_access_control,
                                                         <link linkend="gchar">gchar</link> **out_address,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method Accept and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Accept a D-Bus tube that&apos;s in the &amp;quot;local pending&amp;quot; state. The         connection manager will attempt to open the tube. The tube remains in         the &amp;quot;local pending&amp;quot; state until the &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.Channel.Interface.Tube&quot;&gt;TubeChannelStateChanged&lt;/tp:dbus-ref&gt;         signal is emitted.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpChannel"><type>TpChannel</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_access_control</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: The access control the connection manager applies to the D-Bus socket.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_address</parameter>&#160;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> is returned: The string describing the address of the private bus. The client           SHOULD NOT attempt to connect to the address until the tube is open.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-type-dbus-tube-call-offer" role="function">
<title>tp_cli_channel_type_dbus_tube_call_offer ()</title>
<indexterm zone="tp-cli-channel-type-dbus-tube-call-offer"><primary sortas="tp_cli_channel_type_dbus_tube_call_offer">tp_cli_channel_type_dbus_tube_call_offer</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_channel_type_dbus_tube_call_offer
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GHashTable">GHashTable</link> *in_parameters,
                                                         <link linkend="guint">guint</link> in_access_control,
                                                         <link linkend="tp-cli-channel-type-dbus-tube-callback-for-offer">tp_cli_channel_type_dbus_tube_callback_for_offer</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a Offer method call.
</para>
<para>
Offers a D-Bus tube providing the service specified.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_parameters</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: The dictionary of arbitrary           &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.Channel.Interface.Tube&quot;&gt;Parameters&lt;/tp:dbus-ref&gt;           to send with the tube offer.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_access_control</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: The access control the connection manager applies to the D-Bus socket.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-type-dbus-tube-call-accept" role="function">
<title>tp_cli_channel_type_dbus_tube_call_accept ()</title>
<indexterm zone="tp-cli-channel-type-dbus-tube-call-accept"><primary sortas="tp_cli_channel_type_dbus_tube_call_accept">tp_cli_channel_type_dbus_tube_call_accept</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_channel_type_dbus_tube_call_accept
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_access_control,
                                                         <link linkend="tp-cli-channel-type-dbus-tube-callback-for-accept">tp_cli_channel_type_dbus_tube_callback_for_accept</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a Accept method call.
</para>
<para>
Accept a D-Bus tube that&apos;s in the &amp;quot;local pending&amp;quot; state. The         connection manager will attempt to open the tube. The tube remains in         the &amp;quot;local pending&amp;quot; state until the &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.Channel.Interface.Tube&quot;&gt;TubeChannelStateChanged&lt;/tp:dbus-ref&gt;         signal is emitted.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_access_control</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: The access control the connection manager applies to the D-Bus socket.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-type-dbus-tube-callback-for-offer" role="function">
<title>tp_cli_channel_type_dbus_tube_callback_for_offer ()</title>
<indexterm zone="tp-cli-channel-type-dbus-tube-callback-for-offer"><primary sortas="tp_cli_channel_type_dbus_tube_callback_for_offer">tp_cli_channel_type_dbus_tube_callback_for_offer</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_type_dbus_tube_callback_for_offer)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *out_address,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a Offer method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_address</parameter>&#160;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>: The string describing the address of the private bus. The client           SHOULD NOT attempt to connect to the address until the tube is open.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-type-dbus-tube-callback-for-accept" role="function">
<title>tp_cli_channel_type_dbus_tube_callback_for_accept ()</title>
<indexterm zone="tp-cli-channel-type-dbus-tube-callback-for-accept"><primary sortas="tp_cli_channel_type_dbus_tube_callback_for_accept">tp_cli_channel_type_dbus_tube_callback_for_accept</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_type_dbus_tube_callback_for_accept)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *out_address,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a Accept method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_address</parameter>&#160;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>: The string describing the address of the private bus. The client           SHOULD NOT attempt to connect to the address until the tube is open.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-type-dbus-tube-connect-to-dbus-names-changed" role="function">
<title>tp_cli_channel_type_dbus_tube_connect_to_dbus_names_changed ()</title>
<indexterm zone="tp-cli-channel-type-dbus-tube-connect-to-dbus-names-changed"><primary sortas="tp_cli_channel_type_dbus_tube_connect_to_dbus_names_changed">tp_cli_channel_type_dbus_tube_connect_to_dbus_names_changed</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_channel_type_dbus_tube_connect_to_dbus_names_changed
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="tp-cli-channel-type-dbus-tube-signal-callback-dbus-names-changed">tp_cli_channel_type_dbus_tube_signal_callback_dbus_names_changed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal DBusNamesChanged.
</para>
<para>
Emitted on a multi-user (i.e. Handle_Type_Room) D-Bus tube when a         participant opens or closes the tube.  This provides change         notification for the &lt;tp:member-ref&gt;DBusNames&lt;/tp:member-ref&gt; property.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpChannel"><type>TpChannel</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-type-dbus-tube-signal-callback-dbus-names-changed" role="function">
<title>tp_cli_channel_type_dbus_tube_signal_callback_dbus_names_changed ()</title>
<indexterm zone="tp-cli-channel-type-dbus-tube-signal-callback-dbus-names-changed"><primary sortas="tp_cli_channel_type_dbus_tube_signal_callback_dbus_names_changed">tp_cli_channel_type_dbus_tube_signal_callback_dbus_names_changed</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_type_dbus_tube_signal_callback_dbus_names_changed)
                                                        (<link linkend="TpChannel">TpChannel</link> *proxy,
                                                         <link linkend="GHashTable">GHashTable</link> *arg_Added,
                                                         const <link linkend="GArray">GArray</link> *arg_Removed,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal DBusNamesChanged.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-channel-type-dbus-tube-connect-to-dbus-names-changed"><function>tp_cli_channel_type_dbus_tube_connect_to_dbus_names_changed()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Added</parameter>&#160;:</term>
<listitem><simpara> Array of handles and D-Bus names of new participants.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Removed</parameter>&#160;:</term>
<listitem><simpara> Array of handles of former participants.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1 id="telepathy-glib-channel-tube.see-also">
<title>See Also</title>
channel-group
</refsect1>

</refentry>
