<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-dbus">
<refmeta>
<refentrytitle role="top_of_page" id="telepathy-glib-dbus.top_of_page">D-Bus utilities</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>D-Bus utilities</refname>
<refpurpose>some D-Bus utility functions</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv id="telepathy-glib-dbus.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>
<anchor id="TpDBusDaemon"/>
<synopsis>

#include &lt;telepathy-glib/dbus.h&gt;

<link linkend="void">void</link>                <link linkend="tp-dbus-g-method-return-not-implemented">tp_dbus_g_method_return_not_implemented</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="DBusGConnection">DBusGConnection</link>*    <link linkend="tp-get-bus">tp_get_bus</link>                          (void);
<link linkend="DBusGProxy">DBusGProxy</link>*         <link linkend="tp-get-bus-proxy">tp_get_bus_proxy</link>                    (void);
enum                <link linkend="TpDBusNameType">TpDBusNameType</link>;
<link linkend="gboolean">gboolean</link>            <link linkend="tp-dbus-check-valid-bus-name">tp_dbus_check_valid_bus_name</link>        (const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="TpDBusNameType">TpDBusNameType</link> allow_types,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-dbus-check-valid-interface-name">tp_dbus_check_valid_interface_name</link>  (const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-dbus-check-valid-member-name">tp_dbus_check_valid_member_name</link>     (const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-dbus-check-valid-object-path">tp_dbus_check_valid_object_path</link>     (const <link linkend="gchar">gchar</link> *path,
                                                         <link linkend="GError">GError</link> **error);

                    <link linkend="TpDBusDaemon-struct">TpDBusDaemon</link>;
                    <link linkend="TpDBusDaemonClass">TpDBusDaemonClass</link>;
<link linkend="TpDBusDaemon">TpDBusDaemon</link>*       <link linkend="tp-dbus-daemon-dup">tp_dbus_daemon_dup</link>                  (<link linkend="GError">GError</link> **error);
<link linkend="TpDBusDaemon">TpDBusDaemon</link>*       <link linkend="tp-dbus-daemon-new">tp_dbus_daemon_new</link>                  (<link linkend="DBusGConnection">DBusGConnection</link> *connection);
<link linkend="void">void</link>                (<link linkend="TpDBusDaemonNameOwnerChangedCb">*TpDBusDaemonNameOwnerChangedCb</link>)   (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *bus_daemon,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         const <link linkend="gchar">gchar</link> *new_owner,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="tp-dbus-daemon-watch-name-owner">tp_dbus_daemon_watch_name_owner</link>     (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *self,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="TpDBusDaemonNameOwnerChangedCb">TpDBusDaemonNameOwnerChangedCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-dbus-daemon-cancel-name-owner-watch">tp_dbus_daemon_cancel_name_owner_watch</link>
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *self,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="TpDBusDaemonNameOwnerChangedCb">TpDBusDaemonNameOwnerChangedCb</link> callback,
                                                         <link linkend="gconstpointer">gconstpointer</link> user_data);

<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-dbus-daemon-call-add-match">tp_cli_dbus_daemon_call_add_match</link>   (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-add-match">tp_cli_dbus_daemon_callback_for_add_match</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-dbus-daemon-call-get-connection-se-linux-security-context">tp_cli_dbus_daemon_call_get_connection_se_linux_security_context</link>
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-get-connection-se-linux-security-context">tp_cli_dbus_daemon_callback_for_get_connection_se_linux_security_context</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-dbus-daemon-call-get-connection-unix-process-id">tp_cli_dbus_daemon_call_get_connection_unix_process_id</link>
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-get-connection-unix-process-id">tp_cli_dbus_daemon_callback_for_get_connection_unix_process_id</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-dbus-daemon-call-get-connection-unix-user">tp_cli_dbus_daemon_call_get_connection_unix_user</link>
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-get-connection-unix-user">tp_cli_dbus_daemon_callback_for_get_connection_unix_user</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-dbus-daemon-call-get-id">tp_cli_dbus_daemon_call_get_id</link>      (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-get-id">tp_cli_dbus_daemon_callback_for_get_id</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-dbus-daemon-call-get-name-owner">tp_cli_dbus_daemon_call_get_name_owner</link>
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-get-name-owner">tp_cli_dbus_daemon_callback_for_get_name_owner</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-dbus-daemon-call-hello">tp_cli_dbus_daemon_call_hello</link>       (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-hello">tp_cli_dbus_daemon_callback_for_hello</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-dbus-daemon-call-list-activatable-names">tp_cli_dbus_daemon_call_list_activatable_names</link>
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-list-activatable-names">tp_cli_dbus_daemon_callback_for_list_activatable_names</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-dbus-daemon-call-list-names">tp_cli_dbus_daemon_call_list_names</link>  (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-list-names">tp_cli_dbus_daemon_callback_for_list_names</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-dbus-daemon-call-list-queued-owners">tp_cli_dbus_daemon_call_list_queued_owners</link>
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-list-queued-owners">tp_cli_dbus_daemon_callback_for_list_queued_owners</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-dbus-daemon-call-name-has-owner">tp_cli_dbus_daemon_call_name_has_owner</link>
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-name-has-owner">tp_cli_dbus_daemon_callback_for_name_has_owner</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-dbus-daemon-call-release-name">tp_cli_dbus_daemon_call_release_name</link>
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-release-name">tp_cli_dbus_daemon_callback_for_release_name</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-dbus-daemon-call-reload-config">tp_cli_dbus_daemon_call_reload_config</link>
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-reload-config">tp_cli_dbus_daemon_callback_for_reload_config</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-dbus-daemon-call-remove-match">tp_cli_dbus_daemon_call_remove_match</link>
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-remove-match">tp_cli_dbus_daemon_callback_for_remove_match</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-dbus-daemon-call-request-name">tp_cli_dbus_daemon_call_request_name</link>
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="guint">guint</link> in1,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-request-name">tp_cli_dbus_daemon_callback_for_request_name</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-dbus-daemon-call-start-service-by-name">tp_cli_dbus_daemon_call_start_service_by_name</link>
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="guint">guint</link> in1,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-start-service-by-name">tp_cli_dbus_daemon_callback_for_start_service_by_name</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-dbus-daemon-run-add-match">tp_cli_dbus_daemon_run_add_match</link>    (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-dbus-daemon-run-get-connection-se-linux-security-context">tp_cli_dbus_daemon_run_get_connection_se_linux_security_context</link>
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="GArray">GArray</link> **out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-dbus-daemon-run-get-connection-unix-process-id">tp_cli_dbus_daemon_run_get_connection_unix_process_id</link>
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="guint">guint</link> *out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-dbus-daemon-run-get-connection-unix-user">tp_cli_dbus_daemon_run_get_connection_unix_user</link>
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="guint">guint</link> *out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-dbus-daemon-run-get-id">tp_cli_dbus_daemon_run_get_id</link>       (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="gchar">gchar</link> **out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-dbus-daemon-run-get-name-owner">tp_cli_dbus_daemon_run_get_name_owner</link>
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="gchar">gchar</link> **out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-dbus-daemon-run-hello">tp_cli_dbus_daemon_run_hello</link>        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="gchar">gchar</link> **out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-dbus-daemon-run-list-activatable-names">tp_cli_dbus_daemon_run_list_activatable_names</link>
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="gchar">gchar</link> ***out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-dbus-daemon-run-list-names">tp_cli_dbus_daemon_run_list_names</link>   (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="gchar">gchar</link> ***out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-dbus-daemon-run-list-queued-owners">tp_cli_dbus_daemon_run_list_queued_owners</link>
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="gchar">gchar</link> ***out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-dbus-daemon-run-name-has-owner">tp_cli_dbus_daemon_run_name_has_owner</link>
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="gboolean">gboolean</link> *out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-dbus-daemon-run-release-name">tp_cli_dbus_daemon_run_release_name</link> (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="guint">guint</link> *out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-dbus-daemon-run-reload-config">tp_cli_dbus_daemon_run_reload_config</link>
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-dbus-daemon-run-remove-match">tp_cli_dbus_daemon_run_remove_match</link> (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-dbus-daemon-run-request-name">tp_cli_dbus_daemon_run_request_name</link> (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="guint">guint</link> in1,
                                                         <link linkend="guint">guint</link> *out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-dbus-daemon-run-start-service-by-name">tp_cli_dbus_daemon_run_start_service_by_name</link>
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="guint">guint</link> in1,
                                                         <link linkend="guint">guint</link> *out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="void">void</link>                (<link linkend="tp-cli-dbus-daemon-callback-for-add-match">*tp_cli_dbus_daemon_callback_for_add_match</link>)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-dbus-daemon-callback-for-get-connection-se-linux-security-context">*tp_cli_dbus_daemon_callback_for_get_connection_se_linux_security_context</link>)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         const <link linkend="GArray">GArray</link> *out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-dbus-daemon-callback-for-get-connection-unix-process-id">*tp_cli_dbus_daemon_callback_for_get_connection_unix_process_id</link>)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="guint">guint</link> out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-dbus-daemon-callback-for-get-connection-unix-user">*tp_cli_dbus_daemon_callback_for_get_connection_unix_user</link>)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="guint">guint</link> out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-dbus-daemon-callback-for-get-id">*tp_cli_dbus_daemon_callback_for_get_id</link>)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-dbus-daemon-callback-for-get-name-owner">*tp_cli_dbus_daemon_callback_for_get_name_owner</link>)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-dbus-daemon-callback-for-hello">*tp_cli_dbus_daemon_callback_for_hello</link>)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-dbus-daemon-callback-for-list-activatable-names">*tp_cli_dbus_daemon_callback_for_list_activatable_names</link>)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> **out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-dbus-daemon-callback-for-list-names">*tp_cli_dbus_daemon_callback_for_list_names</link>)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> **out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-dbus-daemon-callback-for-list-queued-owners">*tp_cli_dbus_daemon_callback_for_list_queued_owners</link>)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> **out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-dbus-daemon-callback-for-name-has-owner">*tp_cli_dbus_daemon_callback_for_name_has_owner</link>)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gboolean">gboolean</link> out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-dbus-daemon-callback-for-release-name">*tp_cli_dbus_daemon_callback_for_release_name</link>)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="guint">guint</link> out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-dbus-daemon-callback-for-reload-config">*tp_cli_dbus_daemon_callback_for_reload_config</link>)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-dbus-daemon-callback-for-remove-match">*tp_cli_dbus_daemon_callback_for_remove_match</link>)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-dbus-daemon-callback-for-request-name">*tp_cli_dbus_daemon_callback_for_request_name</link>)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="guint">guint</link> out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-dbus-daemon-callback-for-start-service-by-name">*tp_cli_dbus_daemon_callback_for_start_service_by_name</link>)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="guint">guint</link> out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link>* <link linkend="tp-cli-dbus-daemon-connect-to-name-acquired">tp_cli_dbus_daemon_connect_to_name_acquired</link>
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="tp-cli-dbus-daemon-signal-callback-name-acquired">tp_cli_dbus_daemon_signal_callback_name_acquired</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link>* <link linkend="tp-cli-dbus-daemon-connect-to-name-lost">tp_cli_dbus_daemon_connect_to_name_lost</link>
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="tp-cli-dbus-daemon-signal-callback-name-lost">tp_cli_dbus_daemon_signal_callback_name_lost</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link>* <link linkend="tp-cli-dbus-daemon-connect-to-name-owner-changed">tp_cli_dbus_daemon_connect_to_name_owner_changed</link>
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="tp-cli-dbus-daemon-signal-callback-name-owner-changed">tp_cli_dbus_daemon_signal_callback_name_owner_changed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                (<link linkend="tp-cli-dbus-daemon-signal-callback-name-acquired">*tp_cli_dbus_daemon_signal_callback_name_acquired</link>)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg0,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-dbus-daemon-signal-callback-name-lost">*tp_cli_dbus_daemon_signal_callback_name_lost</link>)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg0,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-dbus-daemon-signal-callback-name-owner-changed">*tp_cli_dbus_daemon_signal_callback_name_owner_changed</link>)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg0,
                                                         const <link linkend="gchar">gchar</link> *arg1,
                                                         const <link linkend="gchar">gchar</link> *arg2,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
</synopsis>
</refsynopsisdiv>

<refsect1 id="telepathy-glib-dbus.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="TpProxy">TpProxy</link>
         +----TpDBusDaemon
</synopsis>

</refsect1>








<refsect1 id="telepathy-glib-dbus.description" role="desc">
<title role="desc.title">Description</title>
<para>
D-Bus utility functions used in telepathy-glib.</para>
<para>

</para>
</refsect1>

<refsect1 id="telepathy-glib-dbus.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="tp-dbus-g-method-return-not-implemented" role="function">
<title>tp_dbus_g_method_return_not_implemented ()</title>
<indexterm zone="tp-dbus-g-method-return-not-implemented"><primary>tp_dbus_g_method_return_not_implemented</primary></indexterm><programlisting><link linkend="void">void</link>                tp_dbus_g_method_return_not_implemented
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return the Telepathy error NotImplemented from the method invocation
given by <parameter>context</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-get-bus" role="function">
<title>tp_get_bus ()</title>
<indexterm zone="tp-get-bus"><primary>tp_get_bus</primary></indexterm><programlisting><link linkend="DBusGConnection">DBusGConnection</link>*    tp_get_bus                          (void);</programlisting>
<para>
Returns a connection to the D-Bus daemon on which this process was
activated if it was launched by D-Bus service activation, or the session
bus otherwise.
</para>
<para>
If <link linkend="dbus-bus-get"><function>dbus_bus_get()</function></link> fails, exit with error code 1.
</para>
<para>
Note that this function is not suitable for use in applications which can
be useful even in the absence of D-Bus - it is designed for use in
connection managers, which are not at all useful without a D-Bus
connection. See &lt;https://bugs.freedesktop.org/show_bug.cgi?id=18832&gt;.
Most processes should use <link linkend="tp-dbus-daemon-dup"><function>tp_dbus_daemon_dup()</function></link> instead.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a connection to the starter or session D-Bus daemon.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-get-bus-proxy" role="function" condition="deprecated:0.7.26: Use tp_dbus_daemon_dup() in new code.">
<title>tp_get_bus_proxy ()</title>
<indexterm zone="tp-get-bus-proxy" role="deprecated"><primary>tp_get_bus_proxy</primary></indexterm><programlisting><link linkend="DBusGProxy">DBusGProxy</link>*         tp_get_bus_proxy                    (void);</programlisting>
<warning><para><literal>tp_get_bus_proxy</literal> has been deprecated since version 0.7.26 and should not be used in newly-written code. Use <link linkend="tp-dbus-daemon-dup"><function>tp_dbus_daemon_dup()</function></link> in new code.</para></warning>
<para>
Return a <link linkend="DBusGProxy"><type>DBusGProxy</type></link> for the bus daemon object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a proxy for the bus daemon object on the starter or session bus.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TpDBusNameType" role="enum" condition="since:0.7.1">
<title>enum TpDBusNameType</title>
<indexterm zone="TpDBusNameType" role="0.7.1"><primary>TpDBusNameType</primary></indexterm><programlisting>typedef enum
{
  TP_DBUS_NAME_TYPE_UNIQUE = 1,
  TP_DBUS_NAME_TYPE_WELL_KNOWN = 2,
  TP_DBUS_NAME_TYPE_BUS_DAEMON = 4,
  TP_DBUS_NAME_TYPE_NOT_BUS_DAEMON =
    TP_DBUS_NAME_TYPE_UNIQUE | TP_DBUS_NAME_TYPE_WELL_KNOWN,
  TP_DBUS_NAME_TYPE_ANY =
    TP_DBUS_NAME_TYPE_NOT_BUS_DAEMON | TP_DBUS_NAME_TYPE_BUS_DAEMON
} TpDBusNameType;
</programlisting>
<para>
A set of flags indicating which D-Bus bus names are acceptable.
They can be combined with the bitwise-or operator to accept multiple
types. <link linkend="TP-DBUS-NAME-TYPE-NOT-BUS-DAEMON:CAPS"><literal>TP_DBUS_NAME_TYPE_NOT_BUS_DAEMON</literal></link> and <link linkend="TP-DBUS-NAME-TYPE-ANY:CAPS"><literal>TP_DBUS_NAME_TYPE_ANY</literal></link> are
the bitwise-or of other appropriate types, for convenience.</para>
<para>

</para><variablelist role="enum">
<varlistentry id="TP-DBUS-NAME-TYPE-UNIQUE:CAPS" role="constant">
<term><literal>TP_DBUS_NAME_TYPE_UNIQUE</literal></term>
<listitem><simpara> accept unique names like :1.123
 (not including the name of the bus daemon itself)
</simpara></listitem>
</varlistentry>
<varlistentry id="TP-DBUS-NAME-TYPE-WELL-KNOWN:CAPS" role="constant">
<term><literal>TP_DBUS_NAME_TYPE_WELL_KNOWN</literal></term>
<listitem><simpara> accept well-known names like
 com.example.Service (not including the name of the bus daemon itself)
</simpara></listitem>
</varlistentry>
<varlistentry id="TP-DBUS-NAME-TYPE-BUS-DAEMON:CAPS" role="constant">
<term><literal>TP_DBUS_NAME_TYPE_BUS_DAEMON</literal></term>
<listitem><simpara> accept the name of the bus daemon
 itself, which has the syntax of a well-known name, but behaves like a
 unique name
</simpara></listitem>
</varlistentry>
<varlistentry id="TP-DBUS-NAME-TYPE-NOT-BUS-DAEMON:CAPS" role="constant">
<term><literal>TP_DBUS_NAME_TYPE_NOT_BUS_DAEMON</literal></term>
<listitem><simpara> accept either unique or well-known
 names, but not the bus daemon
</simpara></listitem>
</varlistentry>
<varlistentry id="TP-DBUS-NAME-TYPE-ANY:CAPS" role="constant">
<term><literal>TP_DBUS_NAME_TYPE_ANY</literal></term>
<listitem><simpara> accept any of the above
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since  0.7.1
</para></refsect2>
<refsect2 id="tp-dbus-check-valid-bus-name" role="function" condition="since:0.7.1">
<title>tp_dbus_check_valid_bus_name ()</title>
<indexterm zone="tp-dbus-check-valid-bus-name" role="0.7.1"><primary>tp_dbus_check_valid_bus_name</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_dbus_check_valid_bus_name        (const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="TpDBusNameType">TpDBusNameType</link> allow_types,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Check that the given string is a valid D-Bus bus name of an appropriate
type.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> a possible bus name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>allow_types</parameter>&nbsp;:</term>
<listitem><simpara> some combination of <link linkend="TP-DBUS-NAME-TYPE-UNIQUE:CAPS"><literal>TP_DBUS_NAME_TYPE_UNIQUE</literal></link>,
 <link linkend="TP-DBUS-NAME-TYPE-WELL-KNOWN:CAPS"><literal>TP_DBUS_NAME_TYPE_WELL_KNOWN</literal></link> or <link linkend="TP-DBUS-NAME-TYPE-BUS-DAEMON:CAPS"><literal>TP_DBUS_NAME_TYPE_BUS_DAEMON</literal></link>
 (often this will be <link linkend="TP-DBUS-NAME-TYPE-NOT-BUS-DAEMON:CAPS"><literal>TP_DBUS_NAME_TYPE_NOT_BUS_DAEMON</literal></link> or
 <link linkend="TP-DBUS-NAME-TYPE-ANY:CAPS"><literal>TP_DBUS_NAME_TYPE_ANY</literal></link>)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> used to raise <link linkend="TP-DBUS-ERROR-INVALID-BUS-NAME:CAPS"><literal>TP_DBUS_ERROR_INVALID_BUS_NAME</literal></link> if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> is returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>name</parameter> is valid

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7.1
</para></refsect2>
<refsect2 id="tp-dbus-check-valid-interface-name" role="function" condition="since:0.7.1">
<title>tp_dbus_check_valid_interface_name ()</title>
<indexterm zone="tp-dbus-check-valid-interface-name" role="0.7.1"><primary>tp_dbus_check_valid_interface_name</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_dbus_check_valid_interface_name  (const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Check that the given string is a valid D-Bus interface name. This is
also appropriate to use to check for valid error names.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> a possible interface name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> used to raise <link linkend="TP-DBUS-ERROR-INVALID-INTERFACE-NAME:CAPS"><literal>TP_DBUS_ERROR_INVALID_INTERFACE_NAME</literal></link> if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> is
 returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>name</parameter> is valid

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7.1
</para></refsect2>
<refsect2 id="tp-dbus-check-valid-member-name" role="function" condition="since:0.7.1">
<title>tp_dbus_check_valid_member_name ()</title>
<indexterm zone="tp-dbus-check-valid-member-name" role="0.7.1"><primary>tp_dbus_check_valid_member_name</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_dbus_check_valid_member_name     (const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Check that the given string is a valid D-Bus member (method or signal) name.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> a possible member name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> used to raise <link linkend="TP-DBUS-ERROR-INVALID-MEMBER-NAME:CAPS"><literal>TP_DBUS_ERROR_INVALID_MEMBER_NAME</literal></link> if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> is
 returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>name</parameter> is valid

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7.1
</para></refsect2>
<refsect2 id="tp-dbus-check-valid-object-path" role="function" condition="since:0.7.1">
<title>tp_dbus_check_valid_object_path ()</title>
<indexterm zone="tp-dbus-check-valid-object-path" role="0.7.1"><primary>tp_dbus_check_valid_object_path</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_dbus_check_valid_object_path     (const <link linkend="gchar">gchar</link> *path,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Check that the given string is a valid D-Bus object path.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara> a possible object path
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> used to raise <link linkend="TP-DBUS-ERROR-INVALID-OBJECT-PATH:CAPS"><literal>TP_DBUS_ERROR_INVALID_OBJECT_PATH</literal></link> if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> is
 returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>path</parameter> is valid

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7.1
</para></refsect2>
<refsect2 id="TpDBusDaemon-struct" role="struct">
<title>TpDBusDaemon</title>
<indexterm zone="TpDBusDaemon-struct" role="0.7.1"><primary>TpDBusDaemon</primary></indexterm><programlisting>typedef struct _TpDBusDaemon TpDBusDaemon;</programlisting>
<para>
A subclass of <link linkend="TpProxy"><type>TpProxy</type></link> that represents the D-Bus daemon. It mainly provides
functionality to manage well-known names on the bus.</para>
<para>

</para><para role="since">Since  0.7.1
</para></refsect2>
<refsect2 id="TpDBusDaemonClass" role="struct" condition="since:0.7.1">
<title>TpDBusDaemonClass</title>
<indexterm zone="TpDBusDaemonClass" role="0.7.1"><primary>TpDBusDaemonClass</primary></indexterm><programlisting>typedef struct _TpDBusDaemonClass TpDBusDaemonClass;</programlisting>
<para>
The class of <link linkend="TpDBusDaemon"><type>TpDBusDaemon</type></link>.</para>
<para>

</para><para role="since">Since  0.7.1
</para></refsect2>
<refsect2 id="tp-dbus-daemon-dup" role="function" condition="since:0.7.26">
<title>tp_dbus_daemon_dup ()</title>
<indexterm zone="tp-dbus-daemon-dup" role="0.7.26"><primary>tp_dbus_daemon_dup</primary></indexterm><programlisting><link linkend="TpDBusDaemon">TpDBusDaemon</link>*       tp_dbus_daemon_dup                  (<link linkend="GError">GError</link> **error);</programlisting>
<para>
Returns a proxy for signals and method calls on the D-Bus daemon on which
this process was activated (if it was launched by D-Bus service
activation), or the session bus (otherwise).
</para>
<para>
If it is not possible to connect to the appropriate bus, raise an error
and return <link linkend="NULL:CAPS"><literal>NULL</literal></link>.
</para>
<para>
The returned <link linkend="TpDBusDaemon"><type>TpDBusDaemon</type></link> is cached; the same <link linkend="TpDBusDaemon"><type>TpDBusDaemon</type></link> object will
be returned by this function repeatedly, as long as at least one reference
exists.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> Used to indicate error if <link linkend="NULL:CAPS"><literal>NULL</literal></link> is returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a reference to a proxy for signals and method calls on the bus
 daemon, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7.26
</para></refsect2>
<refsect2 id="tp-dbus-daemon-new" role="function" condition="since:0.7.1">
<title>tp_dbus_daemon_new ()</title>
<indexterm zone="tp-dbus-daemon-new" role="0.7.1"><primary>tp_dbus_daemon_new</primary></indexterm><programlisting><link linkend="TpDBusDaemon">TpDBusDaemon</link>*       tp_dbus_daemon_new                  (<link linkend="DBusGConnection">DBusGConnection</link> *connection);</programlisting>
<para>
Returns a proxy for signals and method calls on a particular bus
connection.
</para>
<para>
Use <link linkend="tp-dbus-daemon-dup"><function>tp_dbus_daemon_dup()</function></link> instead if you just want a connection to the
starter or session bus (which is almost always the right thing for
Telepathy).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>connection</parameter>&nbsp;:</term>
<listitem><simpara> a connection to D-Bus
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new proxy for signals and method calls on the bus daemon
 to which <parameter>connection</parameter> is connected

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7.1
</para></refsect2>
<refsect2 id="TpDBusDaemonNameOwnerChangedCb" role="function" condition="since:0.7.1">
<title>TpDBusDaemonNameOwnerChangedCb ()</title>
<indexterm zone="TpDBusDaemonNameOwnerChangedCb" role="0.7.1"><primary>TpDBusDaemonNameOwnerChangedCb</primary></indexterm><programlisting><link linkend="void">void</link>                (*TpDBusDaemonNameOwnerChangedCb)   (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *bus_daemon,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         const <link linkend="gchar">gchar</link> *new_owner,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
The signature of the callback called by <link linkend="tp-dbus-daemon-watch-name-owner"><function>tp_dbus_daemon_watch_name_owner()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bus_daemon</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus daemon
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> The name whose ownership has changed or been discovered
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_owner</parameter>&nbsp;:</term>
<listitem><simpara> The unique name that now owns <parameter>name</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> Arbitrary user-supplied data as passed to
 <link linkend="tp-dbus-daemon-watch-name-owner"><function>tp_dbus_daemon_watch_name_owner()</function></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7.1
</para></refsect2>
<refsect2 id="tp-dbus-daemon-watch-name-owner" role="function" condition="since:0.7.1">
<title>tp_dbus_daemon_watch_name_owner ()</title>
<indexterm zone="tp-dbus-daemon-watch-name-owner" role="0.7.1"><primary>tp_dbus_daemon_watch_name_owner</primary></indexterm><programlisting><link linkend="void">void</link>                tp_dbus_daemon_watch_name_owner     (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *self,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="TpDBusDaemonNameOwnerChangedCb">TpDBusDaemonNameOwnerChangedCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy);</programlisting>
<para>
Arrange for <parameter>callback</parameter> to be called with the owner of <parameter>name</parameter> as soon as
possible (which might even be before this function returns!), then
again every time the ownership of <parameter>name</parameter> changes.
</para>
<para>
If multiple watches are registered for the same <parameter>name</parameter>, they will be called
in the order they were registered.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus daemon
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> The name whose ownership is to be watched
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> Callback to call when the ownership is discovered or changes
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> Arbitrary data to pass to <parameter>callback</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> Called to destroy <parameter>user_data</parameter> when the name owner watch is
 cancelled due to <link linkend="tp-dbus-daemon-cancel-name-owner-watch"><function>tp_dbus_daemon_cancel_name_owner_watch()</function></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7.1
</para></refsect2>
<refsect2 id="tp-dbus-daemon-cancel-name-owner-watch" role="function" condition="since:0.7.1">
<title>tp_dbus_daemon_cancel_name_owner_watch ()</title>
<indexterm zone="tp-dbus-daemon-cancel-name-owner-watch" role="0.7.1"><primary>tp_dbus_daemon_cancel_name_owner_watch</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_dbus_daemon_cancel_name_owner_watch
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *self,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="TpDBusDaemonNameOwnerChangedCb">TpDBusDaemonNameOwnerChangedCb</link> callback,
                                                         <link linkend="gconstpointer">gconstpointer</link> user_data);</programlisting>
<para>
If there was a previous call to <link linkend="tp-dbus-daemon-watch-name-owner"><function>tp_dbus_daemon_watch_name_owner()</function></link>
with exactly the given <parameter>name</parameter>, <parameter>callback</parameter> and <parameter>user_data</parameter>, remove it.
</para>
<para>
If more than one watch matching the details provided was active, remove
only the most recently added one.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> the D-Bus daemon
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> the name that was being watched
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> the callback that was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> the user data that was provided
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if there was such a watch, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7.1
</para></refsect2>
<refsect2 id="tp-cli-dbus-daemon-call-add-match" role="function">
<title>tp_cli_dbus_daemon_call_add_match ()</title>
<indexterm zone="tp-cli-dbus-daemon-call-add-match"><primary>tp_cli_dbus_daemon_call_add_match</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_dbus_daemon_call_add_match   (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-add-match">tp_cli_dbus_daemon_callback_for_add_match</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a AddMatch method call.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in0</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL:CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-call-get-connection-se-linux-security-context" role="function">
<title>tp_cli_dbus_daemon_call_get_connection_se_linux_security_context ()</title>
<indexterm zone="tp-cli-dbus-daemon-call-get-connection-se-linux-security-context"><primary>tp_cli_dbus_daemon_call_get_connection_se_linux_security_context</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_dbus_daemon_call_get_connection_se_linux_security_context
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-get-connection-se-linux-security-context">tp_cli_dbus_daemon_callback_for_get_connection_se_linux_security_context</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a GetConnectionSELinuxSecurityContext method call.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in0</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL:CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-call-get-connection-unix-process-id" role="function">
<title>tp_cli_dbus_daemon_call_get_connection_unix_process_id ()</title>
<indexterm zone="tp-cli-dbus-daemon-call-get-connection-unix-process-id"><primary>tp_cli_dbus_daemon_call_get_connection_unix_process_id</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_dbus_daemon_call_get_connection_unix_process_id
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-get-connection-unix-process-id">tp_cli_dbus_daemon_callback_for_get_connection_unix_process_id</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a GetConnectionUnixProcessID method call.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in0</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL:CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-call-get-connection-unix-user" role="function">
<title>tp_cli_dbus_daemon_call_get_connection_unix_user ()</title>
<indexterm zone="tp-cli-dbus-daemon-call-get-connection-unix-user"><primary>tp_cli_dbus_daemon_call_get_connection_unix_user</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_dbus_daemon_call_get_connection_unix_user
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-get-connection-unix-user">tp_cli_dbus_daemon_callback_for_get_connection_unix_user</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a GetConnectionUnixUser method call.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in0</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL:CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-call-get-id" role="function">
<title>tp_cli_dbus_daemon_call_get_id ()</title>
<indexterm zone="tp-cli-dbus-daemon-call-get-id"><primary>tp_cli_dbus_daemon_call_get_id</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_dbus_daemon_call_get_id      (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-get-id">tp_cli_dbus_daemon_callback_for_get_id</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a GetId method call.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL:CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-call-get-name-owner" role="function">
<title>tp_cli_dbus_daemon_call_get_name_owner ()</title>
<indexterm zone="tp-cli-dbus-daemon-call-get-name-owner"><primary>tp_cli_dbus_daemon_call_get_name_owner</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_dbus_daemon_call_get_name_owner
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-get-name-owner">tp_cli_dbus_daemon_callback_for_get_name_owner</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a GetNameOwner method call.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in0</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL:CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-call-hello" role="function">
<title>tp_cli_dbus_daemon_call_hello ()</title>
<indexterm zone="tp-cli-dbus-daemon-call-hello"><primary>tp_cli_dbus_daemon_call_hello</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_dbus_daemon_call_hello       (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-hello">tp_cli_dbus_daemon_callback_for_hello</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a Hello method call.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL:CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-call-list-activatable-names" role="function">
<title>tp_cli_dbus_daemon_call_list_activatable_names ()</title>
<indexterm zone="tp-cli-dbus-daemon-call-list-activatable-names"><primary>tp_cli_dbus_daemon_call_list_activatable_names</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_dbus_daemon_call_list_activatable_names
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-list-activatable-names">tp_cli_dbus_daemon_callback_for_list_activatable_names</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a ListActivatableNames method call.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL:CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-call-list-names" role="function">
<title>tp_cli_dbus_daemon_call_list_names ()</title>
<indexterm zone="tp-cli-dbus-daemon-call-list-names"><primary>tp_cli_dbus_daemon_call_list_names</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_dbus_daemon_call_list_names  (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-list-names">tp_cli_dbus_daemon_callback_for_list_names</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a ListNames method call.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL:CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-call-list-queued-owners" role="function">
<title>tp_cli_dbus_daemon_call_list_queued_owners ()</title>
<indexterm zone="tp-cli-dbus-daemon-call-list-queued-owners"><primary>tp_cli_dbus_daemon_call_list_queued_owners</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_dbus_daemon_call_list_queued_owners
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-list-queued-owners">tp_cli_dbus_daemon_callback_for_list_queued_owners</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a ListQueuedOwners method call.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in0</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL:CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-call-name-has-owner" role="function">
<title>tp_cli_dbus_daemon_call_name_has_owner ()</title>
<indexterm zone="tp-cli-dbus-daemon-call-name-has-owner"><primary>tp_cli_dbus_daemon_call_name_has_owner</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_dbus_daemon_call_name_has_owner
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-name-has-owner">tp_cli_dbus_daemon_callback_for_name_has_owner</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a NameHasOwner method call.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in0</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL:CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-call-release-name" role="function">
<title>tp_cli_dbus_daemon_call_release_name ()</title>
<indexterm zone="tp-cli-dbus-daemon-call-release-name"><primary>tp_cli_dbus_daemon_call_release_name</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_dbus_daemon_call_release_name
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-release-name">tp_cli_dbus_daemon_callback_for_release_name</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a ReleaseName method call.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in0</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL:CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-call-reload-config" role="function">
<title>tp_cli_dbus_daemon_call_reload_config ()</title>
<indexterm zone="tp-cli-dbus-daemon-call-reload-config"><primary>tp_cli_dbus_daemon_call_reload_config</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_dbus_daemon_call_reload_config
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-reload-config">tp_cli_dbus_daemon_callback_for_reload_config</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a ReloadConfig method call.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL:CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-call-remove-match" role="function">
<title>tp_cli_dbus_daemon_call_remove_match ()</title>
<indexterm zone="tp-cli-dbus-daemon-call-remove-match"><primary>tp_cli_dbus_daemon_call_remove_match</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_dbus_daemon_call_remove_match
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-remove-match">tp_cli_dbus_daemon_callback_for_remove_match</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a RemoveMatch method call.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in0</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL:CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-call-request-name" role="function">
<title>tp_cli_dbus_daemon_call_request_name ()</title>
<indexterm zone="tp-cli-dbus-daemon-call-request-name"><primary>tp_cli_dbus_daemon_call_request_name</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_dbus_daemon_call_request_name
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="guint">guint</link> in1,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-request-name">tp_cli_dbus_daemon_callback_for_request_name</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a RequestName method call.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in0</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in1</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL:CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-call-start-service-by-name" role="function">
<title>tp_cli_dbus_daemon_call_start_service_by_name ()</title>
<indexterm zone="tp-cli-dbus-daemon-call-start-service-by-name"><primary>tp_cli_dbus_daemon_call_start_service_by_name</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_dbus_daemon_call_start_service_by_name
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="guint">guint</link> in1,
                                                         <link linkend="tp-cli-dbus-daemon-callback-for-start-service-by-name">tp_cli_dbus_daemon_callback_for_start_service_by_name</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a StartServiceByName method call.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in0</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in1</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL:CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-run-add-match" role="function">
<title>tp_cli_dbus_daemon_run_add_match ()</title>
<indexterm zone="tp-cli-dbus-daemon-run-add-match"><primary>tp_cli_dbus_daemon_run_add_match</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_dbus_daemon_run_add_match    (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method AddMatch and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpDBusDaemon"><type>TpDBusDaemon</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in0</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-run-get-connection-se-linux-security-context" role="function">
<title>tp_cli_dbus_daemon_run_get_connection_se_linux_security_context ()</title>
<indexterm zone="tp-cli-dbus-daemon-run-get-connection-se-linux-security-context"><primary>tp_cli_dbus_daemon_run_get_connection_se_linux_security_context</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_dbus_daemon_run_get_connection_se_linux_security_context
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="GArray">GArray</link> **out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method GetConnectionSELinuxSecurityContext and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpDBusDaemon"><type>TpDBusDaemon</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in0</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-run-get-connection-unix-process-id" role="function">
<title>tp_cli_dbus_daemon_run_get_connection_unix_process_id ()</title>
<indexterm zone="tp-cli-dbus-daemon-run-get-connection-unix-process-id"><primary>tp_cli_dbus_daemon_run_get_connection_unix_process_id</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_dbus_daemon_run_get_connection_unix_process_id
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="guint">guint</link> *out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method GetConnectionUnixProcessID and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpDBusDaemon"><type>TpDBusDaemon</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in0</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-run-get-connection-unix-user" role="function">
<title>tp_cli_dbus_daemon_run_get_connection_unix_user ()</title>
<indexterm zone="tp-cli-dbus-daemon-run-get-connection-unix-user"><primary>tp_cli_dbus_daemon_run_get_connection_unix_user</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_dbus_daemon_run_get_connection_unix_user
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="guint">guint</link> *out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method GetConnectionUnixUser and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpDBusDaemon"><type>TpDBusDaemon</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in0</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-run-get-id" role="function">
<title>tp_cli_dbus_daemon_run_get_id ()</title>
<indexterm zone="tp-cli-dbus-daemon-run-get-id"><primary>tp_cli_dbus_daemon_run_get_id</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_dbus_daemon_run_get_id       (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="gchar">gchar</link> **out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method GetId and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpDBusDaemon"><type>TpDBusDaemon</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-run-get-name-owner" role="function">
<title>tp_cli_dbus_daemon_run_get_name_owner ()</title>
<indexterm zone="tp-cli-dbus-daemon-run-get-name-owner"><primary>tp_cli_dbus_daemon_run_get_name_owner</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_dbus_daemon_run_get_name_owner
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="gchar">gchar</link> **out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method GetNameOwner and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpDBusDaemon"><type>TpDBusDaemon</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in0</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-run-hello" role="function">
<title>tp_cli_dbus_daemon_run_hello ()</title>
<indexterm zone="tp-cli-dbus-daemon-run-hello"><primary>tp_cli_dbus_daemon_run_hello</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_dbus_daemon_run_hello        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="gchar">gchar</link> **out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method Hello and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpDBusDaemon"><type>TpDBusDaemon</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-run-list-activatable-names" role="function">
<title>tp_cli_dbus_daemon_run_list_activatable_names ()</title>
<indexterm zone="tp-cli-dbus-daemon-run-list-activatable-names"><primary>tp_cli_dbus_daemon_run_list_activatable_names</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_dbus_daemon_run_list_activatable_names
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="gchar">gchar</link> ***out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method ListActivatableNames and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpDBusDaemon"><type>TpDBusDaemon</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-run-list-names" role="function">
<title>tp_cli_dbus_daemon_run_list_names ()</title>
<indexterm zone="tp-cli-dbus-daemon-run-list-names"><primary>tp_cli_dbus_daemon_run_list_names</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_dbus_daemon_run_list_names   (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="gchar">gchar</link> ***out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method ListNames and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpDBusDaemon"><type>TpDBusDaemon</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-run-list-queued-owners" role="function">
<title>tp_cli_dbus_daemon_run_list_queued_owners ()</title>
<indexterm zone="tp-cli-dbus-daemon-run-list-queued-owners"><primary>tp_cli_dbus_daemon_run_list_queued_owners</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_dbus_daemon_run_list_queued_owners
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="gchar">gchar</link> ***out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method ListQueuedOwners and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpDBusDaemon"><type>TpDBusDaemon</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in0</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-run-name-has-owner" role="function">
<title>tp_cli_dbus_daemon_run_name_has_owner ()</title>
<indexterm zone="tp-cli-dbus-daemon-run-name-has-owner"><primary>tp_cli_dbus_daemon_run_name_has_owner</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_dbus_daemon_run_name_has_owner
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="gboolean">gboolean</link> *out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method NameHasOwner and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpDBusDaemon"><type>TpDBusDaemon</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in0</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-run-release-name" role="function">
<title>tp_cli_dbus_daemon_run_release_name ()</title>
<indexterm zone="tp-cli-dbus-daemon-run-release-name"><primary>tp_cli_dbus_daemon_run_release_name</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_dbus_daemon_run_release_name (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="guint">guint</link> *out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method ReleaseName and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpDBusDaemon"><type>TpDBusDaemon</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in0</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-run-reload-config" role="function">
<title>tp_cli_dbus_daemon_run_reload_config ()</title>
<indexterm zone="tp-cli-dbus-daemon-run-reload-config"><primary>tp_cli_dbus_daemon_run_reload_config</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_dbus_daemon_run_reload_config
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method ReloadConfig and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpDBusDaemon"><type>TpDBusDaemon</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-run-remove-match" role="function">
<title>tp_cli_dbus_daemon_run_remove_match ()</title>
<indexterm zone="tp-cli-dbus-daemon-run-remove-match"><primary>tp_cli_dbus_daemon_run_remove_match</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_dbus_daemon_run_remove_match (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method RemoveMatch and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpDBusDaemon"><type>TpDBusDaemon</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in0</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-run-request-name" role="function">
<title>tp_cli_dbus_daemon_run_request_name ()</title>
<indexterm zone="tp-cli-dbus-daemon-run-request-name"><primary>tp_cli_dbus_daemon_run_request_name</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_dbus_daemon_run_request_name (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="guint">guint</link> in1,
                                                         <link linkend="guint">guint</link> *out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method RequestName and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpDBusDaemon"><type>TpDBusDaemon</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in0</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in1</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-run-start-service-by-name" role="function">
<title>tp_cli_dbus_daemon_run_start_service_by_name ()</title>
<indexterm zone="tp-cli-dbus-daemon-run-start-service-by-name"><primary>tp_cli_dbus_daemon_run_start_service_by_name</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_dbus_daemon_run_start_service_by_name
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in0,
                                                         <link linkend="guint">guint</link> in1,
                                                         <link linkend="guint">guint</link> *out0,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method StartServiceByName and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpDBusDaemon"><type>TpDBusDaemon</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in0</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in1</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-callback-for-add-match" role="function">
<title>tp_cli_dbus_daemon_callback_for_add_match ()</title>
<indexterm zone="tp-cli-dbus-daemon-callback-for-add-match"><primary>tp_cli_dbus_daemon_callback_for_add_match</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_dbus_daemon_callback_for_add_match)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a AddMatch method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-callback-for-get-connection-se-linux-security-context" role="function">
<title>tp_cli_dbus_daemon_callback_for_get_connection_se_linux_security_context ()</title>
<indexterm zone="tp-cli-dbus-daemon-callback-for-get-connection-se-linux-security-context"><primary>tp_cli_dbus_daemon_callback_for_get_connection_se_linux_security_context</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_dbus_daemon_callback_for_get_connection_se_linux_security_context)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         const <link linkend="GArray">GArray</link> *out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a GetConnectionSELinuxSecurityContext method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-callback-for-get-connection-unix-process-id" role="function">
<title>tp_cli_dbus_daemon_callback_for_get_connection_unix_process_id ()</title>
<indexterm zone="tp-cli-dbus-daemon-callback-for-get-connection-unix-process-id"><primary>tp_cli_dbus_daemon_callback_for_get_connection_unix_process_id</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_dbus_daemon_callback_for_get_connection_unix_process_id)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="guint">guint</link> out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a GetConnectionUnixProcessID method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-callback-for-get-connection-unix-user" role="function">
<title>tp_cli_dbus_daemon_callback_for_get_connection_unix_user ()</title>
<indexterm zone="tp-cli-dbus-daemon-callback-for-get-connection-unix-user"><primary>tp_cli_dbus_daemon_callback_for_get_connection_unix_user</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_dbus_daemon_callback_for_get_connection_unix_user)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="guint">guint</link> out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a GetConnectionUnixUser method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-callback-for-get-id" role="function">
<title>tp_cli_dbus_daemon_callback_for_get_id ()</title>
<indexterm zone="tp-cli-dbus-daemon-callback-for-get-id"><primary>tp_cli_dbus_daemon_callback_for_get_id</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_dbus_daemon_callback_for_get_id)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a GetId method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-callback-for-get-name-owner" role="function">
<title>tp_cli_dbus_daemon_callback_for_get_name_owner ()</title>
<indexterm zone="tp-cli-dbus-daemon-callback-for-get-name-owner"><primary>tp_cli_dbus_daemon_callback_for_get_name_owner</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_dbus_daemon_callback_for_get_name_owner)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a GetNameOwner method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-callback-for-hello" role="function">
<title>tp_cli_dbus_daemon_callback_for_hello ()</title>
<indexterm zone="tp-cli-dbus-daemon-callback-for-hello"><primary>tp_cli_dbus_daemon_callback_for_hello</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_dbus_daemon_callback_for_hello)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a Hello method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-callback-for-list-activatable-names" role="function">
<title>tp_cli_dbus_daemon_callback_for_list_activatable_names ()</title>
<indexterm zone="tp-cli-dbus-daemon-callback-for-list-activatable-names"><primary>tp_cli_dbus_daemon_callback_for_list_activatable_names</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_dbus_daemon_callback_for_list_activatable_names)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> **out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a ListActivatableNames method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-callback-for-list-names" role="function">
<title>tp_cli_dbus_daemon_callback_for_list_names ()</title>
<indexterm zone="tp-cli-dbus-daemon-callback-for-list-names"><primary>tp_cli_dbus_daemon_callback_for_list_names</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_dbus_daemon_callback_for_list_names)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> **out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a ListNames method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-callback-for-list-queued-owners" role="function">
<title>tp_cli_dbus_daemon_callback_for_list_queued_owners ()</title>
<indexterm zone="tp-cli-dbus-daemon-callback-for-list-queued-owners"><primary>tp_cli_dbus_daemon_callback_for_list_queued_owners</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_dbus_daemon_callback_for_list_queued_owners)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> **out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a ListQueuedOwners method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-callback-for-name-has-owner" role="function">
<title>tp_cli_dbus_daemon_callback_for_name_has_owner ()</title>
<indexterm zone="tp-cli-dbus-daemon-callback-for-name-has-owner"><primary>tp_cli_dbus_daemon_callback_for_name_has_owner</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_dbus_daemon_callback_for_name_has_owner)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="gboolean">gboolean</link> out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a NameHasOwner method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-callback-for-release-name" role="function">
<title>tp_cli_dbus_daemon_callback_for_release_name ()</title>
<indexterm zone="tp-cli-dbus-daemon-callback-for-release-name"><primary>tp_cli_dbus_daemon_callback_for_release_name</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_dbus_daemon_callback_for_release_name)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="guint">guint</link> out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a ReleaseName method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-callback-for-reload-config" role="function">
<title>tp_cli_dbus_daemon_callback_for_reload_config ()</title>
<indexterm zone="tp-cli-dbus-daemon-callback-for-reload-config"><primary>tp_cli_dbus_daemon_callback_for_reload_config</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_dbus_daemon_callback_for_reload_config)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a ReloadConfig method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-callback-for-remove-match" role="function">
<title>tp_cli_dbus_daemon_callback_for_remove_match ()</title>
<indexterm zone="tp-cli-dbus-daemon-callback-for-remove-match"><primary>tp_cli_dbus_daemon_callback_for_remove_match</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_dbus_daemon_callback_for_remove_match)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a RemoveMatch method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-callback-for-request-name" role="function">
<title>tp_cli_dbus_daemon_callback_for_request_name ()</title>
<indexterm zone="tp-cli-dbus-daemon-callback-for-request-name"><primary>tp_cli_dbus_daemon_callback_for_request_name</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_dbus_daemon_callback_for_request_name)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="guint">guint</link> out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a RequestName method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-callback-for-start-service-by-name" role="function">
<title>tp_cli_dbus_daemon_callback_for_start_service_by_name ()</title>
<indexterm zone="tp-cli-dbus-daemon-callback-for-start-service-by-name"><primary>tp_cli_dbus_daemon_callback_for_start_service_by_name</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_dbus_daemon_callback_for_start_service_by_name)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="guint">guint</link> out0,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a StartServiceByName method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-connect-to-name-acquired" role="function">
<title>tp_cli_dbus_daemon_connect_to_name_acquired ()</title>
<indexterm zone="tp-cli-dbus-daemon-connect-to-name-acquired"><primary>tp_cli_dbus_daemon_connect_to_name_acquired</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link>* tp_cli_dbus_daemon_connect_to_name_acquired
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="tp-cli-dbus-daemon-signal-callback-name-acquired">tp_cli_dbus_daemon_signal_callback_name_acquired</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal NameAcquired.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpDBusDaemon"><type>TpDBusDaemon</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL:CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL:CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-connect-to-name-lost" role="function">
<title>tp_cli_dbus_daemon_connect_to_name_lost ()</title>
<indexterm zone="tp-cli-dbus-daemon-connect-to-name-lost"><primary>tp_cli_dbus_daemon_connect_to_name_lost</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link>* tp_cli_dbus_daemon_connect_to_name_lost
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="tp-cli-dbus-daemon-signal-callback-name-lost">tp_cli_dbus_daemon_signal_callback_name_lost</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal NameLost.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpDBusDaemon"><type>TpDBusDaemon</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL:CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL:CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-connect-to-name-owner-changed" role="function">
<title>tp_cli_dbus_daemon_connect_to_name_owner_changed ()</title>
<indexterm zone="tp-cli-dbus-daemon-connect-to-name-owner-changed"><primary>tp_cli_dbus_daemon_connect_to_name_owner_changed</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link>* tp_cli_dbus_daemon_connect_to_name_owner_changed
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         <link linkend="tp-cli-dbus-daemon-signal-callback-name-owner-changed">tp_cli_dbus_daemon_signal_callback_name_owner_changed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal NameOwnerChanged.
</para>
<para>
(Undocumented)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpDBusDaemon"><type>TpDBusDaemon</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL:CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL:CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-signal-callback-name-acquired" role="function">
<title>tp_cli_dbus_daemon_signal_callback_name_acquired ()</title>
<indexterm zone="tp-cli-dbus-daemon-signal-callback-name-acquired"><primary>tp_cli_dbus_daemon_signal_callback_name_acquired</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_dbus_daemon_signal_callback_name_acquired)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg0,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal NameAcquired.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-dbus-daemon-connect-to-name-acquired"><function>tp_cli_dbus_daemon_connect_to_name_acquired()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg0</parameter>&nbsp;:</term>
<listitem><simpara> (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-signal-callback-name-lost" role="function">
<title>tp_cli_dbus_daemon_signal_callback_name_lost ()</title>
<indexterm zone="tp-cli-dbus-daemon-signal-callback-name-lost"><primary>tp_cli_dbus_daemon_signal_callback_name_lost</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_dbus_daemon_signal_callback_name_lost)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg0,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal NameLost.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-dbus-daemon-connect-to-name-lost"><function>tp_cli_dbus_daemon_connect_to_name_lost()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg0</parameter>&nbsp;:</term>
<listitem><simpara> (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-dbus-daemon-signal-callback-name-owner-changed" role="function">
<title>tp_cli_dbus_daemon_signal_callback_name_owner_changed ()</title>
<indexterm zone="tp-cli-dbus-daemon-signal-callback-name-owner-changed"><primary>tp_cli_dbus_daemon_signal_callback_name_owner_changed</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_dbus_daemon_signal_callback_name_owner_changed)
                                                        (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg0,
                                                         const <link linkend="gchar">gchar</link> *arg1,
                                                         const <link linkend="gchar">gchar</link> *arg2,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal NameOwnerChanged.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-dbus-daemon-connect-to-name-owner-changed"><function>tp_cli_dbus_daemon_connect_to_name_owner_changed()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg0</parameter>&nbsp;:</term>
<listitem><simpara> (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&nbsp;:</term>
<listitem><simpara> (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg2</parameter>&nbsp;:</term>
<listitem><simpara> (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
