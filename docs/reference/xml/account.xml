<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-account">
<refmeta>
<refentrytitle role="top_of_page" id="telepathy-glib-account.top_of_page">TpAccount</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>TpAccount</refname>
<refpurpose>proxy object for an account in the Telepathy account
 manager</refpurpose>
</refnamediv>

<refsynopsisdiv id="telepathy-glib-account.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>
<anchor id="TpAccount"/>
<synopsis>

#include &lt;telepathy-glib/account.h&gt;

                    <link linkend="TpAccount-struct">TpAccount</link>;
                    <link linkend="TpAccountClass">TpAccountClass</link>;
<link linkend="TpAccount">TpAccount</link> *         <link linkend="tp-account-new">tp_account_new</link>                      (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *bus_daemon,
                                                         const <link linkend="gchar">gchar</link> *object_path,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                <link linkend="tp-account-init-known-interfaces">tp_account_init_known_interfaces</link>    (void);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-account-parse-object-path">tp_account_parse_object_path</link>        (const <link linkend="gchar">gchar</link> *object_path,
                                                         <link linkend="gchar">gchar</link> **cm,
                                                         <link linkend="gchar">gchar</link> **protocol,
                                                         <link linkend="gchar">gchar</link> **account_id,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="TpConnection">TpConnection</link> *      <link linkend="tp-account-get-connection">tp_account_get_connection</link>           (<link linkend="TpAccount">TpAccount</link> *account);
<link linkend="TpConnection">TpConnection</link> *      <link linkend="tp-account-ensure-connection">tp_account_ensure_connection</link>        (<link linkend="TpAccount">TpAccount</link> *account,
                                                         const <link linkend="gchar">gchar</link> *path);
const <link linkend="gchar">gchar</link> *       <link linkend="tp-account-get-display-name">tp_account_get_display_name</link>         (<link linkend="TpAccount">TpAccount</link> *account);
const <link linkend="gchar">gchar</link> *       <link linkend="tp-account-get-connection-manager">tp_account_get_connection_manager</link>   (<link linkend="TpAccount">TpAccount</link> *account);
const <link linkend="gchar">gchar</link> *       <link linkend="tp-account-get-protocol">tp_account_get_protocol</link>             (<link linkend="TpAccount">TpAccount</link> *account);
const <link linkend="gchar">gchar</link> *       <link linkend="tp-account-get-icon-name">tp_account_get_icon_name</link>            (<link linkend="TpAccount">TpAccount</link> *account);
<link linkend="void">void</link>                <link linkend="tp-account-set-enabled-async">tp_account_set_enabled_async</link>        (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="gboolean">gboolean</link> enabled,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-account-set-enabled-finish">tp_account_set_enabled_finish</link>       (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                <link linkend="tp-account-reconnect-async">tp_account_reconnect_async</link>          (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-account-reconnect-finish">tp_account_reconnect_finish</link>         (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-account-is-enabled">tp_account_is_enabled</link>               (<link linkend="TpAccount">TpAccount</link> *account);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-account-is-valid">tp_account_is_valid</link>                 (<link linkend="TpAccount">TpAccount</link> *account);
<link linkend="void">void</link>                <link linkend="tp-account-update-parameters-async">tp_account_update_parameters_async</link>  (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GHashTable">GHashTable</link> *parameters,
                                                         const <link linkend="gchar">gchar</link> **unset_parameters,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-account-update-parameters-finish">tp_account_update_parameters_finish</link> (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="gchar">gchar</link> ***reconnect_required,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                <link linkend="tp-account-remove-async">tp_account_remove_async</link>             (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-account-remove-finish">tp_account_remove_finish</link>            (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                <link linkend="tp-account-set-display-name-async">tp_account_set_display_name_async</link>   (<link linkend="TpAccount">TpAccount</link> *account,
                                                         const <link linkend="gchar">gchar</link> *display_name,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-account-set-display-name-finish">tp_account_set_display_name_finish</link>  (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                <link linkend="tp-account-set-icon-name-async">tp_account_set_icon_name_async</link>      (<link linkend="TpAccount">TpAccount</link> *account,
                                                         const <link linkend="gchar">gchar</link> *icon_name,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-account-set-icon-name-finish">tp_account_set_icon_name_finish</link>     (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                <link linkend="tp-account-request-presence-async">tp_account_request_presence_async</link>   (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link> type,
                                                         const <link linkend="gchar">gchar</link> *status,
                                                         const <link linkend="gchar">gchar</link> *message,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-account-request-presence-finish">tp_account_request_presence_finish</link>  (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-account-get-connect-automatically">tp_account_get_connect_automatically</link>
                                                        (<link linkend="TpAccount">TpAccount</link> *account);
<link linkend="void">void</link>                <link linkend="tp-account-set-connect-automatically-async">tp_account_set_connect_automatically_async</link>
                                                        (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="gboolean">gboolean</link> connect_automatically,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-account-set-connect-automatically-finish">tp_account_set_connect_automatically_finish</link>
                                                        (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-account-get-has-been-online">tp_account_get_has_been_online</link>      (<link linkend="TpAccount">TpAccount</link> *account);
<link linkend="TpConnectionStatus">TpConnectionStatus</link>  <link linkend="tp-account-get-connection-status">tp_account_get_connection_status</link>    (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="TpConnectionStatusReason">TpConnectionStatusReason</link> *reason);
<link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link>  <link linkend="tp-account-get-current-presence">tp_account_get_current_presence</link>
                                                        (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="gchar">gchar</link> **status,
                                                         <link linkend="gchar">gchar</link> **status_message);
<link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link>  <link linkend="tp-account-get-requested-presence">tp_account_get_requested_presence</link>
                                                        (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="gchar">gchar</link> **status,
                                                         <link linkend="gchar">gchar</link> **status_message);
const <link linkend="GHashTable">GHashTable</link> *  <link linkend="tp-account-get-parameters">tp_account_get_parameters</link>           (<link linkend="TpAccount">TpAccount</link> *account);
const <link linkend="gchar">gchar</link> *       <link linkend="tp-account-get-nickname">tp_account_get_nickname</link>             (<link linkend="TpAccount">TpAccount</link> *account);
<link linkend="void">void</link>                <link linkend="tp-account-set-nickname-async">tp_account_set_nickname_async</link>       (<link linkend="TpAccount">TpAccount</link> *account,
                                                         const <link linkend="gchar">gchar</link> *nickname,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-account-set-nickname-finish">tp_account_set_nickname_finish</link>      (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                <link linkend="tp-account-get-avatar-async">tp_account_get_avatar_async</link>         (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
const <link linkend="GArray">GArray</link> *      <link linkend="tp-account-get-avatar-finish">tp_account_get_avatar_finish</link>        (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);

#define             <link linkend="TP-ACCOUNT-FEATURE-CORE--CAPS">TP_ACCOUNT_FEATURE_CORE</link>
<link linkend="gboolean">gboolean</link>            <link linkend="tp-account-is-prepared">tp_account_is_prepared</link>              (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GQuark">GQuark</link> feature);
<link linkend="void">void</link>                <link linkend="tp-account-prepare-async">tp_account_prepare_async</link>            (<link linkend="TpAccount">TpAccount</link> *account,
                                                         const <link linkend="GQuark">GQuark</link> *features,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-account-prepare-finish">tp_account_prepare_finish</link>           (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);


<link linkend="void">void</link>                (<link linkend="tp-cli-account-callback-for-reconnect">*tp_cli_account_callback_for_reconnect</link>)
                                                        (<link linkend="TpAccount">TpAccount</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-account-call-reconnect">tp_cli_account_call_reconnect</link>      (<link linkend="TpAccount">TpAccount</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-account-callback-for-reconnect">tp_cli_account_callback_for_reconnect</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-account-callback-for-remove">*tp_cli_account_callback_for_remove</link>)
                                                        (<link linkend="TpAccount">TpAccount</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-account-call-remove">tp_cli_account_call_remove</link>         (<link linkend="TpAccount">TpAccount</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-account-callback-for-remove">tp_cli_account_callback_for_remove</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-account-callback-for-update-parameters">*tp_cli_account_callback_for_update_parameters</link>)
                                                        (<link linkend="TpAccount">TpAccount</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> **out_Reconnect_Required,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-account-call-update-parameters">tp_cli_account_call_update_parameters</link>
                                                        (<link linkend="TpAccount">TpAccount</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GHashTable">GHashTable</link> *in_Set,
                                                         const <link linkend="gchar">gchar</link> **in_Unset,
                                                         <link linkend="tp-cli-account-callback-for-update-parameters">tp_cli_account_callback_for_update_parameters</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-account-signal-callback-account-property-changed">*tp_cli_account_signal_callback_account_property_changed</link>)
                                                        (<link linkend="TpAccount">TpAccount</link> *proxy,
                                                         <link linkend="GHashTable">GHashTable</link> *arg_Properties,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-account-connect-to-account-property-changed">tp_cli_account_connect_to_account_property_changed</link>
                                                        (<link linkend="TpAccount">TpAccount</link> *proxy,
                                                         <link linkend="tp-cli-account-signal-callback-account-property-changed">tp_cli_account_signal_callback_account_property_changed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                (<link linkend="tp-cli-account-signal-callback-removed">*tp_cli_account_signal_callback_removed</link>)
                                                        (<link linkend="TpAccount">TpAccount</link> *proxy,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-account-connect-to-removed">tp_cli_account_connect_to_removed</link>
                                                        (<link linkend="TpAccount">TpAccount</link> *proxy,
                                                         <link linkend="tp-cli-account-signal-callback-removed">tp_cli_account_signal_callback_removed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);

<link linkend="void">void</link>                (<link linkend="tp-cli-account-interface-avatar-signal-callback-avatar-changed">*tp_cli_account_interface_avatar_signal_callback_avatar_changed</link>)
                                                        (<link linkend="TpAccount">TpAccount</link> *proxy,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-account-interface-avatar-connect-to-avatar-changed">tp_cli_account_interface_avatar_connect_to_avatar_changed</link>
                                                        (<link linkend="TpAccount">TpAccount</link> *proxy,
                                                         <link linkend="tp-cli-account-interface-avatar-signal-callback-avatar-changed">tp_cli_account_interface_avatar_signal_callback_avatar_changed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
</synopsis>
</refsynopsisdiv>

<refsect1 id="telepathy-glib-account.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="TpProxy">TpProxy</link>
         +----TpAccount
</synopsis>
</refsect1>





<refsect1 id="telepathy-glib-account.properties" role="properties">
<title role="properties.title">Properties</title>
<synopsis>
  &quot;<link linkend="TpAccount--connect-automatically">connect-automatically</link>&quot;    <link linkend="gboolean">gboolean</link>              : Read
  &quot;<link linkend="TpAccount--connection">connection</link>&quot;               <link linkend="TpConnection">TpConnection</link>*         : Read
  &quot;<link linkend="TpAccount--connection-manager">connection-manager</link>&quot;       <link linkend="gchar">gchar</link>*                : Read
  &quot;<link linkend="TpAccount--connection-status">connection-status</link>&quot;        <link linkend="guint">guint</link>                 : Read
  &quot;<link linkend="TpAccount--connection-status-reason">connection-status-reason</link>&quot; <link linkend="guint">guint</link>                 : Read
  &quot;<link linkend="TpAccount--current-presence-type">current-presence-type</link>&quot;    <link linkend="guint">guint</link>                 : Read
  &quot;<link linkend="TpAccount--current-status">current-status</link>&quot;           <link linkend="gchar">gchar</link>*                : Read
  &quot;<link linkend="TpAccount--current-status-message">current-status-message</link>&quot;   <link linkend="gchar">gchar</link>*                : Read
  &quot;<link linkend="TpAccount--display-name">display-name</link>&quot;             <link linkend="gchar">gchar</link>*                : Read
  &quot;<link linkend="TpAccount--enabled">enabled</link>&quot;                  <link linkend="gboolean">gboolean</link>              : Read
  &quot;<link linkend="TpAccount--has-been-online">has-been-online</link>&quot;          <link linkend="gboolean">gboolean</link>              : Read
  &quot;<link linkend="TpAccount--icon-name">icon-name</link>&quot;                <link linkend="gchar">gchar</link>*                : Read
  &quot;<link linkend="TpAccount--nickname">nickname</link>&quot;                 <link linkend="gchar">gchar</link>*                : Read
  &quot;<link linkend="TpAccount--protocol">protocol</link>&quot;                 <link linkend="gchar">gchar</link>*                : Read
  &quot;<link linkend="TpAccount--requested-presence-type">requested-presence-type</link>&quot;  <link linkend="guint">guint</link>                 : Read
  &quot;<link linkend="TpAccount--requested-status">requested-status</link>&quot;         <link linkend="gchar">gchar</link>*                : Read
  &quot;<link linkend="TpAccount--requested-status-message">requested-status-message</link>&quot; <link linkend="gchar">gchar</link>*                : Read
  &quot;<link linkend="TpAccount--valid">valid</link>&quot;                    <link linkend="gboolean">gboolean</link>              : Read
</synopsis>
</refsect1>

<refsect1 id="telepathy-glib-account.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="TpAccount-presence-changed">presence-changed</link>&quot;                               : Run Last
  &quot;<link linkend="TpAccount-status-changed">status-changed</link>&quot;                                 : Run Last
</synopsis>
</refsect1>


<refsect1 id="telepathy-glib-account.description" role="desc">
<title role="desc.title">Description</title>
<para>
The Telepathy Account Manager stores the user's configured real-time
communication accounts. The <link linkend="TpAccount"><type>TpAccount</type></link> object represents a stored account.</para>
<para>
</para>
</refsect1>

<refsect1 id="telepathy-glib-account.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="TpAccount-struct" role="struct">
<title>TpAccount</title>
<indexterm zone="TpAccount-struct" role="0.9.0"><primary sortas="TpAccount">TpAccount</primary></indexterm><programlisting>typedef struct _TpAccount TpAccount;</programlisting>
<para>
The current status message message of the account.
</para>
<para>
One can receive change notifications on this property by connecting
to the <link linkend="GObject-notify"><type>"notify"</type></link> signal and using this property as the signal
detail.
</para>
<para>
This is not guaranteed to have been retrieved until
<link linkend="tp-account-prepare-async"><function>tp_account_prepare_async()</function></link> has finished; until then, the value is
<link linkend="NULL--CAPS"><literal>NULL</literal></link>.</para>
<para>
</para><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="TpAccountClass" role="struct">
<title>TpAccountClass</title>
<indexterm zone="TpAccountClass"><primary sortas="TpAccountClass">TpAccountClass</primary></indexterm><programlisting>typedef struct {
} TpAccountClass;
</programlisting>
<para>
The class of a <link linkend="TpAccount"><type>TpAccount</type></link>.</para>
<para>
</para></refsect2>
<refsect2 id="tp-account-new" role="function">
<title>tp_account_new ()</title>
<indexterm zone="tp-account-new"><primary sortas="tp_account_new">tp_account_new</primary></indexterm><programlisting><link linkend="TpAccount">TpAccount</link> *         tp_account_new                      (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *bus_daemon,
                                                         const <link linkend="gchar">gchar</link> *object_path,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Convenience function to create a new account proxy. The returned <link linkend="TpAccount"><type>TpAccount</type></link>
is not guaranteed to be ready at the point of return.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bus_daemon</parameter>&#160;:</term>
<listitem><simpara> Proxy for the D-Bus daemon
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object_path</parameter>&#160;:</term>
<listitem><simpara> The non-NULL object path of this account
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> Used to raise an error if <parameter>object_path</parameter> is not valid
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a new reference to an account proxy, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>object_path</parameter> is
   not valid
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-account-init-known-interfaces" role="function" condition="since:0.7.32">
<title>tp_account_init_known_interfaces ()</title>
<indexterm zone="tp-account-init-known-interfaces" role="0.7.32"><primary sortas="tp_account_init_known_interfaces">tp_account_init_known_interfaces</primary></indexterm><programlisting><link linkend="void">void</link>                tp_account_init_known_interfaces    (void);</programlisting>
<para>
Ensure that the known interfaces for TpAccount have been set up.
This is done automatically when necessary, but for correct
overriding of library interfaces by local extensions, you should
call this function before calling
<link linkend="tp-proxy-or-subclass-hook-on-interface-add"><function>tp_proxy_or_subclass_hook_on_interface_add()</function></link> with first argument
<link linkend="TP-TYPE-ACCOUNT--CAPS"><literal>TP_TYPE_ACCOUNT</literal></link>.</para>
<para>
</para><para role="since">Since 0.7.32</para></refsect2>
<refsect2 id="tp-account-parse-object-path" role="function" condition="since:0.9.0">
<title>tp_account_parse_object_path ()</title>
<indexterm zone="tp-account-parse-object-path" role="0.9.0"><primary sortas="tp_account_parse_object_path">tp_account_parse_object_path</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_account_parse_object_path        (const <link linkend="gchar">gchar</link> *object_path,
                                                         <link linkend="gchar">gchar</link> **cm,
                                                         <link linkend="gchar">gchar</link> **protocol,
                                                         <link linkend="gchar">gchar</link> **account_id,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Validates and parses a Telepathy Account's object path, extracting the
connection manager's name, the protocol, and the account's unique identifier
from the path. This includes replacing underscores with hyphens in the
protocol name, as defined in the Account specification.
</para>
<para>
Any of the out parameters may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if not needed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>object_path</parameter>&#160;:</term>
<listitem><simpara> a Telepathy Account's object path
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cm</parameter>&#160;:</term>
<listitem><simpara> location at which to store the account's connection manager's name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>protocol</parameter>&#160;:</term>
<listitem><simpara> location at which to store the account's protocol
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>account_id</parameter>&#160;:</term>
<listitem><simpara> location at which to store the account's unique identifier
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> location at which to return an error
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if <parameter>object_path</parameter> was successfully parsed; <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> and sets
         <parameter>error</parameter> otherwise.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-get-connection" role="function" condition="since:0.9.0">
<title>tp_account_get_connection ()</title>
<indexterm zone="tp-account-get-connection" role="0.9.0"><primary sortas="tp_account_get_connection">tp_account_get_connection</primary></indexterm><programlisting><link linkend="TpConnection">TpConnection</link> *      tp_account_get_connection           (<link linkend="TpAccount">TpAccount</link> *account);</programlisting>
<para>
<!-- --></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the same as the <link linkend="TpAccount--connection"><type>"connection"</type></link> property

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-ensure-connection" role="function" condition="since:0.9.0">
<title>tp_account_ensure_connection ()</title>
<indexterm zone="tp-account-ensure-connection" role="0.9.0"><primary sortas="tp_account_ensure_connection">tp_account_ensure_connection</primary></indexterm><programlisting><link linkend="TpConnection">TpConnection</link> *      tp_account_ensure_connection        (<link linkend="TpAccount">TpAccount</link> *account,
                                                         const <link linkend="gchar">gchar</link> *path);</programlisting>
<para>
Set the connection of the account by specifying the connection object path.
This function does not return a new ref and it is not guaranteed that the
returned <link linkend="TpConnection"><type>TpConnection</type></link> object is ready.
</para>
<para>
The use-case for this function is in a HandleChannels callback and you
already know the object path for the connection, so you can let <parameter>account</parameter>
create its <link linkend="TpConnection"><type>TpConnection</type></link> and return it for use.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> the path to connection object for <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the connection of the account, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if either the object path
  <parameter>path</parameter> is invalid or it is the null-value "/"

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-get-display-name" role="function" condition="since:0.9.0">
<title>tp_account_get_display_name ()</title>
<indexterm zone="tp-account-get-display-name" role="0.9.0"><primary sortas="tp_account_get_display_name">tp_account_get_display_name</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       tp_account_get_display_name         (<link linkend="TpAccount">TpAccount</link> *account);</programlisting>
<para>
<!-- --></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the same as the <link linkend="TpAccount--display-name"><type>"display-name"</type></link> property

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-get-connection-manager" role="function" condition="since:0.9.0">
<title>tp_account_get_connection_manager ()</title>
<indexterm zone="tp-account-get-connection-manager" role="0.9.0"><primary sortas="tp_account_get_connection_manager">tp_account_get_connection_manager</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       tp_account_get_connection_manager   (<link linkend="TpAccount">TpAccount</link> *account);</programlisting>
<para>
<!-- --></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the same as the <link linkend="TpAccount--connection-manager"><type>"connection-manager"</type></link> property

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-get-protocol" role="function" condition="since:0.9.0">
<title>tp_account_get_protocol ()</title>
<indexterm zone="tp-account-get-protocol" role="0.9.0"><primary sortas="tp_account_get_protocol">tp_account_get_protocol</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       tp_account_get_protocol             (<link linkend="TpAccount">TpAccount</link> *account);</programlisting>
<para>
<!-- --></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the same as the <link linkend="TpAccount--protocol"><type>"protocol"</type></link> property

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-get-icon-name" role="function" condition="since:0.9.0">
<title>tp_account_get_icon_name ()</title>
<indexterm zone="tp-account-get-icon-name" role="0.9.0"><primary sortas="tp_account_get_icon_name">tp_account_get_icon_name</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       tp_account_get_icon_name            (<link linkend="TpAccount">TpAccount</link> *account);</programlisting>
<para>
<!-- --></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the same as the <link linkend="TpAccount--icon-name"><type>"icon-name"</type></link> property

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-set-enabled-async" role="function" condition="since:0.9.0">
<title>tp_account_set_enabled_async ()</title>
<indexterm zone="tp-account-set-enabled-async" role="0.9.0"><primary sortas="tp_account_set_enabled_async">tp_account_set_enabled_async</primary></indexterm><programlisting><link linkend="void">void</link>                tp_account_set_enabled_async        (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="gboolean">gboolean</link> enabled,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Requests an asynchronous set of the Enabled property of <parameter>account</parameter>. When the
operation is finished, <parameter>callback</parameter> will be called. You can then call
<link linkend="tp-account-set-enabled-finish"><function>tp_account_set_enabled_finish()</function></link> to get the result of the operation.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>enabled</parameter>&#160;:</term>
<listitem><simpara> the new enabled value of <parameter>account</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> a callback to call when the request is satisfied
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> data to pass to <parameter>callback</parameter>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-set-enabled-finish" role="function" condition="since:0.9.0">
<title>tp_account_set_enabled_finish ()</title>
<indexterm zone="tp-account-set-enabled-finish" role="0.9.0"><primary sortas="tp_account_set_enabled_finish">tp_account_set_enabled_finish</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_account_set_enabled_finish       (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Finishes an async set of the Enabled property.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GAsyncResult"><type>GAsyncResult</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GError"><type>GError</type></link> to fill
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the set was successful, otherwise <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-reconnect-async" role="function" condition="since:0.9.0">
<title>tp_account_reconnect_async ()</title>
<indexterm zone="tp-account-reconnect-async" role="0.9.0"><primary sortas="tp_account_reconnect_async">tp_account_reconnect_async</primary></indexterm><programlisting><link linkend="void">void</link>                tp_account_reconnect_async          (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Requests an asynchronous reconnect of <parameter>account</parameter>. When the operation is
finished, <parameter>callback</parameter> will be called. You can then call
<link linkend="tp-account-reconnect-finish"><function>tp_account_reconnect_finish()</function></link> to get the result of the operation.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> a callback to call when the request is satisfied
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> data to pass to <parameter>callback</parameter>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-reconnect-finish" role="function" condition="since:0.9.0">
<title>tp_account_reconnect_finish ()</title>
<indexterm zone="tp-account-reconnect-finish" role="0.9.0"><primary sortas="tp_account_reconnect_finish">tp_account_reconnect_finish</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_account_reconnect_finish         (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Finishes an async reconnect of <parameter>account</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GAsyncResult"><type>GAsyncResult</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GError"><type>GError</type></link> to be filled
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the reconnect call was successful, otherwise <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-is-enabled" role="function" condition="since:0.9.0">
<title>tp_account_is_enabled ()</title>
<indexterm zone="tp-account-is-enabled" role="0.9.0"><primary sortas="tp_account_is_enabled">tp_account_is_enabled</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_account_is_enabled               (<link linkend="TpAccount">TpAccount</link> *account);</programlisting>
<para>
<!-- --></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the same as the <link linkend="TpAccount--enabled"><type>"enabled"</type></link> property

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-is-valid" role="function" condition="since:0.9.0">
<title>tp_account_is_valid ()</title>
<indexterm zone="tp-account-is-valid" role="0.9.0"><primary sortas="tp_account_is_valid">tp_account_is_valid</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_account_is_valid                 (<link linkend="TpAccount">TpAccount</link> *account);</programlisting>
<para>
<!-- --></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the same as the <link linkend="TpAccount--valid"><type>"valid"</type></link> property

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-update-parameters-async" role="function" condition="since:0.9.0">
<title>tp_account_update_parameters_async ()</title>
<indexterm zone="tp-account-update-parameters-async" role="0.9.0"><primary sortas="tp_account_update_parameters_async">tp_account_update_parameters_async</primary></indexterm><programlisting><link linkend="void">void</link>                tp_account_update_parameters_async  (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GHashTable">GHashTable</link> *parameters,
                                                         const <link linkend="gchar">gchar</link> **unset_parameters,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Requests an asynchronous update of parameters of <parameter>account</parameter>. When the
operation is finished, <parameter>callback</parameter> will be called. You can then call
<link linkend="tp-account-update-parameters-finish"><function>tp_account_update_parameters_finish()</function></link> to get the result of the operation.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parameters</parameter>&#160;:</term>
<listitem><simpara> new parameters to set on <parameter>account</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>unset_parameters</parameter>&#160;:</term>
<listitem><simpara> list of parameters to unset on <parameter>account</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> a callback to call when the request is satisfied
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> data to pass to <parameter>callback</parameter>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-update-parameters-finish" role="function" condition="since:0.9.0">
<title>tp_account_update_parameters_finish ()</title>
<indexterm zone="tp-account-update-parameters-finish" role="0.9.0"><primary sortas="tp_account_update_parameters_finish">tp_account_update_parameters_finish</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_account_update_parameters_finish (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="gchar">gchar</link> ***reconnect_required,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Finishes an async update of the parameters on <parameter>account</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GAsyncResult"><type>GAsyncResult</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reconnect_required</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GStrv"><type>GStrv</type></link> to fill with properties that need a reconnect
                     to take effect
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GError"><type>GError</type></link> to fill
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the request succeeded, otherwise <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-remove-async" role="function" condition="since:0.9.0">
<title>tp_account_remove_async ()</title>
<indexterm zone="tp-account-remove-async" role="0.9.0"><primary sortas="tp_account_remove_async">tp_account_remove_async</primary></indexterm><programlisting><link linkend="void">void</link>                tp_account_remove_async             (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Requests an asynchronous removal of <parameter>account</parameter>. When the operation is
finished, <parameter>callback</parameter> will be called. You can then call
<link linkend="tp-account-remove-finish"><function>tp_account_remove_finish()</function></link> to get the result of the operation.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> a callback to call when the request is satisfied
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> data to pass to <parameter>callback</parameter>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-remove-finish" role="function" condition="since:0.9.0">
<title>tp_account_remove_finish ()</title>
<indexterm zone="tp-account-remove-finish" role="0.9.0"><primary sortas="tp_account_remove_finish">tp_account_remove_finish</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_account_remove_finish            (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Finishes an async removal of <parameter>account</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GAsyncResult"><type>GAsyncResult</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GError"><type>GError</type></link> to fill
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the operation was successful, otherwise <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-set-display-name-async" role="function" condition="since:0.9.0">
<title>tp_account_set_display_name_async ()</title>
<indexterm zone="tp-account-set-display-name-async" role="0.9.0"><primary sortas="tp_account_set_display_name_async">tp_account_set_display_name_async</primary></indexterm><programlisting><link linkend="void">void</link>                tp_account_set_display_name_async   (<link linkend="TpAccount">TpAccount</link> *account,
                                                         const <link linkend="gchar">gchar</link> *display_name,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Requests an asynchronous set of the DisplayName property of <parameter>account</parameter>. When
the operation is finished, <parameter>callback</parameter> will be called. You can then call
<link linkend="tp-account-set-display-name-finish"><function>tp_account_set_display_name_finish()</function></link> to get the result of the operation.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>display_name</parameter>&#160;:</term>
<listitem><simpara> a new display name, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> to unset the display name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> a callback to call when the request is satisfied
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> data to pass to <parameter>callback</parameter>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-set-display-name-finish" role="function" condition="since:0.9.0">
<title>tp_account_set_display_name_finish ()</title>
<indexterm zone="tp-account-set-display-name-finish" role="0.9.0"><primary sortas="tp_account_set_display_name_finish">tp_account_set_display_name_finish</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_account_set_display_name_finish  (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Finishes an async set of the DisplayName property.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GAsyncResult"><type>GAsyncResult</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GError"><type>GError</type></link> to fill
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the call was successful, otherwise <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-set-icon-name-async" role="function" condition="since:0.9.0">
<title>tp_account_set_icon_name_async ()</title>
<indexterm zone="tp-account-set-icon-name-async" role="0.9.0"><primary sortas="tp_account_set_icon_name_async">tp_account_set_icon_name_async</primary></indexterm><programlisting><link linkend="void">void</link>                tp_account_set_icon_name_async      (<link linkend="TpAccount">TpAccount</link> *account,
                                                         const <link linkend="gchar">gchar</link> *icon_name,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Requests an asynchronous set of the Icon property of <parameter>account</parameter>. When
the operation is finished, <parameter>callback</parameter> will be called. You can then call
<link linkend="tp-account-set-icon-name-finish"><function>tp_account_set_icon_name_finish()</function></link> to get the result of the operation.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon_name</parameter>&#160;:</term>
<listitem><simpara> a new icon name, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> to unset the icon name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> a callback to call when the request is satisfied
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> data to pass to <parameter>callback</parameter>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-set-icon-name-finish" role="function" condition="since:0.9.0">
<title>tp_account_set_icon_name_finish ()</title>
<indexterm zone="tp-account-set-icon-name-finish" role="0.9.0"><primary sortas="tp_account_set_icon_name_finish">tp_account_set_icon_name_finish</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_account_set_icon_name_finish     (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Finishes an async set of the Icon parameter.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GAsyncResult"><type>GAsyncResult</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GError"><type>GError</type></link> to fill
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the operation was successful, otherwise <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-request-presence-async" role="function" condition="since:0.9.0">
<title>tp_account_request_presence_async ()</title>
<indexterm zone="tp-account-request-presence-async" role="0.9.0"><primary sortas="tp_account_request_presence_async">tp_account_request_presence_async</primary></indexterm><programlisting><link linkend="void">void</link>                tp_account_request_presence_async   (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link> type,
                                                         const <link linkend="gchar">gchar</link> *status,
                                                         const <link linkend="gchar">gchar</link> *message,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Requests an asynchronous change of presence on <parameter>account</parameter>. When the
operation is finished, <parameter>callback</parameter> will be called. You can then call
<link linkend="tp-account-request-presence-finish"><function>tp_account_request_presence_finish()</function></link> to get the result of the operation.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> the requested presence
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara> a status message to set, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> a message for the change, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> a callback to call when the request is satisfied
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> data to pass to <parameter>callback</parameter>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-request-presence-finish" role="function" condition="since:0.9.0">
<title>tp_account_request_presence_finish ()</title>
<indexterm zone="tp-account-request-presence-finish" role="0.9.0"><primary sortas="tp_account_request_presence_finish">tp_account_request_presence_finish</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_account_request_presence_finish  (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Finishes an async presence change request on <parameter>account</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GAsyncResult"><type>GAsyncResult</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GError"><type>GError</type></link> to fill
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the operation was successful, otherwise <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-get-connect-automatically" role="function" condition="since:0.9.0">
<title>tp_account_get_connect_automatically ()</title>
<indexterm zone="tp-account-get-connect-automatically" role="0.9.0"><primary sortas="tp_account_get_connect_automatically">tp_account_get_connect_automatically</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_account_get_connect_automatically
                                                        (<link linkend="TpAccount">TpAccount</link> *account);</programlisting>
<para>
<!-- --></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the same as the <link linkend="TpAccount--connect-automatically"><type>"connect-automatically"</type></link> property

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-set-connect-automatically-async" role="function" condition="since:0.9.0">
<title>tp_account_set_connect_automatically_async ()</title>
<indexterm zone="tp-account-set-connect-automatically-async" role="0.9.0"><primary sortas="tp_account_set_connect_automatically_async">tp_account_set_connect_automatically_async</primary></indexterm><programlisting><link linkend="void">void</link>                tp_account_set_connect_automatically_async
                                                        (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="gboolean">gboolean</link> connect_automatically,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Requests an asynchronous set of the ConnectAutomatically property of
<parameter>account</parameter>. When the operation is finished, <parameter>callback</parameter> will be called. You can
then call <link linkend="tp-account-set-display-name-finish"><function>tp_account_set_display_name_finish()</function></link> to get the result of the
operation.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>connect_automatically</parameter>&#160;:</term>
<listitem><simpara> new value for the parameter
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> a callback to call when the request is satisfied
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> data to pass to <parameter>callback</parameter>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-set-connect-automatically-finish" role="function" condition="since:0.9.0">
<title>tp_account_set_connect_automatically_finish ()</title>
<indexterm zone="tp-account-set-connect-automatically-finish" role="0.9.0"><primary sortas="tp_account_set_connect_automatically_finish">tp_account_set_connect_automatically_finish</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_account_set_connect_automatically_finish
                                                        (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Finishes an async set of the ConnectAutomatically property.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GAsyncResult"><type>GAsyncResult</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GError"><type>GError</type></link> to fill
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the call was successful, otherwise <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-get-has-been-online" role="function" condition="since:0.9.0">
<title>tp_account_get_has_been_online ()</title>
<indexterm zone="tp-account-get-has-been-online" role="0.9.0"><primary sortas="tp_account_get_has_been_online">tp_account_get_has_been_online</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_account_get_has_been_online      (<link linkend="TpAccount">TpAccount</link> *account);</programlisting>
<para>
<!-- --></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the same as the <link linkend="TpAccount--has-been-online"><type>"has-been-online"</type></link> property

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-get-connection-status" role="function" condition="since:0.9.0">
<title>tp_account_get_connection_status ()</title>
<indexterm zone="tp-account-get-connection-status" role="0.9.0"><primary sortas="tp_account_get_connection_status">tp_account_get_connection_status</primary></indexterm><programlisting><link linkend="TpConnectionStatus">TpConnectionStatus</link>  tp_account_get_connection_status    (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="TpConnectionStatusReason">TpConnectionStatusReason</link> *reason);</programlisting>
<para>
Gets the connection status and reason from <parameter>account</parameter>. The two values
are the same as the <link linkend="TpAccount--connection-status"><type>"connection-status"</type></link> and
<link linkend="TpAccount--connection-status-reason"><type>"connection-status-reason"</type></link> properties.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reason</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpConnectionStatusReason"><type>TpConnectionStatusReason</type></link> to fill, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the same as the <link linkend="TpAccount--connection-status"><type>"connection-status"</type></link> property

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-get-current-presence" role="function" condition="since:0.9.0">
<title>tp_account_get_current_presence ()</title>
<indexterm zone="tp-account-get-current-presence" role="0.9.0"><primary sortas="tp_account_get_current_presence">tp_account_get_current_presence</primary></indexterm><programlisting><link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link>  tp_account_get_current_presence
                                                        (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="gchar">gchar</link> **status,
                                                         <link linkend="gchar">gchar</link> **status_message);</programlisting>
<para>
Gets the current presence, status and status message of <parameter>account</parameter>. These
values are the same as the <link linkend="TpAccount--current-presence-type"><type>"current-presence-type"</type></link>,
<link linkend="TpAccount--current-status"><type>"current-status"</type></link> and <link linkend="TpAccount--current-status-message"><type>"current-status-message"</type></link> properties.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara> return location for the current status
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status_message</parameter>&#160;:</term>
<listitem><simpara> return location for the current status message
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the same as the <link linkend="TpAccount--current-presence-type"><type>"current-presence-type"</type></link> property

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-get-requested-presence" role="function" condition="since:0.9.0">
<title>tp_account_get_requested_presence ()</title>
<indexterm zone="tp-account-get-requested-presence" role="0.9.0"><primary sortas="tp_account_get_requested_presence">tp_account_get_requested_presence</primary></indexterm><programlisting><link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link>  tp_account_get_requested_presence
                                                        (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="gchar">gchar</link> **status,
                                                         <link linkend="gchar">gchar</link> **status_message);</programlisting>
<para>
Gets the requested presence, status and status message of <parameter>account</parameter>. These
values are the same as the <link linkend="TpAccount--requested-presence-type"><type>"requested-presence-type"</type></link>,
<link linkend="TpAccount--requested-status"><type>"requested-status"</type></link> and <link linkend="TpAccount--requested-status-message"><type>"requested-status-message"</type></link>
properties.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara> return location for the requested status
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status_message</parameter>&#160;:</term>
<listitem><simpara> return location for the requested status message
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the same as the <link linkend="TpAccount--requested-presence-type"><type>"requested-presence-type"</type></link> property

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-get-parameters" role="function" condition="since:0.9.0">
<title>tp_account_get_parameters ()</title>
<indexterm zone="tp-account-get-parameters" role="0.9.0"><primary sortas="tp_account_get_parameters">tp_account_get_parameters</primary></indexterm><programlisting>const <link linkend="GHashTable">GHashTable</link> *  tp_account_get_parameters           (<link linkend="TpAccount">TpAccount</link> *account);</programlisting>
<para>
<!-- --></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the hash table of parameters on <parameter>account</parameter>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-get-nickname" role="function" condition="since:0.9.0">
<title>tp_account_get_nickname ()</title>
<indexterm zone="tp-account-get-nickname" role="0.9.0"><primary sortas="tp_account_get_nickname">tp_account_get_nickname</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       tp_account_get_nickname             (<link linkend="TpAccount">TpAccount</link> *account);</programlisting>
<para>
<!-- --></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the same as the <link linkend="TpAccount--nickname"><type>"nickname"</type></link> property

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-set-nickname-async" role="function" condition="since:0.9.0">
<title>tp_account_set_nickname_async ()</title>
<indexterm zone="tp-account-set-nickname-async" role="0.9.0"><primary sortas="tp_account_set_nickname_async">tp_account_set_nickname_async</primary></indexterm><programlisting><link linkend="void">void</link>                tp_account_set_nickname_async       (<link linkend="TpAccount">TpAccount</link> *account,
                                                         const <link linkend="gchar">gchar</link> *nickname,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Requests an asynchronous change of the Nickname parameter on <parameter>account</parameter>. When
the operation is finished, <parameter>callback</parameter> will be called. You can then call
<link linkend="tp-account-set-nickname-finish"><function>tp_account_set_nickname_finish()</function></link> to get the result of the operation.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>nickname</parameter>&#160;:</term>
<listitem><simpara> a new nickname to set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> a callback to call when the request is satisfied
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> data to pass to <parameter>callback</parameter>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-set-nickname-finish" role="function" condition="since:0.9.0">
<title>tp_account_set_nickname_finish ()</title>
<indexterm zone="tp-account-set-nickname-finish" role="0.9.0"><primary sortas="tp_account_set_nickname_finish">tp_account_set_nickname_finish</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_account_set_nickname_finish      (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Finishes an async nickname change request on <parameter>account</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GAsyncResult"><type>GAsyncResult</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GError"><type>GError</type></link> to fill
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the operation was successful, otherwise <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-get-avatar-async" role="function" condition="since:0.9.0">
<title>tp_account_get_avatar_async ()</title>
<indexterm zone="tp-account-get-avatar-async" role="0.9.0"><primary sortas="tp_account_get_avatar_async">tp_account_get_avatar_async</primary></indexterm><programlisting><link linkend="void">void</link>                tp_account_get_avatar_async         (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Requests an asynchronous get of <parameter>account</parameter>'s avatar. When
the operation is finished, <parameter>callback</parameter> will be called. You can then call
<link linkend="tp-account-get-avatar-finish"><function>tp_account_get_avatar_finish()</function></link> to get the result of the operation.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> a callback to call when the request is satisfied
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> data to pass to <parameter>callback</parameter>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-get-avatar-finish" role="function" condition="since:0.9.0">
<title>tp_account_get_avatar_finish ()</title>
<indexterm zone="tp-account-get-avatar-finish" role="0.9.0"><primary sortas="tp_account_get_avatar_finish">tp_account_get_avatar_finish</primary></indexterm><programlisting>const <link linkend="GArray">GArray</link> *      tp_account_get_avatar_finish        (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Finishes an async get operation of <parameter>account</parameter>'s avatar.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GAsyncResult"><type>GAsyncResult</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GError"><type>GError</type></link> to fill
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="GArray"><type>GArray</type></link> of the account's avatar, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> on failure

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="TP-ACCOUNT-FEATURE-CORE--CAPS" role="macro" condition="since:0.9.0">
<title>TP_ACCOUNT_FEATURE_CORE</title>
<indexterm zone="TP-ACCOUNT-FEATURE-CORE--CAPS" role="0.9.0"><primary sortas="TP_ACCOUNT_FEATURE_CORE">TP_ACCOUNT_FEATURE_CORE</primary></indexterm><programlisting>#define             TP_ACCOUNT_FEATURE_CORE</programlisting>
<para>
Expands to a call to a function that returns a quark for the "core" feature
on a <link linkend="TpAccount"><type>TpAccount</type></link>.
</para>
<para>
When this feature is prepared, the basic properties of the Account have
been retrieved and are available for use, and change-notification has been
set up.
</para>
<para>
One can ask for a feature to be prepared using the
<link linkend="tp-account-prepare-async"><function>tp_account_prepare_async()</function></link> function, and waiting for it to callback.</para>
<para>
</para><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-is-prepared" role="function" condition="since:0.9.0">
<title>tp_account_is_prepared ()</title>
<indexterm zone="tp-account-is-prepared" role="0.9.0"><primary sortas="tp_account_is_prepared">tp_account_is_prepared</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_account_is_prepared              (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GQuark">GQuark</link> feature);</programlisting>
<para>
<!-- --></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>feature</parameter>&#160;:</term>
<listitem><simpara> a feature which is required
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if <parameter>feature</parameter> is ready on <parameter>account</parameter>, otherwise <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-prepare-async" role="function" condition="since:0.9.0">
<title>tp_account_prepare_async ()</title>
<indexterm zone="tp-account-prepare-async" role="0.9.0"><primary sortas="tp_account_prepare_async">tp_account_prepare_async</primary></indexterm><programlisting><link linkend="void">void</link>                tp_account_prepare_async            (<link linkend="TpAccount">TpAccount</link> *account,
                                                         const <link linkend="GQuark">GQuark</link> *features,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Requests an asynchronous preparation of <parameter>account</parameter> with the features specified
by <parameter>features</parameter>. When the operation is finished, <parameter>callback</parameter> will be called. You
can then call <link linkend="tp-account-prepare-finish"><function>tp_account_prepare_finish()</function></link> to get the result of the
operation.
</para>
<para>
If <parameter>features</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>, then <parameter>callback</parameter> will be called when the implied
<link linkend="TP-ACCOUNT-FEATURE-CORE--CAPS"><literal>TP_ACCOUNT_FEATURE_CORE</literal></link> feature is ready.
</para>
<para>
If <link linkend="NULL--CAPS"><literal>NULL</literal></link> is given to <parameter>callback</parameter>, then no callback will be called when the
operation is finished. Instead, it will simply set <parameter>features</parameter> on <parameter>manager</parameter>.
Note that if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>, then <parameter>user_data</parameter> must also be <link linkend="NULL--CAPS"><literal>NULL</literal></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>features</parameter>&#160;:</term>
<listitem><simpara> a 0-terminated list of features, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> a callback to call when the request is satisfied
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> data to pass to <parameter>callback</parameter>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-account-prepare-finish" role="function" condition="since:0.9.0">
<title>tp_account_prepare_finish ()</title>
<indexterm zone="tp-account-prepare-finish" role="0.9.0"><primary sortas="tp_account_prepare_finish">tp_account_prepare_finish</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_account_prepare_finish           (<link linkend="TpAccount">TpAccount</link> *account,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Finishes an async preparation of the account <parameter>account</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GAsyncResult"><type>GAsyncResult</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GError"><type>GError</type></link> to fill
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the preparation was successful, otherwise <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.9.0</para></refsect2>
<refsect2 id="tp-cli-account-callback-for-reconnect" role="function">
<title>tp_cli_account_callback_for_reconnect ()</title>
<indexterm zone="tp-cli-account-callback-for-reconnect"><primary sortas="tp_cli_account_callback_for_reconnect">tp_cli_account_callback_for_reconnect</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_account_callback_for_reconnect)
                                                        (<link linkend="TpAccount">TpAccount</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a Reconnect method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-account-call-reconnect" role="function">
<title>tp_cli_account_call_reconnect ()</title>
<indexterm zone="tp-cli-account-call-reconnect"><primary sortas="tp_cli_account_call_reconnect">tp_cli_account_call_reconnect</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_account_call_reconnect      (<link linkend="TpAccount">TpAccount</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-account-callback-for-reconnect">tp_cli_account_callback_for_reconnect</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a Reconnect method call.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;Re-connect this account. If the account is currently disconnected           and the requested presence is offline, or if the account           is not &lt;tp:member-ref&gt;Enabled&lt;/tp:member-ref&gt; or not           &lt;tp:member-ref&gt;Valid&lt;/tp:member-ref&gt;, this does nothing.&lt;/p&gt;          &lt;p&gt;If the account is disconnected and the requested presence is not           offline, this forces an attempt to connect with the requested           presence immediately.&lt;/p&gt;          &lt;p&gt;If the account is connecting or connected, this is equivalent to           remembering the current value of           &lt;tp:member-ref&gt;RequestedPresence&lt;/tp:member-ref&gt;, setting its value           to (OFFLINE, &amp;quot;offline&amp;quot;, &amp;quot;&amp;quot;), waiting for the change to take effect,           then setting its value to the value that was previously           remembered.&lt;/p&gt;          &lt;tp:rationale&gt;           &lt;p&gt;Clients desiring &amp;quot;instant apply&amp;quot; semantics for CM parameters MAY             call this method to achieve that.&lt;/p&gt;         &lt;/tp:rationale&gt;          &lt;p&gt;In particular, if the account&apos;s           &lt;tp:member-ref&gt;Connection&lt;/tp:member-ref&gt; is in the Connecting           state, calling this method causes the attempt to connect to be           aborted and re-tried.&lt;/p&gt;          &lt;tp:rationale&gt;           &lt;p&gt;This is necessary to ensure that the new parameters are             picked up.&lt;/p&gt;         &lt;/tp:rationale&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-account-callback-for-remove" role="function">
<title>tp_cli_account_callback_for_remove ()</title>
<indexterm zone="tp-cli-account-callback-for-remove"><primary sortas="tp_cli_account_callback_for_remove">tp_cli_account_callback_for_remove</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_account_callback_for_remove)
                                                        (<link linkend="TpAccount">TpAccount</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a Remove method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-account-call-remove" role="function">
<title>tp_cli_account_call_remove ()</title>
<indexterm zone="tp-cli-account-call-remove"><primary sortas="tp_cli_account_call_remove">tp_cli_account_call_remove</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_account_call_remove         (<link linkend="TpAccount">TpAccount</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-account-callback-for-remove">tp_cli_account_callback_for_remove</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a Remove method call.
</para>
<para>
Delete the account.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-account-callback-for-update-parameters" role="function">
<title>tp_cli_account_callback_for_update_parameters ()</title>
<indexterm zone="tp-cli-account-callback-for-update-parameters"><primary sortas="tp_cli_account_callback_for_update_parameters">tp_cli_account_callback_for_update_parameters</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_account_callback_for_update_parameters)
                                                        (<link linkend="TpAccount">TpAccount</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> **out_Reconnect_Required,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a UpdateParameters method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Reconnect_Required</parameter>&#160;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>: A list of the names of parameters with changes that will not take           effect until the account is reconnected (this may be empty, e.g. if           all the parameters are D-Bus properties or parameters for which the           account manager has specific support). User interfaces that           require &amp;quot;instant apply&amp;quot; semantics MAY call           &lt;tp:member-ref&gt;Reconnect&lt;/tp:member-ref&gt; in response to receiving           a non-empty list.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-account-call-update-parameters" role="function">
<title>tp_cli_account_call_update_parameters ()</title>
<indexterm zone="tp-cli-account-call-update-parameters"><primary sortas="tp_cli_account_call_update_parameters">tp_cli_account_call_update_parameters</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_account_call_update_parameters
                                                        (<link linkend="TpAccount">TpAccount</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GHashTable">GHashTable</link> *in_Set,
                                                         const <link linkend="gchar">gchar</link> **in_Unset,
                                                         <link linkend="tp-cli-account-callback-for-update-parameters">tp_cli_account_callback_for_update_parameters</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a UpdateParameters method call.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;Change the value of the &lt;tp:member-ref&gt;Parameters&lt;/tp:member-ref&gt;           property.&lt;/p&gt;          &lt;p&gt;If any of the changed parameters&apos;           &lt;tp:type&gt;Conn_Mgr_Param_Flags&lt;/tp:type&gt; include           &lt;code&gt;DBus_Property&lt;/code&gt;, the change will be applied to the           corresponding D-Bus Property on the active           &lt;tp:member-ref&gt;Connection&lt;/tp:member-ref&gt;, if there is one. Changes to           other parameters will not take effect until the next time the account           is disconnected and reconnected.&lt;/p&gt;          &lt;tp:rationale&gt;           &lt;p&gt;In general, reconnecting is a destructive operation that shouldn&apos;t             happen as a side-effect. In particular, migration tools that             twiddle the settings of all accounts shouldn&apos;t cause an automatic             disconnect and reconnect.&lt;/p&gt;         &lt;/tp:rationale&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Set</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: A mapping from parameter names to their values. These parameters           should be stored for future use.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Unset</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: A list of the names of parameters to be removed from the set of           stored values, allowing the default values to be used.           If the given parameters were not, in fact, stored, or even if they           do not exist at all, the account manager MUST accept this without           error.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-account-signal-callback-account-property-changed" role="function">
<title>tp_cli_account_signal_callback_account_property_changed ()</title>
<indexterm zone="tp-cli-account-signal-callback-account-property-changed"><primary sortas="tp_cli_account_signal_callback_account_property_changed">tp_cli_account_signal_callback_account_property_changed</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_account_signal_callback_account_property_changed)
                                                        (<link linkend="TpAccount">TpAccount</link> *proxy,
                                                         <link linkend="GHashTable">GHashTable</link> *arg_Properties,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal AccountPropertyChanged.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-account-connect-to-account-property-changed"><function>tp_cli_account_connect_to_account_property_changed()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Properties</parameter>&#160;:</term>
<listitem><simpara> A map from property names in this namespace (e.g.           &lt;tp:member-ref&gt;Nickname&lt;/tp:member-ref&gt;) to           values. Properties whose values have not changed SHOULD be           omitted, but this need not be done.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-account-connect-to-account-property-changed" role="function">
<title>tp_cli_account_connect_to_account_property_changed ()</title>
<indexterm zone="tp-cli-account-connect-to-account-property-changed"><primary sortas="tp_cli_account_connect_to_account_property_changed">tp_cli_account_connect_to_account_property_changed</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_account_connect_to_account_property_changed
                                                        (<link linkend="TpAccount">TpAccount</link> *proxy,
                                                         <link linkend="tp-cli-account-signal-callback-account-property-changed">tp_cli_account_signal_callback_account_property_changed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal AccountPropertyChanged.
</para>
<para>
The values of one or more properties on this interface (that do not         specify that this signal does not apply to them) may have changed.         This does not cover properties of other interfaces, which must         provide their own change notification if appropriate.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpAccount"><type>TpAccount</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-account-signal-callback-removed" role="function">
<title>tp_cli_account_signal_callback_removed ()</title>
<indexterm zone="tp-cli-account-signal-callback-removed"><primary sortas="tp_cli_account_signal_callback_removed">tp_cli_account_signal_callback_removed</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_account_signal_callback_removed)
                                                        (<link linkend="TpAccount">TpAccount</link> *proxy,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal Removed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-account-connect-to-removed"><function>tp_cli_account_connect_to_removed()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-account-connect-to-removed" role="function">
<title>tp_cli_account_connect_to_removed ()</title>
<indexterm zone="tp-cli-account-connect-to-removed"><primary sortas="tp_cli_account_connect_to_removed">tp_cli_account_connect_to_removed</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_account_connect_to_removed
                                                        (<link linkend="TpAccount">TpAccount</link> *proxy,
                                                         <link linkend="tp-cli-account-signal-callback-removed">tp_cli_account_signal_callback_removed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal Removed.
</para>
<para>
This account has been removed.          &lt;tp:rationale&gt;           This is redundant with &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.AccountManager&quot;&gt;AccountRemoved&lt;/tp:dbus-ref&gt;,           but it&apos;s still worth having,           to avoid having to bind to AccountManager.AccountRemoved to tell           you whether your Account is valid — ideally, an account-editing UI           should only care about a single Account.         &lt;/tp:rationale&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpAccount"><type>TpAccount</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-account-interface-avatar-signal-callback-avatar-changed" role="function">
<title>tp_cli_account_interface_avatar_signal_callback_avatar_changed ()</title>
<indexterm zone="tp-cli-account-interface-avatar-signal-callback-avatar-changed"><primary sortas="tp_cli_account_interface_avatar_signal_callback_avatar_changed">tp_cli_account_interface_avatar_signal_callback_avatar_changed</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_account_interface_avatar_signal_callback_avatar_changed)
                                                        (<link linkend="TpAccount">TpAccount</link> *proxy,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal AvatarChanged.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-account-interface-avatar-connect-to-avatar-changed"><function>tp_cli_account_interface_avatar_connect_to_avatar_changed()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-account-interface-avatar-connect-to-avatar-changed" role="function">
<title>tp_cli_account_interface_avatar_connect_to_avatar_changed ()</title>
<indexterm zone="tp-cli-account-interface-avatar-connect-to-avatar-changed"><primary sortas="tp_cli_account_interface_avatar_connect_to_avatar_changed">tp_cli_account_interface_avatar_connect_to_avatar_changed</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_account_interface_avatar_connect_to_avatar_changed
                                                        (<link linkend="TpAccount">TpAccount</link> *proxy,
                                                         <link linkend="tp-cli-account-interface-avatar-signal-callback-avatar-changed">tp_cli_account_interface_avatar_signal_callback_avatar_changed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal AvatarChanged.
</para>
<para>
Emitted when the Avatar property changes.          &lt;tp:rationale&gt;The avatar itself is deliberately not included in this           signal, to reduce bus traffic in the (likely common) case where no           running application cares about the user&apos;s own avatar.&lt;/tp:rationale&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpAccount"><type>TpAccount</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>
<refsect1 id="telepathy-glib-account.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="TpAccount--connect-automatically" role="property"><title>The <literal>&quot;connect-automatically&quot;</literal> property</title>
<indexterm zone="TpAccount--connect-automatically" role="0.9.0"><primary sortas="TpAccount:connect-automatically">TpAccount:connect-automatically</primary></indexterm><programlisting>  &quot;connect-automatically&quot;    <link linkend="gboolean">gboolean</link>              : Read</programlisting>
<para>
Whether the account should connect automatically or not. To change this
property, use <link linkend="tp-account-set-connect-automatically-async"><function>tp_account_set_connect_automatically_async()</function></link>.
</para>
<para>
One can receive change notifications on this property by connecting
to the <link linkend="GObject-notify"><type>"notify"</type></link> signal and using this property as the signal
detail.
</para>
<para>
This is not guaranteed to have been retrieved until
<link linkend="tp-account-prepare-async"><function>tp_account_prepare_async()</function></link> has finished; until then, the value is
<link linkend="FALSE--CAPS"><literal>FALSE</literal></link>.</para>
<para>
</para><para>Default value: FALSE</para>
<para>Since 0.9.0</para>
</refsect2>
<refsect2 id="TpAccount--connection" role="property"><title>The <literal>&quot;connection&quot;</literal> property</title>
<indexterm zone="TpAccount--connection" role="0.9.0"><primary sortas="TpAccount:connection">TpAccount:connection</primary></indexterm><programlisting>  &quot;connection&quot;               <link linkend="TpConnection">TpConnection</link>*         : Read</programlisting>
<para>
The connection of the account, or NULL if account is offline.
It is not guaranteed that the returned <link linkend="TpConnection"><type>TpConnection</type></link> object is ready.
</para>
<para>
One can receive change notifications on this property by connecting
to the <link linkend="GObject-notify"><type>"notify"</type></link> signal and using this property as the signal
detail.
</para>
<para>
This is not guaranteed to have been retrieved until
<link linkend="tp-account-prepare-async"><function>tp_account_prepare_async()</function></link> has finished; until then, the value is
<link linkend="NULL--CAPS"><literal>NULL</literal></link>.</para>
<para>
</para><para>Since 0.9.0</para>
</refsect2>
<refsect2 id="TpAccount--connection-manager" role="property"><title>The <literal>&quot;connection-manager&quot;</literal> property</title>
<indexterm zone="TpAccount--connection-manager" role="0.9.0"><primary sortas="TpAccount:connection-manager">TpAccount:connection-manager</primary></indexterm><programlisting>  &quot;connection-manager&quot;       <link linkend="gchar">gchar</link>*                : Read</programlisting>
<para>
The account's connection manager name.</para>
<para>
</para><para>Default value: NULL</para>
<para>Since 0.9.0</para>
</refsect2>
<refsect2 id="TpAccount--connection-status" role="property"><title>The <literal>&quot;connection-status&quot;</literal> property</title>
<indexterm zone="TpAccount--connection-status" role="0.9.0"><primary sortas="TpAccount:connection-status">TpAccount:connection-status</primary></indexterm><programlisting>  &quot;connection-status&quot;        <link linkend="guint">guint</link>                 : Read</programlisting>
<para>
The account's connection status type.
</para>
<para>
One can receive change notifications on this property by connecting
to the <link linkend="GObject-notify"><type>"notify"</type></link> signal and using this property as the signal
detail.
</para>
<para>
This is not guaranteed to have been retrieved until
<link linkend="tp-account-prepare-async"><function>tp_account_prepare_async()</function></link> has finished; until then, the value is
<link linkend="TP-CONNECTION-STATUS-DISCONNECTED--CAPS"><literal>TP_CONNECTION_STATUS_DISCONNECTED</literal></link>.</para>
<para>
</para><para>Allowed values: &lt;= 3</para>
<para>Default value: 2</para>
<para>Since 0.9.0</para>
</refsect2>
<refsect2 id="TpAccount--connection-status-reason" role="property"><title>The <literal>&quot;connection-status-reason&quot;</literal> property</title>
<indexterm zone="TpAccount--connection-status-reason" role="0.9.0"><primary sortas="TpAccount:connection-status-reason">TpAccount:connection-status-reason</primary></indexterm><programlisting>  &quot;connection-status-reason&quot; <link linkend="guint">guint</link>                 : Read</programlisting>
<para>
The account's connection status reason.
</para>
<para>
One can receive change notifications on this property by connecting
to the <link linkend="GObject-notify"><type>"notify"</type></link> signal and using this property as the signal
detail.
</para>
<para>
This is not guaranteed to have been retrieved until
<link linkend="tp-account-prepare-async"><function>tp_account_prepare_async()</function></link> has finished; until then, the value is
<link linkend="TP-CONNECTION-STATUS-REASON-NONE-SPECIFIED--CAPS"><literal>TP_CONNECTION_STATUS_REASON_NONE_SPECIFIED</literal></link>.</para>
<para>
</para><para>Allowed values: &lt;= 14</para>
<para>Default value: 0</para>
<para>Since 0.9.0</para>
</refsect2>
<refsect2 id="TpAccount--current-presence-type" role="property"><title>The <literal>&quot;current-presence-type&quot;</literal> property</title>
<indexterm zone="TpAccount--current-presence-type" role="0.9.0"><primary sortas="TpAccount:current-presence-type">TpAccount:current-presence-type</primary></indexterm><programlisting>  &quot;current-presence-type&quot;    <link linkend="guint">guint</link>                 : Read</programlisting>
<para>
The account connection's current presence type.
</para>
<para>
One can receive change notifications on this property by connecting
to the <link linkend="GObject-notify"><type>"notify"</type></link> signal and using this property as the signal
detail.
</para>
<para>
This is not guaranteed to have been retrieved until
<link linkend="tp-account-prepare-async"><function>tp_account_prepare_async()</function></link> has finished; until then, the value is
<link linkend="TP-CONNECTION-PRESENCE-TYPE-UNSET--CAPS"><literal>TP_CONNECTION_PRESENCE_TYPE_UNSET</literal></link>.</para>
<para>
</para><para>Allowed values: &lt;= 9</para>
<para>Default value: 0</para>
<para>Since 0.9.0</para>
</refsect2>
<refsect2 id="TpAccount--current-status" role="property"><title>The <literal>&quot;current-status&quot;</literal> property</title>
<indexterm zone="TpAccount--current-status" role="0.9.0"><primary sortas="TpAccount:current-status">TpAccount:current-status</primary></indexterm><programlisting>  &quot;current-status&quot;           <link linkend="gchar">gchar</link>*                : Read</programlisting>
<para>
The current Status string of the account.
</para>
<para>
One can receive change notifications on this property by connecting
to the <link linkend="GObject-notify"><type>"notify"</type></link> signal and using this property as the signal
detail.
</para>
<para>
This is not guaranteed to have been retrieved until
<link linkend="tp-account-prepare-async"><function>tp_account_prepare_async()</function></link> has finished; until then, the value is
<link linkend="NULL--CAPS"><literal>NULL</literal></link>.</para>
<para>
</para><para>Default value: NULL</para>
<para>Since 0.9.0</para>
</refsect2>
<refsect2 id="TpAccount--current-status-message" role="property"><title>The <literal>&quot;current-status-message&quot;</literal> property</title>
<indexterm zone="TpAccount--current-status-message"><primary sortas="TpAccount:current-status-message">TpAccount:current-status-message</primary></indexterm><programlisting>  &quot;current-status-message&quot;   <link linkend="gchar">gchar</link>*                : Read</programlisting>
<para>The Status message string of the account.</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="TpAccount--display-name" role="property"><title>The <literal>&quot;display-name&quot;</literal> property</title>
<indexterm zone="TpAccount--display-name" role="0.9.0"><primary sortas="TpAccount:display-name">TpAccount:display-name</primary></indexterm><programlisting>  &quot;display-name&quot;             <link linkend="gchar">gchar</link>*                : Read</programlisting>
<para>
The account's display name, from the DisplayName property.
</para>
<para>
One can receive change notifications on this property by connecting
to the <link linkend="GObject-notify"><type>"notify"</type></link> signal and using this property as the signal
detail.
</para>
<para>
This is not guaranteed to have been retrieved until
<link linkend="tp-account-prepare-async"><function>tp_account_prepare_async()</function></link> has finished; until then, the value is
<link linkend="NULL--CAPS"><literal>NULL</literal></link>.</para>
<para>
</para><para>Default value: NULL</para>
<para>Since 0.9.0</para>
</refsect2>
<refsect2 id="TpAccount--enabled" role="property"><title>The <literal>&quot;enabled&quot;</literal> property</title>
<indexterm zone="TpAccount--enabled" role="0.9.0"><primary sortas="TpAccount:enabled">TpAccount:enabled</primary></indexterm><programlisting>  &quot;enabled&quot;                  <link linkend="gboolean">gboolean</link>              : Read</programlisting>
<para>
Whether this account is enabled or not.
</para>
<para>
One can receive change notifications on this property by connecting
to the <link linkend="GObject-notify"><type>"notify"</type></link> signal and using this property as the signal
detail.
</para>
<para>
This is not guaranteed to have been retrieved until
<link linkend="tp-account-prepare-async"><function>tp_account_prepare_async()</function></link> has finished; until then, the value is FALSE.</para>
<para>
</para><para>Default value: FALSE</para>
<para>Since 0.9.0</para>
</refsect2>
<refsect2 id="TpAccount--has-been-online" role="property"><title>The <literal>&quot;has-been-online&quot;</literal> property</title>
<indexterm zone="TpAccount--has-been-online" role="0.9.0"><primary sortas="TpAccount:has-been-online">TpAccount:has-been-online</primary></indexterm><programlisting>  &quot;has-been-online&quot;          <link linkend="gboolean">gboolean</link>              : Read</programlisting>
<para>
Whether this account has been online or not.
</para>
<para>
One can receive change notifications on this property by connecting
to the <link linkend="GObject-notify"><type>"notify"</type></link> signal and using this property as the signal
detail.
</para>
<para>
This is not guaranteed to have been retrieved until
<link linkend="tp-account-prepare-async"><function>tp_account_prepare_async()</function></link> has finished; until then, the value is
<link linkend="FALSE--CAPS"><literal>FALSE</literal></link>.</para>
<para>
</para><para>Default value: FALSE</para>
<para>Since 0.9.0</para>
</refsect2>
<refsect2 id="TpAccount--icon-name" role="property"><title>The <literal>&quot;icon-name&quot;</literal> property</title>
<indexterm zone="TpAccount--icon-name" role="0.9.0"><primary sortas="TpAccount:icon-name">TpAccount:icon-name</primary></indexterm><programlisting>  &quot;icon-name&quot;                <link linkend="gchar">gchar</link>*                : Read</programlisting>
<para>
The account's icon name. To change this propery, use
<link linkend="tp-account-set-icon-name-async"><function>tp_account_set_icon_name_async()</function></link>.
</para>
<para>
One can receive change notifications on this property by connecting
to the <link linkend="GObject-notify"><type>"notify"</type></link> signal and using this property as the signal
detail.
</para>
<para>
This is not guaranteed to have been retrieved until
<link linkend="tp-account-prepare-async"><function>tp_account_prepare_async()</function></link> has finished; until then, the value is
<link linkend="NULL--CAPS"><literal>NULL</literal></link>.</para>
<para>
</para><para>Default value: NULL</para>
<para>Since 0.9.0</para>
</refsect2>
<refsect2 id="TpAccount--nickname" role="property"><title>The <literal>&quot;nickname&quot;</literal> property</title>
<indexterm zone="TpAccount--nickname" role="0.9.0"><primary sortas="TpAccount:nickname">TpAccount:nickname</primary></indexterm><programlisting>  &quot;nickname&quot;                 <link linkend="gchar">gchar</link>*                : Read</programlisting>
<para>
The nickname that should be set for the user on this account.
</para>
<para>
One can receive change notifications on this property by connecting
to the <link linkend="GObject-notify"><type>"notify"</type></link> signal and using this property as the signal
detail.
</para>
<para>
This is not guaranteed to have been retrieved until
<link linkend="tp-account-prepare-async"><function>tp_account_prepare_async()</function></link> has finished; until then, the value is
<link linkend="NULL--CAPS"><literal>NULL</literal></link>.</para>
<para>
</para><para>Default value: NULL</para>
<para>Since 0.9.0</para>
</refsect2>
<refsect2 id="TpAccount--protocol" role="property"><title>The <literal>&quot;protocol&quot;</literal> property</title>
<indexterm zone="TpAccount--protocol" role="0.9.0"><primary sortas="TpAccount:protocol">TpAccount:protocol</primary></indexterm><programlisting>  &quot;protocol&quot;                 <link linkend="gchar">gchar</link>*                : Read</programlisting>
<para>
The account's protocol name.</para>
<para>
</para><para>Default value: NULL</para>
<para>Since 0.9.0</para>
</refsect2>
<refsect2 id="TpAccount--requested-presence-type" role="property"><title>The <literal>&quot;requested-presence-type&quot;</literal> property</title>
<indexterm zone="TpAccount--requested-presence-type" role="0.9.0"><primary sortas="TpAccount:requested-presence-type">TpAccount:requested-presence-type</primary></indexterm><programlisting>  &quot;requested-presence-type&quot;  <link linkend="guint">guint</link>                 : Read</programlisting>
<para>
The account's requested presence type.
</para>
<para>
One can receive change notifications on this property by connecting
to the <link linkend="GObject-notify"><type>"notify"</type></link> signal and using this property as the signal
detail.</para>
<para>
</para><para>Allowed values: &lt;= 9</para>
<para>Default value: 0</para>
<para>Since 0.9.0</para>
</refsect2>
<refsect2 id="TpAccount--requested-status" role="property"><title>The <literal>&quot;requested-status&quot;</literal> property</title>
<indexterm zone="TpAccount--requested-status" role="0.9.0"><primary sortas="TpAccount:requested-status">TpAccount:requested-status</primary></indexterm><programlisting>  &quot;requested-status&quot;         <link linkend="gchar">gchar</link>*                : Read</programlisting>
<para>
The requested Status string of the account.
</para>
<para>
One can receive change notifications on this property by connecting
to the <link linkend="GObject-notify"><type>"notify"</type></link> signal and using this property as the signal
detail.</para>
<para>
</para><para>Default value: NULL</para>
<para>Since 0.9.0</para>
</refsect2>
<refsect2 id="TpAccount--requested-status-message" role="property"><title>The <literal>&quot;requested-status-message&quot;</literal> property</title>
<indexterm zone="TpAccount--requested-status-message" role="0.9.0"><primary sortas="TpAccount:requested-status-message">TpAccount:requested-status-message</primary></indexterm><programlisting>  &quot;requested-status-message&quot; <link linkend="gchar">gchar</link>*                : Read</programlisting>
<para>
The requested status message message of the account.
</para>
<para>
One can receive change notifications on this property by connecting
to the <link linkend="GObject-notify"><type>"notify"</type></link> signal and using this property as the signal
detail.</para>
<para>
</para><para>Default value: NULL</para>
<para>Since 0.9.0</para>
</refsect2>
<refsect2 id="TpAccount--valid" role="property"><title>The <literal>&quot;valid&quot;</literal> property</title>
<indexterm zone="TpAccount--valid" role="0.9.0"><primary sortas="TpAccount:valid">TpAccount:valid</primary></indexterm><programlisting>  &quot;valid&quot;                    <link linkend="gboolean">gboolean</link>              : Read</programlisting>
<para>
Whether this account is valid.
</para>
<para>
One can receive change notifications on this property by connecting
to the <link linkend="GObject-notify"><type>"notify"</type></link> signal and using this property as the signal
detail.
</para>
<para>
This is not guaranteed to have been retrieved until
<link linkend="tp-account-prepare-async"><function>tp_account_prepare_async()</function></link> has finished; until then, the value is
<link linkend="FALSE--CAPS"><literal>FALSE</literal></link>.</para>
<para>
</para><para>Default value: FALSE</para>
<para>Since 0.9.0</para>
</refsect2>
</refsect1>

<refsect1 id="telepathy-glib-account.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="TpAccount-presence-changed" role="signal"><title>The <literal>&quot;presence-changed&quot;</literal> signal</title>
<indexterm zone="TpAccount-presence-changed" role="0.9.0"><primary sortas="TpAccount::presence-changed">TpAccount::presence-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpAccount">TpAccount</link> *account,
                                                        <link linkend="guint">guint</link>      presence,
                                                        <link linkend="gchar">gchar</link>     *status,
                                                        <link linkend="gchar">gchar</link>     *status_message,
                                                        <link linkend="gpointer">gpointer</link>   user_data)           : Run Last</programlisting>
<para>
Emitted when the presence of the account changes.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>presence</parameter>&#160;:</term>
<listitem><simpara> the new presence
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara> the new presence status
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status_message</parameter>&#160;:</term>
<listitem><simpara> the new presence status message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist><para>Since 0.9.0</para></refsect2><refsect2 id="TpAccount-status-changed" role="signal"><title>The <literal>&quot;status-changed&quot;</literal> signal</title>
<indexterm zone="TpAccount-status-changed" role="0.9.0"><primary sortas="TpAccount::status-changed">TpAccount::status-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpAccount">TpAccount</link>  *account,
                                                        <link linkend="guint">guint</link>       old_status,
                                                        <link linkend="guint">guint</link>       new_status,
                                                        <link linkend="guint">guint</link>       reason,
                                                        <link linkend="gchar">gchar</link>      *dbus_error_name,
                                                        <link linkend="GHashTable">GHashTable</link> *details,
                                                        <link linkend="gpointer">gpointer</link>    user_data)            : Run Last</programlisting>
<para>
Emitted when the connection status on the account changes.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpAccount"><type>TpAccount</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>old_status</parameter>&#160;:</term>
<listitem><simpara> old connection status
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_status</parameter>&#160;:</term>
<listitem><simpara> new connection status
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reason</parameter>&#160;:</term>
<listitem><simpara> the reason for the status change
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dbus_error_name</parameter>&#160;:</term>
<listitem><simpara> currently unused, but for exposing the dbus error name
                  on a connection error in the future
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>details</parameter>&#160;:</term>
<listitem><simpara> currently unused, but for exposing the error details
          on a connection error in the future
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist><para>Since 0.9.0</para></refsect2>
</refsect1>


<refsect1 id="telepathy-glib-account.see-also">
<title>See Also</title>
#TpAccountManager
</refsect1>

</refentry>
