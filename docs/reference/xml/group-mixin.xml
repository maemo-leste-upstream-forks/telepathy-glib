<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-TpGroupMixin">
<refmeta>
<refentrytitle role="top_of_page" id="telepathy-glib-TpGroupMixin.top_of_page">TpGroupMixin</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>TpGroupMixin</refname>
<refpurpose>a mixin implementation of the groups interface</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv id="telepathy-glib-TpGroupMixin.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;telepathy-glib/group-mixin.h&gt;

<link linkend="gboolean">gboolean</link>            (<link linkend="TpGroupMixinAddMemberFunc">*TpGroupMixinAddMemberFunc</link>)        (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="TpHandle">TpHandle</link> handle,
                                                         const <link linkend="gchar">gchar</link> *message,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            (<link linkend="TpGroupMixinRemMemberFunc">*TpGroupMixinRemMemberFunc</link>)        (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="TpHandle">TpHandle</link> handle,
                                                         const <link linkend="gchar">gchar</link> *message,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            (<link linkend="TpGroupMixinRemMemberWithReasonFunc">*TpGroupMixinRemMemberWithReasonFunc</link>)
                                                        (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="TpHandle">TpHandle</link> handle,
                                                         const <link linkend="gchar">gchar</link> *message,
                                                         <link linkend="guint">guint</link> reason,
                                                         <link linkend="GError">GError</link> **error);
                    <link linkend="TpGroupMixin">TpGroupMixin</link>;
                    <link linkend="TpGroupMixinClass">TpGroupMixinClass</link>;
<link linkend="void">void</link>                <link linkend="tp-group-mixin-class-init">tp_group_mixin_class_init</link>           (<link linkend="GObjectClass">GObjectClass</link> *obj_cls,
                                                         <link linkend="glong">glong</link> offset,
                                                         <link linkend="TpGroupMixinAddMemberFunc">TpGroupMixinAddMemberFunc</link> add_func,
                                                         <link linkend="TpGroupMixinRemMemberFunc">TpGroupMixinRemMemberFunc</link> rem_func);
<link linkend="void">void</link>                <link linkend="tp-group-mixin-class-set-remove-with-reason-func">tp_group_mixin_class_set_remove_with_reason_func</link>
                                                        (<link linkend="GObjectClass">GObjectClass</link> *cls,
                                                         <link linkend="TpGroupMixinRemMemberWithReasonFunc">TpGroupMixinRemMemberWithReasonFunc</link> func);
<link linkend="void">void</link>                <link linkend="tp-group-mixin-init">tp_group_mixin_init</link>                 (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="glong">glong</link> offset,
                                                         <link linkend="TpHandleRepoIface">TpHandleRepoIface</link> *handle_repo,
                                                         <link linkend="TpHandle">TpHandle</link> self_handle);
<link linkend="void">void</link>                <link linkend="tp-group-mixin-finalize">tp_group_mixin_finalize</link>             (<link linkend="GObject">GObject</link> *obj);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-group-mixin-get-self-handle">tp_group_mixin_get_self_handle</link>      (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="guint">guint</link> *ret,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-group-mixin-get-group-flags">tp_group_mixin_get_group_flags</link>      (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="guint">guint</link> *ret,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-group-mixin-add-members">tp_group_mixin_add_members</link>          (<link linkend="GObject">GObject</link> *obj,
                                                         const <link linkend="GArray">GArray</link> *contacts,
                                                         const <link linkend="gchar">gchar</link> *message,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-group-mixin-remove-members">tp_group_mixin_remove_members</link>       (<link linkend="GObject">GObject</link> *obj,
                                                         const <link linkend="GArray">GArray</link> *contacts,
                                                         const <link linkend="gchar">gchar</link> *message,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-group-mixin-remove-members-with-reason">tp_group_mixin_remove_members_with_reason</link>
                                                        (<link linkend="GObject">GObject</link> *obj,
                                                         const <link linkend="GArray">GArray</link> *contacts,
                                                         const <link linkend="gchar">gchar</link> *message,
                                                         <link linkend="guint">guint</link> reason,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-group-mixin-get-members">tp_group_mixin_get_members</link>          (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="GArray">GArray</link> **ret,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-group-mixin-get-local-pending-members">tp_group_mixin_get_local_pending_members</link>
                                                        (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="GArray">GArray</link> **ret,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-group-mixin-get-local-pending-members-with-info">tp_group_mixin_get_local_pending_members_with_info</link>
                                                        (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="GPtrArray">GPtrArray</link> **ret,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-group-mixin-get-remote-pending-members">tp_group_mixin_get_remote_pending_members</link>
                                                        (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="GArray">GArray</link> **ret,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-group-mixin-get-all-members">tp_group_mixin_get_all_members</link>      (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="GArray">GArray</link> **members,
                                                         <link linkend="GArray">GArray</link> **local_pending,
                                                         <link linkend="GArray">GArray</link> **remote_pending,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-group-mixin-get-handle-owners">tp_group_mixin_get_handle_owners</link>    (<link linkend="GObject">GObject</link> *obj,
                                                         const <link linkend="GArray">GArray</link> *handles,
                                                         <link linkend="GArray">GArray</link> **ret,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                <link linkend="tp-group-mixin-change-flags">tp_group_mixin_change_flags</link>         (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="TpChannelGroupFlags">TpChannelGroupFlags</link> add,
                                                         <link linkend="TpChannelGroupFlags">TpChannelGroupFlags</link> del);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-group-mixin-change-members">tp_group_mixin_change_members</link>       (<link linkend="GObject">GObject</link> *obj,
                                                         const <link linkend="gchar">gchar</link> *message,
                                                         <link linkend="TpIntSet">TpIntSet</link> *add,
                                                         <link linkend="TpIntSet">TpIntSet</link> *del,
                                                         <link linkend="TpIntSet">TpIntSet</link> *add_local_pending,
                                                         <link linkend="TpIntSet">TpIntSet</link> *add_remote_pending,
                                                         <link linkend="TpHandle">TpHandle</link> actor,
                                                         <link linkend="TpChannelGroupChangeReason">TpChannelGroupChangeReason</link> reason);
<link linkend="void">void</link>                <link linkend="tp-group-mixin-add-handle-owner">tp_group_mixin_add_handle_owner</link>     (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="TpHandle">TpHandle</link> local_handle,
                                                         <link linkend="TpHandle">TpHandle</link> owner_handle);
<link linkend="void">void</link>                <link linkend="tp-group-mixin-iface-init">tp_group_mixin_iface_init</link>           (<link linkend="gpointer">gpointer</link> g_iface,
                                                         <link linkend="gpointer">gpointer</link> iface_data);
<link linkend="void">void</link>                <link linkend="tp-external-group-mixin-iface-init">tp_external_group_mixin_iface_init</link>  (<link linkend="gpointer">gpointer</link> g_iface,
                                                         <link linkend="gpointer">gpointer</link> iface_data);
<link linkend="void">void</link>                <link linkend="tp-external-group-mixin-init">tp_external_group_mixin_init</link>        (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="GObject">GObject</link> *obj_with_mixin);
<link linkend="void">void</link>                <link linkend="tp-external-group-mixin-finalize">tp_external_group_mixin_finalize</link>    (<link linkend="GObject">GObject</link> *obj);
</synopsis>
</refsynopsisdiv>









<refsect1 id="telepathy-glib-TpGroupMixin.description" role="desc">
<title role="desc.title">Description</title>
<para>
This mixin can be added to a channel GObject class to implement the
groups interface in a general way.
</para>
<para>
To use the group mixin, include a <link linkend="TpGroupMixinClass"><type>TpGroupMixinClass</type></link> somewhere in your
class structure and a <link linkend="TpGroupMixin"><type>TpGroupMixin</type></link> somewhere in your instance structure,
and call <link linkend="tp-group-mixin-class-init"><function>tp_group_mixin_class_init()</function></link> from your class_init function,
<link linkend="tp-group-mixin-init"><function>tp_group_mixin_init()</function></link> from your init function or constructor, and
<link linkend="tp-group-mixin-finalize"><function>tp_group_mixin_finalize()</function></link> from your dispose or finalize function.
</para>
<para>
To use the group mixin as the implementation of
<link linkend="TpSvcChannelInterfaceGroup"><type>TpSvcChannelInterfaceGroup</type></link>, call
<literal>G_IMPLEMENT_INTERFACE (TP_TYPE_SVC_CHANNEL_INTERFACE_GROUP,
tp_group_mixin_iface_init)</literal> in the fourth argument to
<literal>G_DEFINE_TYPE_WITH_CODE</literal>.
</para>
<para>
Since 0.5.13 you can also implement the group interface by forwarding all
group operations to the group mixin of an associated object (mainly useful
for Tubes channels). To do this, call <link linkend="tp-external-group-mixin-init"><function>tp_external_group_mixin_init()</function></link>
in the constructor after the associated object has been set,
<link linkend="tp-external-group-mixin-finalize"><function>tp_external_group_mixin_finalize()</function></link> in the dispose or finalize function, and
<literal>G_IMPLEMENT_INTERFACE (TP_TYPE_SVC_CHANNEL_INTERFACE_GROUP,
tp_external_group_mixin_iface_init)</literal> in the fourth argument to
<literal>G_DEFINE_TYPE_WITH_CODE</literal>.</para>
<para>

</para>
</refsect1>

<refsect1 id="telepathy-glib-TpGroupMixin.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="TpGroupMixinAddMemberFunc" role="function">
<title>TpGroupMixinAddMemberFunc ()</title>
<indexterm zone="TpGroupMixinAddMemberFunc"><primary>TpGroupMixinAddMemberFunc</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            (*TpGroupMixinAddMemberFunc)        (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="TpHandle">TpHandle</link> handle,
                                                         const <link linkend="gchar">gchar</link> *message,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Signature of the callback used to add a member to the group.
This should perform the necessary operations in the underlying IM protocol
to cause the member to be added.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing the group interface with this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handle</parameter>&nbsp;:</term>
<listitem><simpara> The handle of the contact to be added
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&nbsp;:</term>
<listitem><simpara> A message to be sent if the protocol supports it
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> Used to return a Telepathy D-Bus error if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> is returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> on success, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TpGroupMixinRemMemberFunc" role="function">
<title>TpGroupMixinRemMemberFunc ()</title>
<indexterm zone="TpGroupMixinRemMemberFunc"><primary>TpGroupMixinRemMemberFunc</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            (*TpGroupMixinRemMemberFunc)        (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="TpHandle">TpHandle</link> handle,
                                                         const <link linkend="gchar">gchar</link> *message,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Signature of the callback used to remove a member from the group.
This should perform the necessary operations in the underlying IM protocol
to cause the member to be removed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing the group interface with this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handle</parameter>&nbsp;:</term>
<listitem><simpara> The handle of the contact to be removed
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&nbsp;:</term>
<listitem><simpara> A message to be sent if the protocol supports it
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> Used to return a Telepathy D-Bus error if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> is returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> on success, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TpGroupMixinRemMemberWithReasonFunc" role="function">
<title>TpGroupMixinRemMemberWithReasonFunc ()</title>
<indexterm zone="TpGroupMixinRemMemberWithReasonFunc"><primary>TpGroupMixinRemMemberWithReasonFunc</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            (*TpGroupMixinRemMemberWithReasonFunc)
                                                        (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="TpHandle">TpHandle</link> handle,
                                                         const <link linkend="gchar">gchar</link> *message,
                                                         <link linkend="guint">guint</link> reason,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Signature of the callback used to remove a member from the group.
This should perform the necessary operations in the underlying IM protocol
to cause the member to be removed.
</para>
<para>
Set this with <link linkend="tp-group-mixin-class-set-remove-with-reason-func"><function>tp_group_mixin_class_set_remove_with_reason_func()</function></link>, .</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing the group interface with this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handle</parameter>&nbsp;:</term>
<listitem><simpara> The handle of the contact to be removed
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&nbsp;:</term>
<listitem><simpara> A message to be sent if the protocol supports it
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reason</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpChannelGroupChangeReason"><type>TpChannelGroupChangeReason</type></link> indicating the reason
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> Used to return a Telepathy D-Bus error if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> is returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> on success, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TpGroupMixin" role="struct">
<title>TpGroupMixin</title>
<indexterm zone="TpGroupMixin"><primary>TpGroupMixin</primary></indexterm><programlisting>typedef struct {
  TpHandleRepoIface *handle_repo;
  TpHandle self_handle;

  TpChannelGroupFlags group_flags;

  TpHandleSet *members;
  TpHandleSet *local_pending;
  TpHandleSet *remote_pending;

  TpGroupMixinPrivate *priv;
} TpGroupMixin;
</programlisting>
<para>
Structure representing the group mixin as used in a particular class.
To be placed in the implementation's instance structure.
</para>
<para>
All fields should be considered read-only.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="TpHandleRepoIface">TpHandleRepoIface</link>&nbsp;*<structfield>handle_repo</structfield>;</term>
<listitem><simpara> The connection's contact handle repository
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpHandle">TpHandle</link>&nbsp;<structfield>self_handle</structfield>;</term>
<listitem><simpara> The local user's handle within this group, or 0 if none.
 Set using (FIXME: how do we do self-renaming?)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpChannelGroupFlags">TpChannelGroupFlags</link>&nbsp;<structfield>group_flags</structfield>;</term>
<listitem><simpara> This group's flags. Set using <link linkend="tp-group-mixin-change-flags"><function>tp_group_mixin_change_flags()</function></link>;
 defaults to 0.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpHandleSet">TpHandleSet</link>&nbsp;*<structfield>members</structfield>;</term>
<listitem><simpara> The members of the group. Alter using
 <link linkend="tp-group-mixin-change-members"><function>tp_group_mixin_change_members()</function></link>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpHandleSet">TpHandleSet</link>&nbsp;*<structfield>local_pending</structfield>;</term>
<listitem><simpara> Members awaiting the local user's approval to join the
 group. Alter using <link linkend="tp-group-mixin-change-members"><function>tp_group_mixin_change_members()</function></link>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpHandleSet">TpHandleSet</link>&nbsp;*<structfield>remote_pending</structfield>;</term>
<listitem><simpara> Members awaiting remote (e.g. remote user or server)
 approval to join the group. Alter using <link linkend="tp-group-mixin-change-members"><function>tp_group_mixin_change_members()</function></link>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpGroupMixinPrivate">TpGroupMixinPrivate</link>&nbsp;*<structfield>priv</structfield>;</term>
<listitem><simpara> Pointer to opaque private data
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="TpGroupMixinClass" role="struct">
<title>TpGroupMixinClass</title>
<indexterm zone="TpGroupMixinClass"><primary>TpGroupMixinClass</primary></indexterm><programlisting>typedef struct {
  TpGroupMixinAddMemberFunc add_member;
  TpGroupMixinRemMemberFunc remove_member;
  TpGroupMixinClassPrivate *priv;
} TpGroupMixinClass;
</programlisting>
<para>
Structure representing the group mixin as used in a particular class.
To be placed in the implementation's class structure.
</para>
<para>
Initialize this with <link linkend="tp-group-mixin-class-init"><function>tp_group_mixin_class_init()</function></link>.
</para>
<para>
All fields should be considered read-only.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="TpGroupMixinAddMemberFunc">TpGroupMixinAddMemberFunc</link>&nbsp;<structfield>add_member</structfield>;</term>
<listitem><simpara> The add-member function that was passed to
 <link linkend="tp-group-mixin-class-init"><function>tp_group_mixin_class_init()</function></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpGroupMixinRemMemberFunc">TpGroupMixinRemMemberFunc</link>&nbsp;<structfield>remove_member</structfield>;</term>
<listitem><simpara> The remove-member function that was passed to
 <link linkend="tp-group-mixin-class-init"><function>tp_group_mixin_class_init()</function></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpGroupMixinClassPrivate">TpGroupMixinClassPrivate</link>&nbsp;*<structfield>priv</structfield>;</term>
<listitem><simpara> Pointer to opaque private data
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-group-mixin-class-init" role="function">
<title>tp_group_mixin_class_init ()</title>
<indexterm zone="tp-group-mixin-class-init"><primary>tp_group_mixin_class_init</primary></indexterm><programlisting><link linkend="void">void</link>                tp_group_mixin_class_init           (<link linkend="GObjectClass">GObjectClass</link> *obj_cls,
                                                         <link linkend="glong">glong</link> offset,
                                                         <link linkend="TpGroupMixinAddMemberFunc">TpGroupMixinAddMemberFunc</link> add_func,
                                                         <link linkend="TpGroupMixinRemMemberFunc">TpGroupMixinRemMemberFunc</link> rem_func);</programlisting>
<para>
Configure the mixin for use with the given class.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj_cls</parameter>&nbsp;:</term>
<listitem><simpara> The class of an object implementing the group interface using this
 mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara> The offset of the TpGroupMixinClass structure within the class
 structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>add_func</parameter>&nbsp;:</term>
<listitem><simpara> A callback to be used to add contacts to this group
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rem_func</parameter>&nbsp;:</term>
<listitem><simpara> A callback to be used to remove contacts from this group.
 This must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if you will subsequently call
 <link linkend="tp-group-mixin-class-set-remove-with-reason-func"><function>tp_group_mixin_class_set_remove_with_reason_func()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-group-mixin-class-set-remove-with-reason-func" role="function" condition="since:0.5.13">
<title>tp_group_mixin_class_set_remove_with_reason_func ()</title>
<indexterm zone="tp-group-mixin-class-set-remove-with-reason-func" role="0.5.13"><primary>tp_group_mixin_class_set_remove_with_reason_func</primary></indexterm><programlisting><link linkend="void">void</link>                tp_group_mixin_class_set_remove_with_reason_func
                                                        (<link linkend="GObjectClass">GObjectClass</link> *cls,
                                                         <link linkend="TpGroupMixinRemMemberWithReasonFunc">TpGroupMixinRemMemberWithReasonFunc</link> func);</programlisting>
<para>
Set a callback to be used to implement <link linkend="RemoveMembers"><function>RemoveMembers()</function></link> and
<link linkend="RemoveMembersWithReason"><function>RemoveMembersWithReason()</function></link>. If this function is called during class
initialization, the given callback will be used instead of the remove
callback passed to <link linkend="tp-group-mixin-class-init"><function>tp_group_mixin_class_init()</function></link> (which must be <link linkend="NULL:CAPS"><literal>NULL</literal></link>
in this case).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>cls</parameter>&nbsp;:</term>
<listitem><simpara> The class of an object implementing the group interface using this
 mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara> A callback to be used to remove contacts from this group with a
 specified reason.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.5.13
</para></refsect2>
<refsect2 id="tp-group-mixin-init" role="function">
<title>tp_group_mixin_init ()</title>
<indexterm zone="tp-group-mixin-init"><primary>tp_group_mixin_init</primary></indexterm><programlisting><link linkend="void">void</link>                tp_group_mixin_init                 (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="glong">glong</link> offset,
                                                         <link linkend="TpHandleRepoIface">TpHandleRepoIface</link> *handle_repo,
                                                         <link linkend="TpHandle">TpHandle</link> self_handle);</programlisting>
<para>
Initialize the mixin.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing the group interface using this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara> The offset of the TpGroupMixin structure within the instance
 structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handle_repo</parameter>&nbsp;:</term>
<listitem><simpara> The connection's handle repository for contacts
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>self_handle</parameter>&nbsp;:</term>
<listitem><simpara> The handle of the local user in this group, if any
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-group-mixin-finalize" role="function">
<title>tp_group_mixin_finalize ()</title>
<indexterm zone="tp-group-mixin-finalize"><primary>tp_group_mixin_finalize</primary></indexterm><programlisting><link linkend="void">void</link>                tp_group_mixin_finalize             (<link linkend="GObject">GObject</link> *obj);</programlisting>
<para>
Unreference handles and free resources used by this mixin.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing the group interface using this mixin
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-group-mixin-get-self-handle" role="function">
<title>tp_group_mixin_get_self_handle ()</title>
<indexterm zone="tp-group-mixin-get-self-handle"><primary>tp_group_mixin_get_self_handle</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_group_mixin_get_self_handle      (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="guint">guint</link> *ret,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Set the guint pointed to by ret to the local user's handle in this
group, or to 0 if the local user is not present in this group.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing the group mixin using this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&nbsp;:</term>
<listitem><simpara> Used to return the local user's handle in this group
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> Unused
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-group-mixin-get-group-flags" role="function">
<title>tp_group_mixin_get_group_flags ()</title>
<indexterm zone="tp-group-mixin-get-group-flags"><primary>tp_group_mixin_get_group_flags</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_group_mixin_get_group_flags      (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="guint">guint</link> *ret,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Set the guint pointed to by ret to this group's flags, to be
interpreted according to TpChannelGroupFlags.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing the group mixin using this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&nbsp;:</term>
<listitem><simpara> Used to return the flags
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> Unused
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-group-mixin-add-members" role="function">
<title>tp_group_mixin_add_members ()</title>
<indexterm zone="tp-group-mixin-add-members"><primary>tp_group_mixin_add_members</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_group_mixin_add_members          (<link linkend="GObject">GObject</link> *obj,
                                                         const <link linkend="GArray">GArray</link> *contacts,
                                                         const <link linkend="gchar">gchar</link> *message,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Request that the given contacts be added to the group as if in response
to user action. If the group's flags prohibit this, raise
PermissionDenied. If any of the handles is invalid, raise InvalidHandle.
Otherwise attempt to add the contacts by calling the callbacks provided
by the channel implementation.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing the group interface using this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>contacts</parameter>&nbsp;:</term>
<listitem><simpara> A GArray of guint representing contacts
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&nbsp;:</term>
<listitem><simpara> A message associated with the addition request, if supported
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an error if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> is returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> on success
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-group-mixin-remove-members" role="function">
<title>tp_group_mixin_remove_members ()</title>
<indexterm zone="tp-group-mixin-remove-members"><primary>tp_group_mixin_remove_members</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_group_mixin_remove_members       (<link linkend="GObject">GObject</link> *obj,
                                                         const <link linkend="GArray">GArray</link> *contacts,
                                                         const <link linkend="gchar">gchar</link> *message,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Request that the given contacts be removed from the group as if in response
to user action. If the group's flags prohibit this, raise
PermissionDenied. If any of the handles is invalid, raise InvalidHandle.
If any of the handles is absent from the group, raise NotAvailable.
Otherwise attempt to remove the contacts by calling the callbacks provided
by the channel implementation.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing the group interface using this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>contacts</parameter>&nbsp;:</term>
<listitem><simpara> A GArray of guint representing contacts
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&nbsp;:</term>
<listitem><simpara> A message to be sent to those contacts, if supported
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an error if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> is returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> on success
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-group-mixin-remove-members-with-reason" role="function">
<title>tp_group_mixin_remove_members_with_reason ()</title>
<indexterm zone="tp-group-mixin-remove-members-with-reason"><primary>tp_group_mixin_remove_members_with_reason</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_group_mixin_remove_members_with_reason
                                                        (<link linkend="GObject">GObject</link> *obj,
                                                         const <link linkend="GArray">GArray</link> *contacts,
                                                         const <link linkend="gchar">gchar</link> *message,
                                                         <link linkend="guint">guint</link> reason,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Request that the given contacts be removed from the group as if in response
to user action. If the group's flags prohibit this, raise
PermissionDenied. If any of the handles is invalid, raise InvalidHandle.
If any of the handles is absent from the group, raise NotAvailable.
Otherwise attempt to remove the contacts by calling the callbacks provided
by the channel implementation.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing the group interface using this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>contacts</parameter>&nbsp;:</term>
<listitem><simpara> A GArray of guint representing contacts
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&nbsp;:</term>
<listitem><simpara> A message to be sent to those contacts, if supported
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reason</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpChannelGroupChangeReason"><type>TpChannelGroupChangeReason</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an error if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> is returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> on success
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-group-mixin-get-members" role="function">
<title>tp_group_mixin_get_members ()</title>
<indexterm zone="tp-group-mixin-get-members"><primary>tp_group_mixin_get_members</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_group_mixin_get_members          (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="GArray">GArray</link> **ret,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Get the group's current members</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing the group interface using this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&nbsp;:</term>
<listitem><simpara> Used to return a newly-allocated GArray of guint contact handles
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> Unused
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-group-mixin-get-local-pending-members" role="function">
<title>tp_group_mixin_get_local_pending_members ()</title>
<indexterm zone="tp-group-mixin-get-local-pending-members"><primary>tp_group_mixin_get_local_pending_members</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_group_mixin_get_local_pending_members
                                                        (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="GArray">GArray</link> **ret,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Get the group's local-pending members.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing the group interface using this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&nbsp;:</term>
<listitem><simpara> Used to return a newly-allocated GArray of guint contact handles
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> Unused
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-group-mixin-get-local-pending-members-with-info" role="function">
<title>tp_group_mixin_get_local_pending_members_with_info ()</title>
<indexterm zone="tp-group-mixin-get-local-pending-members-with-info"><primary>tp_group_mixin_get_local_pending_members_with_info</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_group_mixin_get_local_pending_members_with_info
                                                        (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="GPtrArray">GPtrArray</link> **ret,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Get the group's local-pending members and information about their
requests to join the channel.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing the group interface using this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&nbsp;:</term>
<listitem><simpara> Used to return a newly-allocated GPtrArray of D-Bus structures each
containing the handle of a local-pending contact, the handle of a contact
 responsible for adding them to the group (or 0), the reason code
 and a related message (e.g. their request to join the group)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> Unused
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-group-mixin-get-remote-pending-members" role="function">
<title>tp_group_mixin_get_remote_pending_members ()</title>
<indexterm zone="tp-group-mixin-get-remote-pending-members"><primary>tp_group_mixin_get_remote_pending_members</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_group_mixin_get_remote_pending_members
                                                        (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="GArray">GArray</link> **ret,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Get the group's remote-pending members.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing the group interface using this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&nbsp;:</term>
<listitem><simpara> Used to return a newly-allocated GArray of guint representing the
handles of the group's remote pending members
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> Unused
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-group-mixin-get-all-members" role="function">
<title>tp_group_mixin_get_all_members ()</title>
<indexterm zone="tp-group-mixin-get-all-members"><primary>tp_group_mixin_get_all_members</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_group_mixin_get_all_members      (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="GArray">GArray</link> **members,
                                                         <link linkend="GArray">GArray</link> **local_pending,
                                                         <link linkend="GArray">GArray</link> **remote_pending,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Get the group's current and pending members.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing the group interface using this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>members</parameter>&nbsp;:</term>
<listitem><simpara> Used to return a newly-allocated GArray of guint representing
the handles of the group's members
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>local_pending</parameter>&nbsp;:</term>
<listitem><simpara> Used to return a newly-allocated GArray of guint
representing the handles of the group's local pending members
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>remote_pending</parameter>&nbsp;:</term>
<listitem><simpara> Used to return a newly-allocated GArray of guint
representing the handles of the group's remote pending members
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> Unused
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-group-mixin-get-handle-owners" role="function">
<title>tp_group_mixin_get_handle_owners ()</title>
<indexterm zone="tp-group-mixin-get-handle-owners"><primary>tp_group_mixin_get_handle_owners</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_group_mixin_get_handle_owners    (<link linkend="GObject">GObject</link> *obj,
                                                         const <link linkend="GArray">GArray</link> *handles,
                                                         <link linkend="GArray">GArray</link> **ret,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
If the mixin has the flag <link linkend="TP-CHANNEL-GROUP-FLAG-CHANNEL-SPECIFIC-HANDLES:CAPS"><literal>TP_CHANNEL_GROUP_FLAG_CHANNEL_SPECIFIC_HANDLES</literal></link>,
return the global owners of the given local handles, or 0 where
unavailable.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing the group interface with this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handles</parameter>&nbsp;:</term>
<listitem><simpara> An array of guint representing locally valid handles
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an array of guint representing globally valid
 handles, or 0 where unavailable, if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an error if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> is returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> (setting <parameter>ret</parameter>) on success, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> (setting <parameter>error</parameter>) on
failure
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-group-mixin-change-flags" role="function">
<title>tp_group_mixin_change_flags ()</title>
<indexterm zone="tp-group-mixin-change-flags"><primary>tp_group_mixin_change_flags</primary></indexterm><programlisting><link linkend="void">void</link>                tp_group_mixin_change_flags         (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="TpChannelGroupFlags">TpChannelGroupFlags</link> add,
                                                         <link linkend="TpChannelGroupFlags">TpChannelGroupFlags</link> del);</programlisting>
<para>
Request a change to be made to the flags. Emits the
GroupFlagsChanged signal with the changes which were actually made.
</para>
<para>
It is an error to set any of the same bits in both <parameter>add</parameter> and <parameter>del</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing the groups interface using this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>add</parameter>&nbsp;:</term>
<listitem><simpara> Flags to be added
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>del</parameter>&nbsp;:</term>
<listitem><simpara> Flags to be removed
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-group-mixin-change-members" role="function">
<title>tp_group_mixin_change_members ()</title>
<indexterm zone="tp-group-mixin-change-members"><primary>tp_group_mixin_change_members</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_group_mixin_change_members       (<link linkend="GObject">GObject</link> *obj,
                                                         const <link linkend="gchar">gchar</link> *message,
                                                         <link linkend="TpIntSet">TpIntSet</link> *add,
                                                         <link linkend="TpIntSet">TpIntSet</link> *del,
                                                         <link linkend="TpIntSet">TpIntSet</link> *add_local_pending,
                                                         <link linkend="TpIntSet">TpIntSet</link> *add_remote_pending,
                                                         <link linkend="TpHandle">TpHandle</link> actor,
                                                         <link linkend="TpChannelGroupChangeReason">TpChannelGroupChangeReason</link> reason);</programlisting>
<para>
Change the sets of members as given by the arguments, and emit the
MembersChanged signal if the changes were not a no-op.
</para>
<para>
This function must be called in response to events on the underlying
IM protocol, and must not be called in direct response to user input;
it does not respect the permissions flags, but changes the group directly.
</para>
<para>
If any two of add, del, add_local_pending and add_remote_pending have
a non-empty intersection, the result is undefined. Don't do that.
</para>
<para>
Each of the TpIntSet arguments may be <link linkend="NULL:CAPS"><literal>NULL</literal></link>, which is treated as
equivalent to an empty set.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing the group interface using this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&nbsp;:</term>
<listitem><simpara> A message to be sent to the affected contacts if possible;
 <link linkend="NULL:CAPS"><literal>NULL</literal></link> is allowed, and is mapped to an empty string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>add</parameter>&nbsp;:</term>
<listitem><simpara> A set of contact handles to be added to the members (if not
 already present) and removed from local pending and remote pending
 (if present)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>del</parameter>&nbsp;:</term>
<listitem><simpara> A set of contact handles to be removed from members,
 local pending or remote pending, wherever they are present
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>add_local_pending</parameter>&nbsp;:</term>
<listitem><simpara> A set of contact handles to be added to local pending,
 and removed from members and remote pending
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>add_remote_pending</parameter>&nbsp;:</term>
<listitem><simpara> A set of contact handles to be added to remote pending,
 and removed from members and local pending
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actor</parameter>&nbsp;:</term>
<listitem><simpara> The handle of the contact responsible for this change
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reason</parameter>&nbsp;:</term>
<listitem><simpara> The reason for this change
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the group was changed and the MembersChanged signal
 was emitted; <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if nothing actually changed and the signal was
 suppressed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-group-mixin-add-handle-owner" role="function">
<title>tp_group_mixin_add_handle_owner ()</title>
<indexterm zone="tp-group-mixin-add-handle-owner"><primary>tp_group_mixin_add_handle_owner</primary></indexterm><programlisting><link linkend="void">void</link>                tp_group_mixin_add_handle_owner     (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="TpHandle">TpHandle</link> local_handle,
                                                         <link linkend="TpHandle">TpHandle</link> owner_handle);</programlisting>
<para>
Note that the given local handle is an alias within this group
for the given globally-valid handle. It will be returned from subsequent
GetHandleOwner queries where appropriate.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> A GObject implementing the group interface with this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>local_handle</parameter>&nbsp;:</term>
<listitem><simpara> A contact handle valid within this group (may not be 0)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>owner_handle</parameter>&nbsp;:</term>
<listitem><simpara> A contact handle valid globally (may not be 0)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-group-mixin-iface-init" role="function">
<title>tp_group_mixin_iface_init ()</title>
<indexterm zone="tp-group-mixin-iface-init"><primary>tp_group_mixin_iface_init</primary></indexterm><programlisting><link linkend="void">void</link>                tp_group_mixin_iface_init           (<link linkend="gpointer">gpointer</link> g_iface,
                                                         <link linkend="gpointer">gpointer</link> iface_data);</programlisting>
<para>
Fill in the vtable entries needed to implement the group interface using
this mixin. This function should usually be called via
G_IMPLEMENT_INTERFACE.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>g_iface</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpSvcChannelInterfaceGroupClass"><type>TpSvcChannelInterfaceGroupClass</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iface_data</parameter>&nbsp;:</term>
<listitem><simpara> Unused
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-external-group-mixin-iface-init" role="function" condition="since:0.5.13">
<title>tp_external_group_mixin_iface_init ()</title>
<indexterm zone="tp-external-group-mixin-iface-init" role="0.5.13"><primary>tp_external_group_mixin_iface_init</primary></indexterm><programlisting><link linkend="void">void</link>                tp_external_group_mixin_iface_init  (<link linkend="gpointer">gpointer</link> g_iface,
                                                         <link linkend="gpointer">gpointer</link> iface_data);</programlisting>
<para>
Fill in the vtable entries needed to implement the group interface using
the group mixin of another object. This function should usually be called
via G_IMPLEMENT_INTERFACE.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>g_iface</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpSvcChannelInterfaceGroupClass"><type>TpSvcChannelInterfaceGroupClass</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iface_data</parameter>&nbsp;:</term>
<listitem><simpara> Unused
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.5.13
</para></refsect2>
<refsect2 id="tp-external-group-mixin-init" role="function" condition="since:0.5.13">
<title>tp_external_group_mixin_init ()</title>
<indexterm zone="tp-external-group-mixin-init" role="0.5.13"><primary>tp_external_group_mixin_init</primary></indexterm><programlisting><link linkend="void">void</link>                tp_external_group_mixin_init        (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="GObject">GObject</link> *obj_with_mixin);</programlisting>
<para>
Fill in the qdata needed to implement the group interface using
the group mixin of another object. This function should usually be called
in the instance constructor.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing the groups interface using an external group
   mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj_with_mixin</parameter>&nbsp;:</term>
<listitem><simpara> A GObject with the group mixin
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.5.13
</para></refsect2>
<refsect2 id="tp-external-group-mixin-finalize" role="function" condition="since:0.5.13">
<title>tp_external_group_mixin_finalize ()</title>
<indexterm zone="tp-external-group-mixin-finalize" role="0.5.13"><primary>tp_external_group_mixin_finalize</primary></indexterm><programlisting><link linkend="void">void</link>                tp_external_group_mixin_finalize    (<link linkend="GObject">GObject</link> *obj);</programlisting>
<para>
Remove the external group mixin. This function should usually be called
in the dispose or finalize function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing the groups interface using an external group
   mixin
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.5.13
</para></refsect2>

</refsect1>



<refsect1 id="telepathy-glib-TpGroupMixin.see-also">
<title>See Also</title>
<link linkend="TpSvcChannelInterfaceGroup"><type>TpSvcChannelInterfaceGroup</type></link>
</refsect1>

</refentry>
