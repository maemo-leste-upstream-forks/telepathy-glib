<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-svc-channel">
<refmeta>
<refentrytitle role="top_of_page" id="telepathy-glib-svc-channel.top_of_page">Service-side Channel base interface</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Service-side Channel base interface</refname>
<refpurpose>GInterface for Telepathy Channel objects</refpurpose>
</refnamediv>

<refsynopsisdiv id="telepathy-glib-svc-channel.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>
<anchor id="TpSvcChannel"/>
<synopsis>

#include &lt;telepathy-glib/svc-channel.h&gt;

                    <link linkend="TpSvcChannel-struct">TpSvcChannel</link>;
                    <link linkend="TpSvcChannelClass">TpSvcChannelClass</link>;
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-close-impl">*tp_svc_channel_close_impl</link>)        (<link linkend="TpSvcChannel">TpSvcChannel</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-implement-close">tp_svc_channel_implement_close</link>      (<link linkend="TpSvcChannelClass">TpSvcChannelClass</link> *klass,
                                                         <link linkend="tp-svc-channel-close-impl">tp_svc_channel_close_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-return-from-close">tp_svc_channel_return_from_close</link>    (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-get-channel-type-impl">*tp_svc_channel_get_channel_type_impl</link>)
                                                        (<link linkend="TpSvcChannel">TpSvcChannel</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-implement-get-channel-type">tp_svc_channel_implement_get_channel_type</link>
                                                        (<link linkend="TpSvcChannelClass">TpSvcChannelClass</link> *klass,
                                                         <link linkend="tp-svc-channel-get-channel-type-impl">tp_svc_channel_get_channel_type_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-return-from-get-channel-type">tp_svc_channel_return_from_get_channel_type</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         const <link linkend="gchar">gchar</link> *out_Channel_Type);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-get-handle-impl">*tp_svc_channel_get_handle_impl</link>)   (<link linkend="TpSvcChannel">TpSvcChannel</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-implement-get-handle">tp_svc_channel_implement_get_handle</link> (<link linkend="TpSvcChannelClass">TpSvcChannelClass</link> *klass,
                                                         <link linkend="tp-svc-channel-get-handle-impl">tp_svc_channel_get_handle_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-return-from-get-handle">tp_svc_channel_return_from_get_handle</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         <link linkend="guint">guint</link> out_Target_Handle_Type,
                                                         <link linkend="guint">guint</link> out_Target_Handle);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-get-interfaces-impl">*tp_svc_channel_get_interfaces_impl</link>)
                                                        (<link linkend="TpSvcChannel">TpSvcChannel</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-implement-get-interfaces">tp_svc_channel_implement_get_interfaces</link>
                                                        (<link linkend="TpSvcChannelClass">TpSvcChannelClass</link> *klass,
                                                         <link linkend="tp-svc-channel-get-interfaces-impl">tp_svc_channel_get_interfaces_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-return-from-get-interfaces">tp_svc_channel_return_from_get_interfaces</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         const <link linkend="gchar">gchar</link> **out_Interfaces);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-emit-closed">tp_svc_channel_emit_closed</link>          (<link linkend="gpointer">gpointer</link> instance);

                    <link linkend="TpSvcChannelInterfaceDestroyable">TpSvcChannelInterfaceDestroyable</link>;
                    <link linkend="TpSvcChannelInterfaceDestroyableClass">TpSvcChannelInterfaceDestroyableClass</link>;
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-interface-destroyable-destroy-impl">*tp_svc_channel_interface_destroyable_destroy_impl</link>)
                                                        (<link linkend="TpSvcChannelInterfaceDestroyable">TpSvcChannelInterfaceDestroyable</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-destroyable-implement-destroy">tp_svc_channel_interface_destroyable_implement_destroy</link>
                                                        (<link linkend="TpSvcChannelInterfaceDestroyableClass">TpSvcChannelInterfaceDestroyableClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-destroyable-destroy-impl">tp_svc_channel_interface_destroyable_destroy_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-destroyable-return-from-destroy">tp_svc_channel_interface_destroyable_return_from_destroy</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
</synopsis>
</refsynopsisdiv>

<refsect1 id="telepathy-glib-svc-channel.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GInterface">GInterface</link>
   +----TpSvcChannel
</synopsis>
</refsect1>


<refsect1 id="telepathy-glib-svc-channel.derived-interfaces" role="derived_interfaces">
<title role="derived_interfaces.title">Known Derived Interfaces</title>
<para>
TpSvcChannel is required by
 <link linkend="TpExportableChannel">TpExportableChannel</link>.</para>
</refsect1>




<refsect1 id="telepathy-glib-svc-channel.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="TpSvcChannel-closed">closed</link>&quot;                                         : Run Last / Has Details
</synopsis>
</refsect1>


<refsect1 id="telepathy-glib-svc-channel.description" role="desc">
<title role="desc.title">Description</title>
<para>
This interface (auto-generated from the Telepathy spec) makes it easier
to export objects implementing the Telepathy Channel.</para>
<para>
</para>
</refsect1>

<refsect1 id="telepathy-glib-svc-channel.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="TpSvcChannel-struct" role="struct">
<title>TpSvcChannel</title>
<indexterm zone="TpSvcChannel-struct"><primary sortas="TpSvcChannel">TpSvcChannel</primary></indexterm><programlisting>typedef struct _TpSvcChannel TpSvcChannel;</programlisting>
<para>
Dummy typedef representing any implementation of this interface.</para>
<para>
</para></refsect2>
<refsect2 id="TpSvcChannelClass" role="struct">
<title>TpSvcChannelClass</title>
<indexterm zone="TpSvcChannelClass"><primary sortas="TpSvcChannelClass">TpSvcChannelClass</primary></indexterm><programlisting>typedef struct _TpSvcChannelClass TpSvcChannelClass;</programlisting>
<para>
The class of TpSvcChannel.
</para>
<para>
In a full implementation of this interface (i.e. all
methods implemented), the interface initialization
function used in <link linkend="G-IMPLEMENT-INTERFACE--CAPS"><function>G_IMPLEMENT_INTERFACE()</function></link> would
typically look like this:
</para>
<para>
<programlisting>
static void
implement_channel (gpointer klass,
    gpointer unused G_GNUC_UNUSED)
{
#define IMPLEMENT(x) tp_svc_channel_implement_##<link linkend="x">x</link> (\
  klass, my_object_##<link linkend="x">x</link>)
  IMPLEMENT (close);
  IMPLEMENT (get_channel_type);
  IMPLEMENT (get_handle);
  IMPLEMENT (get_interfaces);
#undef IMPLEMENT
}
</programlisting></para>
<para>
</para></refsect2>
<refsect2 id="tp-svc-channel-close-impl" role="function">
<title>tp_svc_channel_close_impl ()</title>
<indexterm zone="tp-svc-channel-close-impl"><primary sortas="tp_svc_channel_close_impl">tp_svc_channel_close_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_close_impl)        (<link linkend="TpSvcChannel">TpSvcChannel</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
Close on interface org.freedesktop.Telepathy.Channel.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-implement-close" role="function">
<title>tp_svc_channel_implement_close ()</title>
<indexterm zone="tp-svc-channel-implement-close"><primary sortas="tp_svc_channel_implement_close">tp_svc_channel_implement_close</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_implement_close      (<link linkend="TpSvcChannelClass">TpSvcChannelClass</link> *klass,
                                                         <link linkend="tp-svc-channel-close-impl">tp_svc_channel_close_impl</link> impl);</programlisting>
<para>
Register an implementation for the Close method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the Close D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-return-from-close" role="function">
<title>tp_svc_channel_return_from_close ()</title>
<indexterm zone="tp-svc-channel-return-from-close"><primary sortas="tp_svc_channel_return_from_close">tp_svc_channel_return_from_close</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_return_from_close    (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-get-channel-type-impl" role="function">
<title>tp_svc_channel_get_channel_type_impl ()</title>
<indexterm zone="tp-svc-channel-get-channel-type-impl"><primary sortas="tp_svc_channel_get_channel_type_impl">tp_svc_channel_get_channel_type_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_get_channel_type_impl)
                                                        (<link linkend="TpSvcChannel">TpSvcChannel</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
GetChannelType on interface org.freedesktop.Telepathy.Channel.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-implement-get-channel-type" role="function">
<title>tp_svc_channel_implement_get_channel_type ()</title>
<indexterm zone="tp-svc-channel-implement-get-channel-type"><primary sortas="tp_svc_channel_implement_get_channel_type">tp_svc_channel_implement_get_channel_type</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_implement_get_channel_type
                                                        (<link linkend="TpSvcChannelClass">TpSvcChannelClass</link> *klass,
                                                         <link linkend="tp-svc-channel-get-channel-type-impl">tp_svc_channel_get_channel_type_impl</link> impl);</programlisting>
<para>
Register an implementation for the GetChannelType method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the GetChannelType D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-return-from-get-channel-type" role="function">
<title>tp_svc_channel_return_from_get_channel_type ()</title>
<indexterm zone="tp-svc-channel-return-from-get-channel-type"><primary sortas="tp_svc_channel_return_from_get_channel_type">tp_svc_channel_return_from_get_channel_type</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_return_from_get_channel_type
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         const <link linkend="gchar">gchar</link> *out_Channel_Type);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Channel_Type</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-get-handle-impl" role="function">
<title>tp_svc_channel_get_handle_impl ()</title>
<indexterm zone="tp-svc-channel-get-handle-impl"><primary sortas="tp_svc_channel_get_handle_impl">tp_svc_channel_get_handle_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_get_handle_impl)   (<link linkend="TpSvcChannel">TpSvcChannel</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
GetHandle on interface org.freedesktop.Telepathy.Channel.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-implement-get-handle" role="function">
<title>tp_svc_channel_implement_get_handle ()</title>
<indexterm zone="tp-svc-channel-implement-get-handle"><primary sortas="tp_svc_channel_implement_get_handle">tp_svc_channel_implement_get_handle</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_implement_get_handle (<link linkend="TpSvcChannelClass">TpSvcChannelClass</link> *klass,
                                                         <link linkend="tp-svc-channel-get-handle-impl">tp_svc_channel_get_handle_impl</link> impl);</programlisting>
<para>
Register an implementation for the GetHandle method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the GetHandle D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-return-from-get-handle" role="function">
<title>tp_svc_channel_return_from_get_handle ()</title>
<indexterm zone="tp-svc-channel-return-from-get-handle"><primary sortas="tp_svc_channel_return_from_get_handle">tp_svc_channel_return_from_get_handle</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_return_from_get_handle
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         <link linkend="guint">guint</link> out_Target_Handle_Type,
                                                         <link linkend="guint">guint</link> out_Target_Handle);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Target_Handle_Type</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Target_Handle</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-get-interfaces-impl" role="function">
<title>tp_svc_channel_get_interfaces_impl ()</title>
<indexterm zone="tp-svc-channel-get-interfaces-impl"><primary sortas="tp_svc_channel_get_interfaces_impl">tp_svc_channel_get_interfaces_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_get_interfaces_impl)
                                                        (<link linkend="TpSvcChannel">TpSvcChannel</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
GetInterfaces on interface org.freedesktop.Telepathy.Channel.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-implement-get-interfaces" role="function">
<title>tp_svc_channel_implement_get_interfaces ()</title>
<indexterm zone="tp-svc-channel-implement-get-interfaces"><primary sortas="tp_svc_channel_implement_get_interfaces">tp_svc_channel_implement_get_interfaces</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_implement_get_interfaces
                                                        (<link linkend="TpSvcChannelClass">TpSvcChannelClass</link> *klass,
                                                         <link linkend="tp-svc-channel-get-interfaces-impl">tp_svc_channel_get_interfaces_impl</link> impl);</programlisting>
<para>
Register an implementation for the GetInterfaces method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the GetInterfaces D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-return-from-get-interfaces" role="function">
<title>tp_svc_channel_return_from_get_interfaces ()</title>
<indexterm zone="tp-svc-channel-return-from-get-interfaces"><primary sortas="tp_svc_channel_return_from_get_interfaces">tp_svc_channel_return_from_get_interfaces</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_return_from_get_interfaces
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         const <link linkend="gchar">gchar</link> **out_Interfaces);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Interfaces</parameter>&#160;:</term>
<listitem><simpara> const gchar ** (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-emit-closed" role="function">
<title>tp_svc_channel_emit_closed ()</title>
<indexterm zone="tp-svc-channel-emit-closed"><primary sortas="tp_svc_channel_emit_closed">tp_svc_channel_emit_closed</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_emit_closed          (<link linkend="gpointer">gpointer</link> instance);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
Closed signal on interface org.freedesktop.Telepathy.Channel.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TpSvcChannelInterfaceDestroyable" role="struct">
<title>TpSvcChannelInterfaceDestroyable</title>
<indexterm zone="TpSvcChannelInterfaceDestroyable"><primary sortas="TpSvcChannelInterfaceDestroyable">TpSvcChannelInterfaceDestroyable</primary></indexterm><programlisting>typedef struct _TpSvcChannelInterfaceDestroyable TpSvcChannelInterfaceDestroyable;</programlisting>
<para>
Dummy typedef representing any implementation of this interface.</para>
<para>
</para></refsect2>
<refsect2 id="TpSvcChannelInterfaceDestroyableClass" role="struct">
<title>TpSvcChannelInterfaceDestroyableClass</title>
<indexterm zone="TpSvcChannelInterfaceDestroyableClass"><primary sortas="TpSvcChannelInterfaceDestroyableClass">TpSvcChannelInterfaceDestroyableClass</primary></indexterm><programlisting>typedef struct _TpSvcChannelInterfaceDestroyableClass TpSvcChannelInterfaceDestroyableClass;</programlisting>
<para>
The class of TpSvcChannelInterfaceDestroyable.
</para>
<para>
In a full implementation of this interface (i.e. all
methods implemented), the interface initialization
function used in <link linkend="G-IMPLEMENT-INTERFACE--CAPS"><function>G_IMPLEMENT_INTERFACE()</function></link> would
typically look like this:
</para>
<para>
<programlisting>
static void
implement_channel_interface_destroyable (gpointer klass,
    gpointer unused G_GNUC_UNUSED)
{
#define IMPLEMENT(x) tp_svc_channel_interface_destroyable_implement_##<link linkend="x">x</link> (\
  klass, my_object_##<link linkend="x">x</link>)
  IMPLEMENT (destroy);
#undef IMPLEMENT
}
</programlisting></para>
<para>
</para></refsect2>
<refsect2 id="tp-svc-channel-interface-destroyable-destroy-impl" role="function">
<title>tp_svc_channel_interface_destroyable_destroy_impl ()</title>
<indexterm zone="tp-svc-channel-interface-destroyable-destroy-impl"><primary sortas="tp_svc_channel_interface_destroyable_destroy_impl">tp_svc_channel_interface_destroyable_destroy_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_interface_destroyable_destroy_impl)
                                                        (<link linkend="TpSvcChannelInterfaceDestroyable">TpSvcChannelInterfaceDestroyable</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
Destroy on interface org.freedesktop.Telepathy.Channel.Interface.Destroyable.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-destroyable-implement-destroy" role="function">
<title>tp_svc_channel_interface_destroyable_implement_destroy ()</title>
<indexterm zone="tp-svc-channel-interface-destroyable-implement-destroy"><primary sortas="tp_svc_channel_interface_destroyable_implement_destroy">tp_svc_channel_interface_destroyable_implement_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_destroyable_implement_destroy
                                                        (<link linkend="TpSvcChannelInterfaceDestroyableClass">TpSvcChannelInterfaceDestroyableClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-destroyable-destroy-impl">tp_svc_channel_interface_destroyable_destroy_impl</link> impl);</programlisting>
<para>
Register an implementation for the Destroy method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the Destroy D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-destroyable-return-from-destroy" role="function">
<title>tp_svc_channel_interface_destroyable_return_from_destroy ()</title>
<indexterm zone="tp-svc-channel-interface-destroyable-return-from-destroy"><primary sortas="tp_svc_channel_interface_destroyable_return_from_destroy">tp_svc_channel_interface_destroyable_return_from_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_destroyable_return_from_destroy
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

<refsect1 id="telepathy-glib-svc-channel.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="TpSvcChannel-closed" role="signal"><title>The <literal>&quot;closed&quot;</literal> signal</title>
<indexterm zone="TpSvcChannel-closed"><primary sortas="TpSvcChannel::closed">TpSvcChannel::closed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcChannel">TpSvcChannel</link> *arg0,
                                                        <link linkend="gpointer">gpointer</link>      user_data)      : Run Last / Has Details</programlisting>
<para>
The Closed D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>


<refsect1 id="telepathy-glib-svc-channel.see-also">
<title>See Also</title>
#TpChannelIface
</refsect1>

</refentry>
