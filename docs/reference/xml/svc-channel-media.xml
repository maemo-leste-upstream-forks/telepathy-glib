<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-svc-channel-media">
<refmeta>
<refentrytitle role="top_of_page" id="telepathy-glib-svc-channel-media.top_of_page">Media channels</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Media channels</refname>
<refpurpose>service-side interfaces for the Streamed Media channel
 type, and the Call State, DTMF and Media Signalling interfaces</refpurpose>
</refnamediv>

<refsynopsisdiv id="telepathy-glib-svc-channel-media.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>
<anchor id="TpSvcChannelTypeStreamedMedia"/><anchor id="TpSvcChannelInterfaceCallState"/><anchor id="TpSvcChannelInterfaceDTMF"/><anchor id="TpSvcChannelInterfaceHold"/><anchor id="TpSvcChannelInterfaceMediaSignalling"/>
<synopsis>

#include &lt;telepathy-glib/svc-channel.h&gt;

                    <link linkend="TpSvcChannelTypeStreamedMedia-struct">TpSvcChannelTypeStreamedMedia</link>;
                    <link linkend="TpSvcChannelTypeStreamedMediaClass">TpSvcChannelTypeStreamedMediaClass</link>;
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-type-streamed-media-list-streams-impl">*tp_svc_channel_type_streamed_media_list_streams_impl</link>)
                                                        (<link linkend="TpSvcChannelTypeStreamedMedia">TpSvcChannelTypeStreamedMedia</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-streamed-media-implement-list-streams">tp_svc_channel_type_streamed_media_implement_list_streams</link>
                                                        (<link linkend="TpSvcChannelTypeStreamedMediaClass">TpSvcChannelTypeStreamedMediaClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-streamed-media-list-streams-impl">tp_svc_channel_type_streamed_media_list_streams_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-streamed-media-return-from-list-streams">tp_svc_channel_type_streamed_media_return_from_list_streams</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *out_Streams);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-type-streamed-media-remove-streams-impl">*tp_svc_channel_type_streamed_media_remove_streams_impl</link>)
                                                        (<link linkend="TpSvcChannelTypeStreamedMedia">TpSvcChannelTypeStreamedMedia</link> *self,
                                                         const <link linkend="GArray">GArray</link> *in_Streams,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-streamed-media-implement-remove-streams">tp_svc_channel_type_streamed_media_implement_remove_streams</link>
                                                        (<link linkend="TpSvcChannelTypeStreamedMediaClass">TpSvcChannelTypeStreamedMediaClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-streamed-media-remove-streams-impl">tp_svc_channel_type_streamed_media_remove_streams_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-streamed-media-return-from-remove-streams">tp_svc_channel_type_streamed_media_return_from_remove_streams</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-type-streamed-media-request-stream-direction-impl">*tp_svc_channel_type_streamed_media_request_stream_direction_impl</link>)
                                                        (<link linkend="TpSvcChannelTypeStreamedMedia">TpSvcChannelTypeStreamedMedia</link> *self,
                                                         <link linkend="guint">guint</link> in_Stream_ID,
                                                         <link linkend="guint">guint</link> in_Stream_Direction,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-streamed-media-implement-request-stream-direction">tp_svc_channel_type_streamed_media_implement_request_stream_direction</link>
                                                        (<link linkend="TpSvcChannelTypeStreamedMediaClass">TpSvcChannelTypeStreamedMediaClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-streamed-media-request-stream-direction-impl">tp_svc_channel_type_streamed_media_request_stream_direction_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-streamed-media-return-from-request-stream-direction">tp_svc_channel_type_streamed_media_return_from_request_stream_direction</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-type-streamed-media-request-streams-impl">*tp_svc_channel_type_streamed_media_request_streams_impl</link>)
                                                        (<link linkend="TpSvcChannelTypeStreamedMedia">TpSvcChannelTypeStreamedMedia</link> *self,
                                                         <link linkend="guint">guint</link> in_Contact_Handle,
                                                         const <link linkend="GArray">GArray</link> *in_Types,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-streamed-media-implement-request-streams">tp_svc_channel_type_streamed_media_implement_request_streams</link>
                                                        (<link linkend="TpSvcChannelTypeStreamedMediaClass">TpSvcChannelTypeStreamedMediaClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-streamed-media-request-streams-impl">tp_svc_channel_type_streamed_media_request_streams_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-streamed-media-return-from-request-streams">tp_svc_channel_type_streamed_media_return_from_request_streams</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *out_Streams);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-streamed-media-emit-stream-added">tp_svc_channel_type_streamed_media_emit_stream_added</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_Stream_ID,
                                                         <link linkend="guint">guint</link> arg_Contact_Handle,
                                                         <link linkend="guint">guint</link> arg_Stream_Type);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-streamed-media-emit-stream-direction-changed">tp_svc_channel_type_streamed_media_emit_stream_direction_changed</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_Stream_ID,
                                                         <link linkend="guint">guint</link> arg_Stream_Direction,
                                                         <link linkend="guint">guint</link> arg_Pending_Flags);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-streamed-media-emit-stream-error">tp_svc_channel_type_streamed_media_emit_stream_error</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_Stream_ID,
                                                         <link linkend="guint">guint</link> arg_Error_Code,
                                                         const <link linkend="gchar">gchar</link> *arg_Message);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-streamed-media-emit-stream-removed">tp_svc_channel_type_streamed_media_emit_stream_removed</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_Stream_ID);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-streamed-media-emit-stream-state-changed">tp_svc_channel_type_streamed_media_emit_stream_state_changed</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_Stream_ID,
                                                         <link linkend="guint">guint</link> arg_Stream_State);


                    <link linkend="TpSvcChannelInterfaceCallState-struct">TpSvcChannelInterfaceCallState</link>;
                    <link linkend="TpSvcChannelInterfaceCallStateClass">TpSvcChannelInterfaceCallStateClass</link>;
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-call-state-emit-call-state-changed">tp_svc_channel_interface_call_state_emit_call_state_changed</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_Contact,
                                                         <link linkend="guint">guint</link> arg_State);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-interface-call-state-get-call-states-impl">*tp_svc_channel_interface_call_state_get_call_states_impl</link>)
                                                        (<link linkend="TpSvcChannelInterfaceCallState">TpSvcChannelInterfaceCallState</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-call-state-implement-get-call-states">tp_svc_channel_interface_call_state_implement_get_call_states</link>
                                                        (<link linkend="TpSvcChannelInterfaceCallStateClass">TpSvcChannelInterfaceCallStateClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-call-state-get-call-states-impl">tp_svc_channel_interface_call_state_get_call_states_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-call-state-return-from-get-call-states">tp_svc_channel_interface_call_state_return_from_get_call_states</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         <link linkend="GHashTable">GHashTable</link> *out_States);


                    <link linkend="TpSvcChannelInterfaceDTMF-struct">TpSvcChannelInterfaceDTMF</link>;
                    <link linkend="TpSvcChannelInterfaceDTMFClass">TpSvcChannelInterfaceDTMFClass</link>;
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-dtmf-implement-start-tone">tp_svc_channel_interface_dtmf_implement_start_tone</link>
                                                        (<link linkend="TpSvcChannelInterfaceDTMFClass">TpSvcChannelInterfaceDTMFClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-dtmf-start-tone-impl">tp_svc_channel_interface_dtmf_start_tone_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-dtmf-implement-stop-tone">tp_svc_channel_interface_dtmf_implement_stop_tone</link>
                                                        (<link linkend="TpSvcChannelInterfaceDTMFClass">TpSvcChannelInterfaceDTMFClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-dtmf-stop-tone-impl">tp_svc_channel_interface_dtmf_stop_tone_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-dtmf-return-from-start-tone">tp_svc_channel_interface_dtmf_return_from_start_tone</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-dtmf-return-from-stop-tone">tp_svc_channel_interface_dtmf_return_from_stop_tone</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-interface-dtmf-start-tone-impl">*tp_svc_channel_interface_dtmf_start_tone_impl</link>)
                                                        (<link linkend="TpSvcChannelInterfaceDTMF">TpSvcChannelInterfaceDTMF</link> *self,
                                                         <link linkend="guint">guint</link> in_Stream_ID,
                                                         <link linkend="guchar">guchar</link> in_Event,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-interface-dtmf-stop-tone-impl">*tp_svc_channel_interface_dtmf_stop_tone_impl</link>)
                                                        (<link linkend="TpSvcChannelInterfaceDTMF">TpSvcChannelInterfaceDTMF</link> *self,
                                                         <link linkend="guint">guint</link> in_Stream_ID,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);


                    <link linkend="TpSvcChannelInterfaceHold-struct">TpSvcChannelInterfaceHold</link>;
                    <link linkend="TpSvcChannelInterfaceHoldClass">TpSvcChannelInterfaceHoldClass</link>;
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-interface-hold-get-hold-state-impl">*tp_svc_channel_interface_hold_get_hold_state_impl</link>)
                                                        (<link linkend="TpSvcChannelInterfaceHold">TpSvcChannelInterfaceHold</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-hold-return-from-get-hold-state">tp_svc_channel_interface_hold_return_from_get_hold_state</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         <link linkend="guint">guint</link> out_HoldState,
                                                         <link linkend="guint">guint</link> out_Reason);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-hold-implement-get-hold-state">tp_svc_channel_interface_hold_implement_get_hold_state</link>
                                                        (<link linkend="TpSvcChannelInterfaceHoldClass">TpSvcChannelInterfaceHoldClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-hold-get-hold-state-impl">tp_svc_channel_interface_hold_get_hold_state_impl</link> impl);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-interface-hold-request-hold-impl">*tp_svc_channel_interface_hold_request_hold_impl</link>)
                                                        (<link linkend="TpSvcChannelInterfaceHold">TpSvcChannelInterfaceHold</link> *self,
                                                         <link linkend="gboolean">gboolean</link> in_Hold,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-hold-return-from-request-hold">tp_svc_channel_interface_hold_return_from_request_hold</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-hold-implement-request-hold">tp_svc_channel_interface_hold_implement_request_hold</link>
                                                        (<link linkend="TpSvcChannelInterfaceHoldClass">TpSvcChannelInterfaceHoldClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-hold-request-hold-impl">tp_svc_channel_interface_hold_request_hold_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-hold-emit-hold-state-changed">tp_svc_channel_interface_hold_emit_hold_state_changed</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_HoldState,
                                                         <link linkend="guint">guint</link> arg_Reason);


                    <link linkend="TpSvcChannelInterfaceMediaSignalling-struct">TpSvcChannelInterfaceMediaSignalling</link>;
                    <link linkend="TpSvcChannelInterfaceMediaSignallingClass">TpSvcChannelInterfaceMediaSignallingClass</link>;
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-interface-media-signalling-get-session-handlers-impl">*tp_svc_channel_interface_media_signalling_get_session_handlers_impl</link>)
                                                        (<link linkend="TpSvcChannelInterfaceMediaSignalling">TpSvcChannelInterfaceMediaSignalling</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-media-signalling-implement-get-session-handlers">tp_svc_channel_interface_media_signalling_implement_get_session_handlers</link>
                                                        (<link linkend="TpSvcChannelInterfaceMediaSignallingClass">TpSvcChannelInterfaceMediaSignallingClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-media-signalling-get-session-handlers-impl">tp_svc_channel_interface_media_signalling_get_session_handlers_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-media-signalling-return-from-get-session-handlers">tp_svc_channel_interface_media_signalling_return_from_get_session_handlers</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *out_Session_Handlers);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-media-signalling-emit-new-session-handler">tp_svc_channel_interface_media_signalling_emit_new_session_handler</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="gchar">gchar</link> *arg_Session_Handler,
                                                         const <link linkend="gchar">gchar</link> *arg_Session_Type);
</synopsis>
</refsynopsisdiv>

<refsect1 id="telepathy-glib-svc-channel-media.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GInterface">GInterface</link>
   +----TpSvcChannelTypeStreamedMedia
</synopsis>
<synopsis>
  <link linkend="GInterface">GInterface</link>
   +----TpSvcChannelInterfaceCallState
</synopsis>
<synopsis>
  <link linkend="GInterface">GInterface</link>
   +----TpSvcChannelInterfaceDTMF
</synopsis>
<synopsis>
  <link linkend="GInterface">GInterface</link>
   +----TpSvcChannelInterfaceHold
</synopsis>
<synopsis>
  <link linkend="GInterface">GInterface</link>
   +----TpSvcChannelInterfaceMediaSignalling
</synopsis>
</refsect1>






<refsect1 id="telepathy-glib-svc-channel-media.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="TpSvcChannelTypeStreamedMedia-stream-added">stream-added</link>&quot;                                   : Run Last / Has Details
  &quot;<link linkend="TpSvcChannelTypeStreamedMedia-stream-direction-changed">stream-direction-changed</link>&quot;                       : Run Last / Has Details
  &quot;<link linkend="TpSvcChannelTypeStreamedMedia-stream-error">stream-error</link>&quot;                                   : Run Last / Has Details
  &quot;<link linkend="TpSvcChannelTypeStreamedMedia-stream-removed">stream-removed</link>&quot;                                 : Run Last / Has Details
  &quot;<link linkend="TpSvcChannelTypeStreamedMedia-stream-state-changed">stream-state-changed</link>&quot;                           : Run Last / Has Details
  &quot;<link linkend="TpSvcChannelInterfaceCallState-call-state-changed">call-state-changed</link>&quot;                             : Run Last / Has Details
  &quot;<link linkend="TpSvcChannelInterfaceHold-hold-state-changed">hold-state-changed</link>&quot;                             : Run Last / Has Details
  &quot;<link linkend="TpSvcChannelInterfaceMediaSignalling-new-session-handler">new-session-handler</link>&quot;                            : Run Last / Has Details
</synopsis>
</refsect1>


<refsect1 id="telepathy-glib-svc-channel-media.description" role="desc">
<title role="desc.title">Description</title>
<para>
This section documents the auto-generated C wrappers for the Streamed Media
channel type, and some interfaces which are optionally supported by
channels of this type.
</para>
<para>
Streamed Media channels represent real-time audio or video streaming,
including voice over IP, webcams, and telephony.
</para>
<para>
Channels of type Streamed Media may support the Media Signalling interface.
If not, the connection manager is assumed to be presenting the media
streams to the user automatically (for instance, in a connection manager
like gnome-phone-manager or telepathy-snom that remotely controls a
telephone, the phone's own speaker and microphone will probably be
used directly).
</para>
<para>
If Media Signalling is supported, the Telepathy client is responsible for
actually streaming the media, using the Media Signalling interface to
provide signalling (connection managers might implement this interface in
terms of Jingle or SDP, for instance).
</para>
<para>
Channels of type Streamed Media may also support the DTMF and
CallState interfaces.</para>
<para>
</para>
</refsect1>

<refsect1 id="telepathy-glib-svc-channel-media.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="TpSvcChannelTypeStreamedMedia-struct" role="struct">
<title>TpSvcChannelTypeStreamedMedia</title>
<indexterm zone="TpSvcChannelTypeStreamedMedia-struct"><primary sortas="TpSvcChannelTypeStreamedMedia">TpSvcChannelTypeStreamedMedia</primary></indexterm><programlisting>typedef struct _TpSvcChannelTypeStreamedMedia TpSvcChannelTypeStreamedMedia;</programlisting>
<para>
Dummy typedef representing any implementation of this interface.</para>
<para>
</para></refsect2>
<refsect2 id="TpSvcChannelTypeStreamedMediaClass" role="struct">
<title>TpSvcChannelTypeStreamedMediaClass</title>
<indexterm zone="TpSvcChannelTypeStreamedMediaClass"><primary sortas="TpSvcChannelTypeStreamedMediaClass">TpSvcChannelTypeStreamedMediaClass</primary></indexterm><programlisting>typedef struct _TpSvcChannelTypeStreamedMediaClass TpSvcChannelTypeStreamedMediaClass;</programlisting>
<para>
The class of TpSvcChannelTypeStreamedMedia.
</para>
<para>
In a full implementation of this interface (i.e. all
methods implemented), the interface initialization
function used in <link linkend="G-IMPLEMENT-INTERFACE--CAPS"><function>G_IMPLEMENT_INTERFACE()</function></link> would
typically look like this:
</para>
<para>
<programlisting>
static void
implement_channel_type_streamed_media (gpointer klass,
    gpointer unused G_GNUC_UNUSED)
{
#define IMPLEMENT(x) tp_svc_channel_type_streamed_media_implement_##<link linkend="x">x</link> (\
  klass, my_object_##<link linkend="x">x</link>)
  IMPLEMENT (list_streams);
  IMPLEMENT (remove_streams);
  IMPLEMENT (request_stream_direction);
  IMPLEMENT (request_streams);
#undef IMPLEMENT
}
</programlisting></para>
<para>
</para></refsect2>
<refsect2 id="tp-svc-channel-type-streamed-media-list-streams-impl" role="function">
<title>tp_svc_channel_type_streamed_media_list_streams_impl ()</title>
<indexterm zone="tp-svc-channel-type-streamed-media-list-streams-impl"><primary sortas="tp_svc_channel_type_streamed_media_list_streams_impl">tp_svc_channel_type_streamed_media_list_streams_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_type_streamed_media_list_streams_impl)
                                                        (<link linkend="TpSvcChannelTypeStreamedMedia">TpSvcChannelTypeStreamedMedia</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
ListStreams on interface org.freedesktop.Telepathy.Channel.Type.StreamedMedia.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-streamed-media-implement-list-streams" role="function">
<title>tp_svc_channel_type_streamed_media_implement_list_streams ()</title>
<indexterm zone="tp-svc-channel-type-streamed-media-implement-list-streams"><primary sortas="tp_svc_channel_type_streamed_media_implement_list_streams">tp_svc_channel_type_streamed_media_implement_list_streams</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_streamed_media_implement_list_streams
                                                        (<link linkend="TpSvcChannelTypeStreamedMediaClass">TpSvcChannelTypeStreamedMediaClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-streamed-media-list-streams-impl">tp_svc_channel_type_streamed_media_list_streams_impl</link> impl);</programlisting>
<para>
Register an implementation for the ListStreams method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the ListStreams D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-streamed-media-return-from-list-streams" role="function">
<title>tp_svc_channel_type_streamed_media_return_from_list_streams ()</title>
<indexterm zone="tp-svc-channel-type-streamed-media-return-from-list-streams"><primary sortas="tp_svc_channel_type_streamed_media_return_from_list_streams">tp_svc_channel_type_streamed_media_return_from_list_streams</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_streamed_media_return_from_list_streams
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *out_Streams);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Streams</parameter>&#160;:</term>
<listitem><simpara> const GPtrArray * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-streamed-media-remove-streams-impl" role="function">
<title>tp_svc_channel_type_streamed_media_remove_streams_impl ()</title>
<indexterm zone="tp-svc-channel-type-streamed-media-remove-streams-impl"><primary sortas="tp_svc_channel_type_streamed_media_remove_streams_impl">tp_svc_channel_type_streamed_media_remove_streams_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_type_streamed_media_remove_streams_impl)
                                                        (<link linkend="TpSvcChannelTypeStreamedMedia">TpSvcChannelTypeStreamedMedia</link> *self,
                                                         const <link linkend="GArray">GArray</link> *in_Streams,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
RemoveStreams on interface org.freedesktop.Telepathy.Channel.Type.StreamedMedia.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Streams</parameter>&#160;:</term>
<listitem><simpara> const GArray * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-streamed-media-implement-remove-streams" role="function">
<title>tp_svc_channel_type_streamed_media_implement_remove_streams ()</title>
<indexterm zone="tp-svc-channel-type-streamed-media-implement-remove-streams"><primary sortas="tp_svc_channel_type_streamed_media_implement_remove_streams">tp_svc_channel_type_streamed_media_implement_remove_streams</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_streamed_media_implement_remove_streams
                                                        (<link linkend="TpSvcChannelTypeStreamedMediaClass">TpSvcChannelTypeStreamedMediaClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-streamed-media-remove-streams-impl">tp_svc_channel_type_streamed_media_remove_streams_impl</link> impl);</programlisting>
<para>
Register an implementation for the RemoveStreams method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the RemoveStreams D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-streamed-media-return-from-remove-streams" role="function">
<title>tp_svc_channel_type_streamed_media_return_from_remove_streams ()</title>
<indexterm zone="tp-svc-channel-type-streamed-media-return-from-remove-streams"><primary sortas="tp_svc_channel_type_streamed_media_return_from_remove_streams">tp_svc_channel_type_streamed_media_return_from_remove_streams</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_streamed_media_return_from_remove_streams
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-streamed-media-request-stream-direction-impl" role="function">
<title>tp_svc_channel_type_streamed_media_request_stream_direction_impl ()</title>
<indexterm zone="tp-svc-channel-type-streamed-media-request-stream-direction-impl"><primary sortas="tp_svc_channel_type_streamed_media_request_stream_direction_impl">tp_svc_channel_type_streamed_media_request_stream_direction_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_type_streamed_media_request_stream_direction_impl)
                                                        (<link linkend="TpSvcChannelTypeStreamedMedia">TpSvcChannelTypeStreamedMedia</link> *self,
                                                         <link linkend="guint">guint</link> in_Stream_ID,
                                                         <link linkend="guint">guint</link> in_Stream_Direction,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
RequestStreamDirection on interface org.freedesktop.Telepathy.Channel.Type.StreamedMedia.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Stream_ID</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Stream_Direction</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-streamed-media-implement-request-stream-direction" role="function">
<title>tp_svc_channel_type_streamed_media_implement_request_stream_direction ()</title>
<indexterm zone="tp-svc-channel-type-streamed-media-implement-request-stream-direction"><primary sortas="tp_svc_channel_type_streamed_media_implement_request_stream_direction">tp_svc_channel_type_streamed_media_implement_request_stream_direction</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_streamed_media_implement_request_stream_direction
                                                        (<link linkend="TpSvcChannelTypeStreamedMediaClass">TpSvcChannelTypeStreamedMediaClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-streamed-media-request-stream-direction-impl">tp_svc_channel_type_streamed_media_request_stream_direction_impl</link> impl);</programlisting>
<para>
Register an implementation for the RequestStreamDirection method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the RequestStreamDirection D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-streamed-media-return-from-request-stream-direction" role="function">
<title>tp_svc_channel_type_streamed_media_return_from_request_stream_direction ()</title>
<indexterm zone="tp-svc-channel-type-streamed-media-return-from-request-stream-direction"><primary sortas="tp_svc_channel_type_streamed_media_return_from_request_stream_direction">tp_svc_channel_type_streamed_media_return_from_request_stream_direction</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_streamed_media_return_from_request_stream_direction
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-streamed-media-request-streams-impl" role="function">
<title>tp_svc_channel_type_streamed_media_request_streams_impl ()</title>
<indexterm zone="tp-svc-channel-type-streamed-media-request-streams-impl"><primary sortas="tp_svc_channel_type_streamed_media_request_streams_impl">tp_svc_channel_type_streamed_media_request_streams_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_type_streamed_media_request_streams_impl)
                                                        (<link linkend="TpSvcChannelTypeStreamedMedia">TpSvcChannelTypeStreamedMedia</link> *self,
                                                         <link linkend="guint">guint</link> in_Contact_Handle,
                                                         const <link linkend="GArray">GArray</link> *in_Types,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
RequestStreams on interface org.freedesktop.Telepathy.Channel.Type.StreamedMedia.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Contact_Handle</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Types</parameter>&#160;:</term>
<listitem><simpara> const GArray * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-streamed-media-implement-request-streams" role="function">
<title>tp_svc_channel_type_streamed_media_implement_request_streams ()</title>
<indexterm zone="tp-svc-channel-type-streamed-media-implement-request-streams"><primary sortas="tp_svc_channel_type_streamed_media_implement_request_streams">tp_svc_channel_type_streamed_media_implement_request_streams</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_streamed_media_implement_request_streams
                                                        (<link linkend="TpSvcChannelTypeStreamedMediaClass">TpSvcChannelTypeStreamedMediaClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-streamed-media-request-streams-impl">tp_svc_channel_type_streamed_media_request_streams_impl</link> impl);</programlisting>
<para>
Register an implementation for the RequestStreams method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the RequestStreams D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-streamed-media-return-from-request-streams" role="function">
<title>tp_svc_channel_type_streamed_media_return_from_request_streams ()</title>
<indexterm zone="tp-svc-channel-type-streamed-media-return-from-request-streams"><primary sortas="tp_svc_channel_type_streamed_media_return_from_request_streams">tp_svc_channel_type_streamed_media_return_from_request_streams</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_streamed_media_return_from_request_streams
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *out_Streams);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Streams</parameter>&#160;:</term>
<listitem><simpara> const GPtrArray * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-streamed-media-emit-stream-added" role="function">
<title>tp_svc_channel_type_streamed_media_emit_stream_added ()</title>
<indexterm zone="tp-svc-channel-type-streamed-media-emit-stream-added"><primary sortas="tp_svc_channel_type_streamed_media_emit_stream_added">tp_svc_channel_type_streamed_media_emit_stream_added</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_streamed_media_emit_stream_added
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_Stream_ID,
                                                         <link linkend="guint">guint</link> arg_Contact_Handle,
                                                         <link linkend="guint">guint</link> arg_Stream_Type);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
StreamAdded signal on interface org.freedesktop.Telepathy.Channel.Type.StreamedMedia.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Stream_ID</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Contact_Handle</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Stream_Type</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-streamed-media-emit-stream-direction-changed" role="function">
<title>tp_svc_channel_type_streamed_media_emit_stream_direction_changed ()</title>
<indexterm zone="tp-svc-channel-type-streamed-media-emit-stream-direction-changed"><primary sortas="tp_svc_channel_type_streamed_media_emit_stream_direction_changed">tp_svc_channel_type_streamed_media_emit_stream_direction_changed</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_streamed_media_emit_stream_direction_changed
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_Stream_ID,
                                                         <link linkend="guint">guint</link> arg_Stream_Direction,
                                                         <link linkend="guint">guint</link> arg_Pending_Flags);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
StreamDirectionChanged signal on interface org.freedesktop.Telepathy.Channel.Type.StreamedMedia.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Stream_ID</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Stream_Direction</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Pending_Flags</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-streamed-media-emit-stream-error" role="function">
<title>tp_svc_channel_type_streamed_media_emit_stream_error ()</title>
<indexterm zone="tp-svc-channel-type-streamed-media-emit-stream-error"><primary sortas="tp_svc_channel_type_streamed_media_emit_stream_error">tp_svc_channel_type_streamed_media_emit_stream_error</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_streamed_media_emit_stream_error
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_Stream_ID,
                                                         <link linkend="guint">guint</link> arg_Error_Code,
                                                         const <link linkend="gchar">gchar</link> *arg_Message);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
StreamError signal on interface org.freedesktop.Telepathy.Channel.Type.StreamedMedia.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Stream_ID</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Error_Code</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Message</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-streamed-media-emit-stream-removed" role="function">
<title>tp_svc_channel_type_streamed_media_emit_stream_removed ()</title>
<indexterm zone="tp-svc-channel-type-streamed-media-emit-stream-removed"><primary sortas="tp_svc_channel_type_streamed_media_emit_stream_removed">tp_svc_channel_type_streamed_media_emit_stream_removed</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_streamed_media_emit_stream_removed
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_Stream_ID);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
StreamRemoved signal on interface org.freedesktop.Telepathy.Channel.Type.StreamedMedia.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Stream_ID</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-streamed-media-emit-stream-state-changed" role="function">
<title>tp_svc_channel_type_streamed_media_emit_stream_state_changed ()</title>
<indexterm zone="tp-svc-channel-type-streamed-media-emit-stream-state-changed"><primary sortas="tp_svc_channel_type_streamed_media_emit_stream_state_changed">tp_svc_channel_type_streamed_media_emit_stream_state_changed</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_streamed_media_emit_stream_state_changed
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_Stream_ID,
                                                         <link linkend="guint">guint</link> arg_Stream_State);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
StreamStateChanged signal on interface org.freedesktop.Telepathy.Channel.Type.StreamedMedia.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Stream_ID</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Stream_State</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TpSvcChannelInterfaceCallState-struct" role="struct">
<title>TpSvcChannelInterfaceCallState</title>
<indexterm zone="TpSvcChannelInterfaceCallState-struct"><primary sortas="TpSvcChannelInterfaceCallState">TpSvcChannelInterfaceCallState</primary></indexterm><programlisting>typedef struct _TpSvcChannelInterfaceCallState TpSvcChannelInterfaceCallState;</programlisting>
<para>
Dummy typedef representing any implementation of this interface.</para>
<para>
</para></refsect2>
<refsect2 id="TpSvcChannelInterfaceCallStateClass" role="struct">
<title>TpSvcChannelInterfaceCallStateClass</title>
<indexterm zone="TpSvcChannelInterfaceCallStateClass"><primary sortas="TpSvcChannelInterfaceCallStateClass">TpSvcChannelInterfaceCallStateClass</primary></indexterm><programlisting>typedef struct _TpSvcChannelInterfaceCallStateClass TpSvcChannelInterfaceCallStateClass;</programlisting>
<para>
The class of TpSvcChannelInterfaceCallState.
</para>
<para>
In a full implementation of this interface (i.e. all
methods implemented), the interface initialization
function used in <link linkend="G-IMPLEMENT-INTERFACE--CAPS"><function>G_IMPLEMENT_INTERFACE()</function></link> would
typically look like this:
</para>
<para>
<programlisting>
static void
implement_channel_interface_call_state (gpointer klass,
    gpointer unused G_GNUC_UNUSED)
{
#define IMPLEMENT(x) tp_svc_channel_interface_call_state_implement_##<link linkend="x">x</link> (\
  klass, my_object_##<link linkend="x">x</link>)
  IMPLEMENT (get_call_states);
#undef IMPLEMENT
}
</programlisting></para>
<para>
</para></refsect2>
<refsect2 id="tp-svc-channel-interface-call-state-emit-call-state-changed" role="function">
<title>tp_svc_channel_interface_call_state_emit_call_state_changed ()</title>
<indexterm zone="tp-svc-channel-interface-call-state-emit-call-state-changed"><primary sortas="tp_svc_channel_interface_call_state_emit_call_state_changed">tp_svc_channel_interface_call_state_emit_call_state_changed</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_call_state_emit_call_state_changed
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_Contact,
                                                         <link linkend="guint">guint</link> arg_State);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
CallStateChanged signal on interface org.freedesktop.Telepathy.Channel.Interface.CallState.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Contact</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_State</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-call-state-get-call-states-impl" role="function">
<title>tp_svc_channel_interface_call_state_get_call_states_impl ()</title>
<indexterm zone="tp-svc-channel-interface-call-state-get-call-states-impl"><primary sortas="tp_svc_channel_interface_call_state_get_call_states_impl">tp_svc_channel_interface_call_state_get_call_states_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_interface_call_state_get_call_states_impl)
                                                        (<link linkend="TpSvcChannelInterfaceCallState">TpSvcChannelInterfaceCallState</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
GetCallStates on interface org.freedesktop.Telepathy.Channel.Interface.CallState.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-call-state-implement-get-call-states" role="function">
<title>tp_svc_channel_interface_call_state_implement_get_call_states ()</title>
<indexterm zone="tp-svc-channel-interface-call-state-implement-get-call-states"><primary sortas="tp_svc_channel_interface_call_state_implement_get_call_states">tp_svc_channel_interface_call_state_implement_get_call_states</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_call_state_implement_get_call_states
                                                        (<link linkend="TpSvcChannelInterfaceCallStateClass">TpSvcChannelInterfaceCallStateClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-call-state-get-call-states-impl">tp_svc_channel_interface_call_state_get_call_states_impl</link> impl);</programlisting>
<para>
Register an implementation for the GetCallStates method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the GetCallStates D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-call-state-return-from-get-call-states" role="function">
<title>tp_svc_channel_interface_call_state_return_from_get_call_states ()</title>
<indexterm zone="tp-svc-channel-interface-call-state-return-from-get-call-states"><primary sortas="tp_svc_channel_interface_call_state_return_from_get_call_states">tp_svc_channel_interface_call_state_return_from_get_call_states</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_call_state_return_from_get_call_states
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         <link linkend="GHashTable">GHashTable</link> *out_States);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_States</parameter>&#160;:</term>
<listitem><simpara> GHashTable * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TpSvcChannelInterfaceDTMF-struct" role="struct">
<title>TpSvcChannelInterfaceDTMF</title>
<indexterm zone="TpSvcChannelInterfaceDTMF-struct"><primary sortas="TpSvcChannelInterfaceDTMF">TpSvcChannelInterfaceDTMF</primary></indexterm><programlisting>typedef struct _TpSvcChannelInterfaceDTMF TpSvcChannelInterfaceDTMF;</programlisting>
<para>
Dummy typedef representing any implementation of this interface.</para>
<para>
</para></refsect2>
<refsect2 id="TpSvcChannelInterfaceDTMFClass" role="struct">
<title>TpSvcChannelInterfaceDTMFClass</title>
<indexterm zone="TpSvcChannelInterfaceDTMFClass"><primary sortas="TpSvcChannelInterfaceDTMFClass">TpSvcChannelInterfaceDTMFClass</primary></indexterm><programlisting>typedef struct _TpSvcChannelInterfaceDTMFClass TpSvcChannelInterfaceDTMFClass;</programlisting>
<para>
The class of TpSvcChannelInterfaceDTMF.
</para>
<para>
In a full implementation of this interface (i.e. all
methods implemented), the interface initialization
function used in <link linkend="G-IMPLEMENT-INTERFACE--CAPS"><function>G_IMPLEMENT_INTERFACE()</function></link> would
typically look like this:
</para>
<para>
<programlisting>
static void
implement_channel_interface_dtmf (gpointer klass,
    gpointer unused G_GNUC_UNUSED)
{
#define IMPLEMENT(x) tp_svc_channel_interface_dtmf_implement_##<link linkend="x">x</link> (\
  klass, my_object_##<link linkend="x">x</link>)
  IMPLEMENT (start_tone);
  IMPLEMENT (stop_tone);
#undef IMPLEMENT
}
</programlisting></para>
<para>
</para></refsect2>
<refsect2 id="tp-svc-channel-interface-dtmf-implement-start-tone" role="function">
<title>tp_svc_channel_interface_dtmf_implement_start_tone ()</title>
<indexterm zone="tp-svc-channel-interface-dtmf-implement-start-tone"><primary sortas="tp_svc_channel_interface_dtmf_implement_start_tone">tp_svc_channel_interface_dtmf_implement_start_tone</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_dtmf_implement_start_tone
                                                        (<link linkend="TpSvcChannelInterfaceDTMFClass">TpSvcChannelInterfaceDTMFClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-dtmf-start-tone-impl">tp_svc_channel_interface_dtmf_start_tone_impl</link> impl);</programlisting>
<para>
Register an implementation for the StartTone method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the StartTone D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-dtmf-implement-stop-tone" role="function">
<title>tp_svc_channel_interface_dtmf_implement_stop_tone ()</title>
<indexterm zone="tp-svc-channel-interface-dtmf-implement-stop-tone"><primary sortas="tp_svc_channel_interface_dtmf_implement_stop_tone">tp_svc_channel_interface_dtmf_implement_stop_tone</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_dtmf_implement_stop_tone
                                                        (<link linkend="TpSvcChannelInterfaceDTMFClass">TpSvcChannelInterfaceDTMFClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-dtmf-stop-tone-impl">tp_svc_channel_interface_dtmf_stop_tone_impl</link> impl);</programlisting>
<para>
Register an implementation for the StopTone method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the StopTone D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-dtmf-return-from-start-tone" role="function">
<title>tp_svc_channel_interface_dtmf_return_from_start_tone ()</title>
<indexterm zone="tp-svc-channel-interface-dtmf-return-from-start-tone"><primary sortas="tp_svc_channel_interface_dtmf_return_from_start_tone">tp_svc_channel_interface_dtmf_return_from_start_tone</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_dtmf_return_from_start_tone
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-dtmf-return-from-stop-tone" role="function">
<title>tp_svc_channel_interface_dtmf_return_from_stop_tone ()</title>
<indexterm zone="tp-svc-channel-interface-dtmf-return-from-stop-tone"><primary sortas="tp_svc_channel_interface_dtmf_return_from_stop_tone">tp_svc_channel_interface_dtmf_return_from_stop_tone</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_dtmf_return_from_stop_tone
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-dtmf-start-tone-impl" role="function">
<title>tp_svc_channel_interface_dtmf_start_tone_impl ()</title>
<indexterm zone="tp-svc-channel-interface-dtmf-start-tone-impl"><primary sortas="tp_svc_channel_interface_dtmf_start_tone_impl">tp_svc_channel_interface_dtmf_start_tone_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_interface_dtmf_start_tone_impl)
                                                        (<link linkend="TpSvcChannelInterfaceDTMF">TpSvcChannelInterfaceDTMF</link> *self,
                                                         <link linkend="guint">guint</link> in_Stream_ID,
                                                         <link linkend="guchar">guchar</link> in_Event,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
StartTone on interface org.freedesktop.Telepathy.Channel.Interface.DTMF.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Stream_ID</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Event</parameter>&#160;:</term>
<listitem><simpara> guchar  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-dtmf-stop-tone-impl" role="function">
<title>tp_svc_channel_interface_dtmf_stop_tone_impl ()</title>
<indexterm zone="tp-svc-channel-interface-dtmf-stop-tone-impl"><primary sortas="tp_svc_channel_interface_dtmf_stop_tone_impl">tp_svc_channel_interface_dtmf_stop_tone_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_interface_dtmf_stop_tone_impl)
                                                        (<link linkend="TpSvcChannelInterfaceDTMF">TpSvcChannelInterfaceDTMF</link> *self,
                                                         <link linkend="guint">guint</link> in_Stream_ID,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
StopTone on interface org.freedesktop.Telepathy.Channel.Interface.DTMF.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Stream_ID</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TpSvcChannelInterfaceHold-struct" role="struct">
<title>TpSvcChannelInterfaceHold</title>
<indexterm zone="TpSvcChannelInterfaceHold-struct"><primary sortas="TpSvcChannelInterfaceHold">TpSvcChannelInterfaceHold</primary></indexterm><programlisting>typedef struct _TpSvcChannelInterfaceHold TpSvcChannelInterfaceHold;</programlisting>
<para>
Dummy typedef representing any implementation of this interface.</para>
<para>
</para></refsect2>
<refsect2 id="TpSvcChannelInterfaceHoldClass" role="struct">
<title>TpSvcChannelInterfaceHoldClass</title>
<indexterm zone="TpSvcChannelInterfaceHoldClass"><primary sortas="TpSvcChannelInterfaceHoldClass">TpSvcChannelInterfaceHoldClass</primary></indexterm><programlisting>typedef struct _TpSvcChannelInterfaceHoldClass TpSvcChannelInterfaceHoldClass;</programlisting>
<para>
The class of TpSvcChannelInterfaceHold.
</para>
<para>
In a full implementation of this interface (i.e. all
methods implemented), the interface initialization
function used in <link linkend="G-IMPLEMENT-INTERFACE--CAPS"><function>G_IMPLEMENT_INTERFACE()</function></link> would
typically look like this:
</para>
<para>
<programlisting>
static void
implement_channel_interface_hold (gpointer klass,
    gpointer unused G_GNUC_UNUSED)
{
#define IMPLEMENT(x) tp_svc_channel_interface_hold_implement_##<link linkend="x">x</link> (\
  klass, my_object_##<link linkend="x">x</link>)
  IMPLEMENT (get_hold_state);
  IMPLEMENT (request_hold);
#undef IMPLEMENT
}
</programlisting></para>
<para>
</para></refsect2>
<refsect2 id="tp-svc-channel-interface-hold-get-hold-state-impl" role="function">
<title>tp_svc_channel_interface_hold_get_hold_state_impl ()</title>
<indexterm zone="tp-svc-channel-interface-hold-get-hold-state-impl"><primary sortas="tp_svc_channel_interface_hold_get_hold_state_impl">tp_svc_channel_interface_hold_get_hold_state_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_interface_hold_get_hold_state_impl)
                                                        (<link linkend="TpSvcChannelInterfaceHold">TpSvcChannelInterfaceHold</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
GetHoldState on interface org.freedesktop.Telepathy.Channel.Interface.Hold.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-hold-return-from-get-hold-state" role="function">
<title>tp_svc_channel_interface_hold_return_from_get_hold_state ()</title>
<indexterm zone="tp-svc-channel-interface-hold-return-from-get-hold-state"><primary sortas="tp_svc_channel_interface_hold_return_from_get_hold_state">tp_svc_channel_interface_hold_return_from_get_hold_state</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_hold_return_from_get_hold_state
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         <link linkend="guint">guint</link> out_HoldState,
                                                         <link linkend="guint">guint</link> out_Reason);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_HoldState</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Reason</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-hold-implement-get-hold-state" role="function">
<title>tp_svc_channel_interface_hold_implement_get_hold_state ()</title>
<indexterm zone="tp-svc-channel-interface-hold-implement-get-hold-state"><primary sortas="tp_svc_channel_interface_hold_implement_get_hold_state">tp_svc_channel_interface_hold_implement_get_hold_state</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_hold_implement_get_hold_state
                                                        (<link linkend="TpSvcChannelInterfaceHoldClass">TpSvcChannelInterfaceHoldClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-hold-get-hold-state-impl">tp_svc_channel_interface_hold_get_hold_state_impl</link> impl);</programlisting>
<para>
Register an implementation for the GetHoldState method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the GetHoldState D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-hold-request-hold-impl" role="function">
<title>tp_svc_channel_interface_hold_request_hold_impl ()</title>
<indexterm zone="tp-svc-channel-interface-hold-request-hold-impl"><primary sortas="tp_svc_channel_interface_hold_request_hold_impl">tp_svc_channel_interface_hold_request_hold_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_interface_hold_request_hold_impl)
                                                        (<link linkend="TpSvcChannelInterfaceHold">TpSvcChannelInterfaceHold</link> *self,
                                                         <link linkend="gboolean">gboolean</link> in_Hold,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
RequestHold on interface org.freedesktop.Telepathy.Channel.Interface.Hold.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Hold</parameter>&#160;:</term>
<listitem><simpara> gboolean  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-hold-return-from-request-hold" role="function">
<title>tp_svc_channel_interface_hold_return_from_request_hold ()</title>
<indexterm zone="tp-svc-channel-interface-hold-return-from-request-hold"><primary sortas="tp_svc_channel_interface_hold_return_from_request_hold">tp_svc_channel_interface_hold_return_from_request_hold</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_hold_return_from_request_hold
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-hold-implement-request-hold" role="function">
<title>tp_svc_channel_interface_hold_implement_request_hold ()</title>
<indexterm zone="tp-svc-channel-interface-hold-implement-request-hold"><primary sortas="tp_svc_channel_interface_hold_implement_request_hold">tp_svc_channel_interface_hold_implement_request_hold</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_hold_implement_request_hold
                                                        (<link linkend="TpSvcChannelInterfaceHoldClass">TpSvcChannelInterfaceHoldClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-hold-request-hold-impl">tp_svc_channel_interface_hold_request_hold_impl</link> impl);</programlisting>
<para>
Register an implementation for the RequestHold method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the RequestHold D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-hold-emit-hold-state-changed" role="function">
<title>tp_svc_channel_interface_hold_emit_hold_state_changed ()</title>
<indexterm zone="tp-svc-channel-interface-hold-emit-hold-state-changed"><primary sortas="tp_svc_channel_interface_hold_emit_hold_state_changed">tp_svc_channel_interface_hold_emit_hold_state_changed</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_hold_emit_hold_state_changed
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_HoldState,
                                                         <link linkend="guint">guint</link> arg_Reason);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
HoldStateChanged signal on interface org.freedesktop.Telepathy.Channel.Interface.Hold.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_HoldState</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Reason</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TpSvcChannelInterfaceMediaSignalling-struct" role="struct">
<title>TpSvcChannelInterfaceMediaSignalling</title>
<indexterm zone="TpSvcChannelInterfaceMediaSignalling-struct"><primary sortas="TpSvcChannelInterfaceMediaSignalling">TpSvcChannelInterfaceMediaSignalling</primary></indexterm><programlisting>typedef struct _TpSvcChannelInterfaceMediaSignalling TpSvcChannelInterfaceMediaSignalling;</programlisting>
<para>
Dummy typedef representing any implementation of this interface.</para>
<para>
</para></refsect2>
<refsect2 id="TpSvcChannelInterfaceMediaSignallingClass" role="struct">
<title>TpSvcChannelInterfaceMediaSignallingClass</title>
<indexterm zone="TpSvcChannelInterfaceMediaSignallingClass"><primary sortas="TpSvcChannelInterfaceMediaSignallingClass">TpSvcChannelInterfaceMediaSignallingClass</primary></indexterm><programlisting>typedef struct _TpSvcChannelInterfaceMediaSignallingClass TpSvcChannelInterfaceMediaSignallingClass;</programlisting>
<para>
The class of TpSvcChannelInterfaceMediaSignalling.
</para>
<para>
In a full implementation of this interface (i.e. all
methods implemented), the interface initialization
function used in <link linkend="G-IMPLEMENT-INTERFACE--CAPS"><function>G_IMPLEMENT_INTERFACE()</function></link> would
typically look like this:
</para>
<para>
<programlisting>
static void
implement_channel_interface_media_signalling (gpointer klass,
    gpointer unused G_GNUC_UNUSED)
{
#define IMPLEMENT(x) tp_svc_channel_interface_media_signalling_implement_##<link linkend="x">x</link> (\
  klass, my_object_##<link linkend="x">x</link>)
  IMPLEMENT (get_session_handlers);
#undef IMPLEMENT
}
</programlisting></para>
<para>
</para></refsect2>
<refsect2 id="tp-svc-channel-interface-media-signalling-get-session-handlers-impl" role="function">
<title>tp_svc_channel_interface_media_signalling_get_session_handlers_impl ()</title>
<indexterm zone="tp-svc-channel-interface-media-signalling-get-session-handlers-impl"><primary sortas="tp_svc_channel_interface_media_signalling_get_session_handlers_impl">tp_svc_channel_interface_media_signalling_get_session_handlers_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_interface_media_signalling_get_session_handlers_impl)
                                                        (<link linkend="TpSvcChannelInterfaceMediaSignalling">TpSvcChannelInterfaceMediaSignalling</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
GetSessionHandlers on interface org.freedesktop.Telepathy.Channel.Interface.MediaSignalling.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-media-signalling-implement-get-session-handlers" role="function">
<title>tp_svc_channel_interface_media_signalling_implement_get_session_handlers ()</title>
<indexterm zone="tp-svc-channel-interface-media-signalling-implement-get-session-handlers"><primary sortas="tp_svc_channel_interface_media_signalling_implement_get_session_handlers">tp_svc_channel_interface_media_signalling_implement_get_session_handlers</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_media_signalling_implement_get_session_handlers
                                                        (<link linkend="TpSvcChannelInterfaceMediaSignallingClass">TpSvcChannelInterfaceMediaSignallingClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-media-signalling-get-session-handlers-impl">tp_svc_channel_interface_media_signalling_get_session_handlers_impl</link> impl);</programlisting>
<para>
Register an implementation for the GetSessionHandlers method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the GetSessionHandlers D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-media-signalling-return-from-get-session-handlers" role="function">
<title>tp_svc_channel_interface_media_signalling_return_from_get_session_handlers ()</title>
<indexterm zone="tp-svc-channel-interface-media-signalling-return-from-get-session-handlers"><primary sortas="tp_svc_channel_interface_media_signalling_return_from_get_session_handlers">tp_svc_channel_interface_media_signalling_return_from_get_session_handlers</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_media_signalling_return_from_get_session_handlers
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *out_Session_Handlers);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Session_Handlers</parameter>&#160;:</term>
<listitem><simpara> const GPtrArray * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-media-signalling-emit-new-session-handler" role="function">
<title>tp_svc_channel_interface_media_signalling_emit_new_session_handler ()</title>
<indexterm zone="tp-svc-channel-interface-media-signalling-emit-new-session-handler"><primary sortas="tp_svc_channel_interface_media_signalling_emit_new_session_handler">tp_svc_channel_interface_media_signalling_emit_new_session_handler</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_media_signalling_emit_new_session_handler
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="gchar">gchar</link> *arg_Session_Handler,
                                                         const <link linkend="gchar">gchar</link> *arg_Session_Type);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
NewSessionHandler signal on interface org.freedesktop.Telepathy.Channel.Interface.MediaSignalling.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Session_Handler</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Session_Type</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

<refsect1 id="telepathy-glib-svc-channel-media.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="TpSvcChannelTypeStreamedMedia-stream-added" role="signal"><title>The <literal>&quot;stream-added&quot;</literal> signal</title>
<indexterm zone="TpSvcChannelTypeStreamedMedia-stream-added"><primary sortas="TpSvcChannelTypeStreamedMedia::stream-added">TpSvcChannelTypeStreamedMedia::stream-added</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcChannelTypeStreamedMedia">TpSvcChannelTypeStreamedMedia</link> *arg_Stream_ID,
                                                        <link linkend="guint">guint</link>                          arg_Contact_Handle,
                                                        <link linkend="guint">guint</link>                          arg_Stream_Type,
                                                        <link linkend="guint">guint</link>                          arg3,
                                                        <link linkend="gpointer">gpointer</link>                       user_data)               : Run Last / Has Details</programlisting>
<para>
The StreamAdded D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>arg_Stream_ID</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Contact_Handle</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Stream_Type</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpSvcChannelTypeStreamedMedia-stream-direction-changed" role="signal"><title>The <literal>&quot;stream-direction-changed&quot;</literal> signal</title>
<indexterm zone="TpSvcChannelTypeStreamedMedia-stream-direction-changed"><primary sortas="TpSvcChannelTypeStreamedMedia::stream-direction-changed">TpSvcChannelTypeStreamedMedia::stream-direction-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcChannelTypeStreamedMedia">TpSvcChannelTypeStreamedMedia</link> *arg_Stream_ID,
                                                        <link linkend="guint">guint</link>                          arg_Stream_Direction,
                                                        <link linkend="guint">guint</link>                          arg_Pending_Flags,
                                                        <link linkend="guint">guint</link>                          arg3,
                                                        <link linkend="gpointer">gpointer</link>                       user_data)                 : Run Last / Has Details</programlisting>
<para>
The StreamDirectionChanged D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>arg_Stream_ID</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Stream_Direction</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Pending_Flags</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpSvcChannelTypeStreamedMedia-stream-error" role="signal"><title>The <literal>&quot;stream-error&quot;</literal> signal</title>
<indexterm zone="TpSvcChannelTypeStreamedMedia-stream-error"><primary sortas="TpSvcChannelTypeStreamedMedia::stream-error">TpSvcChannelTypeStreamedMedia::stream-error</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcChannelTypeStreamedMedia">TpSvcChannelTypeStreamedMedia</link> *arg_Stream_ID,
                                                        <link linkend="guint">guint</link>                          arg_Error_Code,
                                                        <link linkend="guint">guint</link>                          arg_Message,
                                                        <link linkend="gchar">gchar</link>                         *arg3,
                                                        <link linkend="gpointer">gpointer</link>                       user_data)           : Run Last / Has Details</programlisting>
<para>
The StreamError D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>arg_Stream_ID</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Error_Code</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Message</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpSvcChannelTypeStreamedMedia-stream-removed" role="signal"><title>The <literal>&quot;stream-removed&quot;</literal> signal</title>
<indexterm zone="TpSvcChannelTypeStreamedMedia-stream-removed"><primary sortas="TpSvcChannelTypeStreamedMedia::stream-removed">TpSvcChannelTypeStreamedMedia::stream-removed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcChannelTypeStreamedMedia">TpSvcChannelTypeStreamedMedia</link> *arg_Stream_ID,
                                                        <link linkend="guint">guint</link>                          arg1,
                                                        <link linkend="gpointer">gpointer</link>                       user_data)          : Run Last / Has Details</programlisting>
<para>
The StreamRemoved D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>arg_Stream_ID</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpSvcChannelTypeStreamedMedia-stream-state-changed" role="signal"><title>The <literal>&quot;stream-state-changed&quot;</literal> signal</title>
<indexterm zone="TpSvcChannelTypeStreamedMedia-stream-state-changed"><primary sortas="TpSvcChannelTypeStreamedMedia::stream-state-changed">TpSvcChannelTypeStreamedMedia::stream-state-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcChannelTypeStreamedMedia">TpSvcChannelTypeStreamedMedia</link> *arg_Stream_ID,
                                                        <link linkend="guint">guint</link>                          arg_Stream_State,
                                                        <link linkend="guint">guint</link>                          arg2,
                                                        <link linkend="gpointer">gpointer</link>                       user_data)             : Run Last / Has Details</programlisting>
<para>
The StreamStateChanged D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>arg_Stream_ID</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Stream_State</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpSvcChannelInterfaceCallState-call-state-changed" role="signal"><title>The <literal>&quot;call-state-changed&quot;</literal> signal</title>
<indexterm zone="TpSvcChannelInterfaceCallState-call-state-changed"><primary sortas="TpSvcChannelInterfaceCallState::call-state-changed">TpSvcChannelInterfaceCallState::call-state-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcChannelInterfaceCallState">TpSvcChannelInterfaceCallState</link> *arg_Contact,
                                                        <link linkend="guint">guint</link>                           arg_State,
                                                        <link linkend="guint">guint</link>                           arg2,
                                                        <link linkend="gpointer">gpointer</link>                        user_data)        : Run Last / Has Details</programlisting>
<para>
The CallStateChanged D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>arg_Contact</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_State</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpSvcChannelInterfaceHold-hold-state-changed" role="signal"><title>The <literal>&quot;hold-state-changed&quot;</literal> signal</title>
<indexterm zone="TpSvcChannelInterfaceHold-hold-state-changed"><primary sortas="TpSvcChannelInterfaceHold::hold-state-changed">TpSvcChannelInterfaceHold::hold-state-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcChannelInterfaceHold">TpSvcChannelInterfaceHold</link> *arg_HoldState,
                                                        <link linkend="guint">guint</link>                      arg_Reason,
                                                        <link linkend="guint">guint</link>                      arg2,
                                                        <link linkend="gpointer">gpointer</link>                   user_data)          : Run Last / Has Details</programlisting>
<para>
The HoldStateChanged D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>arg_HoldState</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Reason</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpSvcChannelInterfaceMediaSignalling-new-session-handler" role="signal"><title>The <literal>&quot;new-session-handler&quot;</literal> signal</title>
<indexterm zone="TpSvcChannelInterfaceMediaSignalling-new-session-handler"><primary sortas="TpSvcChannelInterfaceMediaSignalling::new-session-handler">TpSvcChannelInterfaceMediaSignalling::new-session-handler</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcChannelInterfaceMediaSignalling">TpSvcChannelInterfaceMediaSignalling</link> *arg_Session_Handler,
                                                        <link linkend="DBusGObjectPath">DBusGObjectPath</link>                      *arg_Session_Type,
                                                        <link linkend="gchar">gchar</link>                                *arg2,
                                                        <link linkend="gpointer">gpointer</link>                              user_data)                : Run Last / Has Details</programlisting>
<para>
The NewSessionHandler D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>arg_Session_Handler</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Session_Type</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>



</refentry>
