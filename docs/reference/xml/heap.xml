<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-TpHeap">
<refmeta>
<refentrytitle role="top_of_page">TpHeap</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>TpHeap</refname>
<refpurpose>a heap queue of pointers</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;telepathy-glib/heap.h&gt;


                    <link linkend="TpHeap">TpHeap</link>;
<link linkend="TpHeap">TpHeap</link>*             <link linkend="tp-heap-new">tp_heap_new</link>                         (<link linkend="GCompareFunc">GCompareFunc</link> comparator,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destructor);
<link linkend="void">void</link>                <link linkend="tp-heap-destroy">tp_heap_destroy</link>                     (<link linkend="TpHeap">TpHeap</link> *heap);
<link linkend="void">void</link>                <link linkend="tp-heap-clear">tp_heap_clear</link>                       (<link linkend="TpHeap">TpHeap</link> *heap);
<link linkend="void">void</link>                <link linkend="tp-heap-add">tp_heap_add</link>                         (<link linkend="TpHeap">TpHeap</link> *heap,
                                                         <link linkend="gpointer">gpointer</link> element);
<link linkend="void">void</link>                <link linkend="tp-heap-remove">tp_heap_remove</link>                      (<link linkend="TpHeap">TpHeap</link> *heap,
                                                         <link linkend="gpointer">gpointer</link> element);
<link linkend="gpointer">gpointer</link>            <link linkend="tp-heap-peek-first">tp_heap_peek_first</link>                  (<link linkend="TpHeap">TpHeap</link> *heap);
<link linkend="gpointer">gpointer</link>            <link linkend="tp-heap-extract-first">tp_heap_extract_first</link>               (<link linkend="TpHeap">TpHeap</link> *heap);
<link linkend="guint">guint</link>               <link linkend="tp-heap-size">tp_heap_size</link>                        (<link linkend="TpHeap">TpHeap</link> *heap);
</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
A heap queue of pointers.</para>
<para>

</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="TpHeap" role="struct"/>TpHeap</title>
<indexterm><primary>TpHeap</primary></indexterm><programlisting>typedef struct _TpHeap TpHeap;</programlisting>
<para>
Structure representing the heap queue. All fields are private.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="tp-heap-new" role="function"/>tp_heap_new ()</title>
<indexterm><primary>tp_heap_new</primary></indexterm><programlisting><link linkend="TpHeap">TpHeap</link>*             tp_heap_new                         (<link linkend="GCompareFunc">GCompareFunc</link> comparator,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destructor);</programlisting>
<para>
<!--Returns: says it all--></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>comparator</parameter>&nbsp;:</term>
<listitem><simpara> Comparator by which to order the pointers in the heap
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destructor</parameter>&nbsp;:</term>
<listitem><simpara> Function to call on the pointers when the heap is destroyed
 or cleared, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if this is not needed
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> A new, empty heap queue.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-heap-destroy" role="function"/>tp_heap_destroy ()</title>
<indexterm><primary>tp_heap_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                tp_heap_destroy                     (<link linkend="TpHeap">TpHeap</link> *heap);</programlisting>
<para>
Destroy a <link linkend="TpHeap"><type>TpHeap</type></link>. The destructor, if any, is called on all items.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>heap</parameter>&nbsp;:</term>
<listitem><simpara> The heap queue
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-heap-clear" role="function"/>tp_heap_clear ()</title>
<indexterm><primary>tp_heap_clear</primary></indexterm><programlisting><link linkend="void">void</link>                tp_heap_clear                       (<link linkend="TpHeap">TpHeap</link> *heap);</programlisting>
<para>
Remove all items from a <link linkend="TpHeap"><type>TpHeap</type></link>. The destructor, if any, is called on all
items.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>heap</parameter>&nbsp;:</term>
<listitem><simpara> The heap queue
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-heap-add" role="function"/>tp_heap_add ()</title>
<indexterm><primary>tp_heap_add</primary></indexterm><programlisting><link linkend="void">void</link>                tp_heap_add                         (<link linkend="TpHeap">TpHeap</link> *heap,
                                                         <link linkend="gpointer">gpointer</link> element);</programlisting>
<para>
Add element to the heap queue, maintaining correct order.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>heap</parameter>&nbsp;:</term>
<listitem><simpara> The heap queue
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>element</parameter>&nbsp;:</term>
<listitem><simpara> An element
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-heap-remove" role="function"/>tp_heap_remove ()</title>
<indexterm><primary>tp_heap_remove</primary></indexterm><programlisting><link linkend="void">void</link>                tp_heap_remove                      (<link linkend="TpHeap">TpHeap</link> *heap,
                                                         <link linkend="gpointer">gpointer</link> element);</programlisting>
<para>
Remove <parameter>element</parameter> from <parameter>heap</parameter>, if it's present. The destructor, if any,
is not called.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>heap</parameter>&nbsp;:</term>
<listitem><simpara> The heap queue
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>element</parameter>&nbsp;:</term>
<listitem><simpara> An element in the heap
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-heap-peek-first" role="function"/>tp_heap_peek_first ()</title>
<indexterm><primary>tp_heap_peek_first</primary></indexterm><programlisting><link linkend="gpointer">gpointer</link>            tp_heap_peek_first                  (<link linkend="TpHeap">TpHeap</link> *heap);</programlisting>
<para>
<!--Returns: says it all--></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>heap</parameter>&nbsp;:</term>
<listitem><simpara> The heap queue
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The first item in the queue, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if the queue is empty
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-heap-extract-first" role="function"/>tp_heap_extract_first ()</title>
<indexterm><primary>tp_heap_extract_first</primary></indexterm><programlisting><link linkend="gpointer">gpointer</link>            tp_heap_extract_first               (<link linkend="TpHeap">TpHeap</link> *heap);</programlisting>
<para>
Remove and return the first element in the queue. The destructor, if any,
is not called.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>heap</parameter>&nbsp;:</term>
<listitem><simpara> The heap queue
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the removed element
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-heap-size" role="function"/>tp_heap_size ()</title>
<indexterm><primary>tp_heap_size</primary></indexterm><programlisting><link linkend="guint">guint</link>               tp_heap_size                        (<link linkend="TpHeap">TpHeap</link> *heap);</programlisting>
<para>
<!--Returns: says it all--></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>heap</parameter>&nbsp;:</term>
<listitem><simpara> The heap queue
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The number of items in <parameter>heap</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>





<refsect1><refsect2 /><refsect2 /></refsect1>
</refentry>
