<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-svc-channel-text">
<refmeta>
<refentrytitle role="top_of_page" id="telepathy-glib-svc-channel-text.top_of_page">Text channels</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Text channels</refname>
<refpurpose>service-side interfaces for the Text channel type, and
 the Chat State and Password interfaces</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv id="telepathy-glib-svc-channel-text.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;telepathy-glib/svc-channel-text.h&gt;

                    <link linkend="TpSvcChannelTypeText">TpSvcChannelTypeText</link>;
                    <link linkend="TpSvcChannelTypeTextClass">TpSvcChannelTypeTextClass</link>;
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-type-text-acknowledge-pending-messages-impl">*tp_svc_channel_type_text_acknowledge_pending_messages_impl</link>)
                                                        (<link linkend="TpSvcChannelTypeText">TpSvcChannelTypeText</link> *self,
                                                         const <link linkend="GArray">GArray</link> *in_ids,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-text-implement-acknowledge-pending-messages">tp_svc_channel_type_text_implement_acknowledge_pending_messages</link>
                                                        (<link linkend="TpSvcChannelTypeTextClass">TpSvcChannelTypeTextClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-text-acknowledge-pending-messages-impl">tp_svc_channel_type_text_acknowledge_pending_messages_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-text-return-from-acknowledge-pending-messages">tp_svc_channel_type_text_return_from_acknowledge_pending_messages</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-type-text-get-message-types-impl">*tp_svc_channel_type_text_get_message_types_impl</link>)
                                                        (<link linkend="TpSvcChannelTypeText">TpSvcChannelTypeText</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-text-implement-get-message-types">tp_svc_channel_type_text_implement_get_message_types</link>
                                                        (<link linkend="TpSvcChannelTypeTextClass">TpSvcChannelTypeTextClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-text-get-message-types-impl">tp_svc_channel_type_text_get_message_types_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-text-return-from-get-message-types">tp_svc_channel_type_text_return_from_get_message_types</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         const <link linkend="GArray">GArray</link> *out0);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-type-text-list-pending-messages-impl">*tp_svc_channel_type_text_list_pending_messages_impl</link>)
                                                        (<link linkend="TpSvcChannelTypeText">TpSvcChannelTypeText</link> *self,
                                                         <link linkend="gboolean">gboolean</link> in_clear,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-text-implement-list-pending-messages">tp_svc_channel_type_text_implement_list_pending_messages</link>
                                                        (<link linkend="TpSvcChannelTypeTextClass">TpSvcChannelTypeTextClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-text-list-pending-messages-impl">tp_svc_channel_type_text_list_pending_messages_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-text-return-from-list-pending-messages">tp_svc_channel_type_text_return_from_list_pending_messages</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *out0);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-type-text-send-impl">*tp_svc_channel_type_text_send_impl</link>)
                                                        (<link linkend="TpSvcChannelTypeText">TpSvcChannelTypeText</link> *self,
                                                         <link linkend="guint">guint</link> in_type,
                                                         const <link linkend="gchar">gchar</link> *in_text,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-text-implement-send">tp_svc_channel_type_text_implement_send</link>
                                                        (<link linkend="TpSvcChannelTypeTextClass">TpSvcChannelTypeTextClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-text-send-impl">tp_svc_channel_type_text_send_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-text-return-from-send">tp_svc_channel_type_text_return_from_send</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-text-emit-lost-message">tp_svc_channel_type_text_emit_lost_message</link>
                                                        (<link linkend="gpointer">gpointer</link> instance);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-text-emit-received">tp_svc_channel_type_text_emit_received</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_id,
                                                         <link linkend="guint">guint</link> arg_timestamp,
                                                         <link linkend="guint">guint</link> arg_sender,
                                                         <link linkend="guint">guint</link> arg_type,
                                                         <link linkend="guint">guint</link> arg_flags,
                                                         const <link linkend="gchar">gchar</link> *arg_text);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-text-emit-send-error">tp_svc_channel_type_text_emit_send_error</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_error,
                                                         <link linkend="guint">guint</link> arg_timestamp,
                                                         <link linkend="guint">guint</link> arg_type,
                                                         const <link linkend="gchar">gchar</link> *arg_text);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-text-emit-sent">tp_svc_channel_type_text_emit_sent</link>  (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_timestamp,
                                                         <link linkend="guint">guint</link> arg_type,
                                                         const <link linkend="gchar">gchar</link> *arg_text);


                    <link linkend="TpSvcChannelInterfaceChatState">TpSvcChannelInterfaceChatState</link>;
                    <link linkend="TpSvcChannelInterfaceChatStateClass">TpSvcChannelInterfaceChatStateClass</link>;
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-interface-chat-state-set-chat-state-impl">*tp_svc_channel_interface_chat_state_set_chat_state_impl</link>)
                                                        (<link linkend="TpSvcChannelInterfaceChatState">TpSvcChannelInterfaceChatState</link> *self,
                                                         <link linkend="guint">guint</link> in_state,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-chat-state-implement-set-chat-state">tp_svc_channel_interface_chat_state_implement_set_chat_state</link>
                                                        (<link linkend="TpSvcChannelInterfaceChatStateClass">TpSvcChannelInterfaceChatStateClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-chat-state-set-chat-state-impl">tp_svc_channel_interface_chat_state_set_chat_state_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-chat-state-return-from-set-chat-state">tp_svc_channel_interface_chat_state_return_from_set_chat_state</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-chat-state-emit-chat-state-changed">tp_svc_channel_interface_chat_state_emit_chat_state_changed</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_contact,
                                                         <link linkend="guint">guint</link> arg_state);


                    <link linkend="TpSvcChannelInterfacePassword">TpSvcChannelInterfacePassword</link>;
                    <link linkend="TpSvcChannelInterfacePasswordClass">TpSvcChannelInterfacePasswordClass</link>;
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-interface-password-get-password-flags-impl">*tp_svc_channel_interface_password_get_password_flags_impl</link>)
                                                        (<link linkend="TpSvcChannelInterfacePassword">TpSvcChannelInterfacePassword</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-password-implement-get-password-flags">tp_svc_channel_interface_password_implement_get_password_flags</link>
                                                        (<link linkend="TpSvcChannelInterfacePasswordClass">TpSvcChannelInterfacePasswordClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-password-get-password-flags-impl">tp_svc_channel_interface_password_get_password_flags_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-password-return-from-get-password-flags">tp_svc_channel_interface_password_return_from_get_password_flags</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         <link linkend="guint">guint</link> out0);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-interface-password-provide-password-impl">*tp_svc_channel_interface_password_provide_password_impl</link>)
                                                        (<link linkend="TpSvcChannelInterfacePassword">TpSvcChannelInterfacePassword</link> *self,
                                                         const <link linkend="gchar">gchar</link> *in_password,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-password-implement-provide-password">tp_svc_channel_interface_password_implement_provide_password</link>
                                                        (<link linkend="TpSvcChannelInterfacePasswordClass">TpSvcChannelInterfacePasswordClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-password-provide-password-impl">tp_svc_channel_interface_password_provide_password_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-password-return-from-provide-password">tp_svc_channel_interface_password_return_from_provide_password</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         <link linkend="gboolean">gboolean</link> out0);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-password-emit-password-flags-changed">tp_svc_channel_interface_password_emit_password_flags_changed</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_added,
                                                         <link linkend="guint">guint</link> arg_removed);
</synopsis>
</refsynopsisdiv>









<refsect1 id="telepathy-glib-svc-channel-text.description" role="desc">
<title role="desc.title">Description</title>
<para>
A major use for instant messaging is obviously to send messages.
Channels of type Text represent IM conversations or chat rooms.
</para>
<para>
This section documents the auto-generated GInterfaces used to implement
the Text channel type, and some interfaces used in conjunction with it.</para>
<para>

</para>
</refsect1>

<refsect1 id="telepathy-glib-svc-channel-text.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="TpSvcChannelTypeText" role="struct">
<title>TpSvcChannelTypeText</title>
<indexterm zone="TpSvcChannelTypeText"><primary>TpSvcChannelTypeText</primary></indexterm><programlisting>typedef struct _TpSvcChannelTypeText TpSvcChannelTypeText;</programlisting>
<para>
Dummy typedef representing any implementation of this interface.</para>
<para>

</para></refsect2>
<refsect2 id="TpSvcChannelTypeTextClass" role="struct">
<title>TpSvcChannelTypeTextClass</title>
<indexterm zone="TpSvcChannelTypeTextClass"><primary>TpSvcChannelTypeTextClass</primary></indexterm><programlisting>typedef struct _TpSvcChannelTypeTextClass TpSvcChannelTypeTextClass;</programlisting>
<para>
The class of TpSvcChannelTypeText.</para>
<para>

</para></refsect2>
<refsect2 id="tp-svc-channel-type-text-acknowledge-pending-messages-impl" role="function">
<title>tp_svc_channel_type_text_acknowledge_pending_messages_impl ()</title>
<indexterm zone="tp-svc-channel-type-text-acknowledge-pending-messages-impl"><primary>tp_svc_channel_type_text_acknowledge_pending_messages_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_type_text_acknowledge_pending_messages_impl)
                                                        (<link linkend="TpSvcChannelTypeText">TpSvcChannelTypeText</link> *self,
                                                         const <link linkend="GArray">GArray</link> *in_ids,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
AcknowledgePendingMessages on interface org.freedesktop.Telepathy.Channel.Type.Text.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_ids</parameter>&nbsp;:</term>
<listitem><simpara> const GArray * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-implement-acknowledge-pending-messages" role="function">
<title>tp_svc_channel_type_text_implement_acknowledge_pending_messages ()</title>
<indexterm zone="tp-svc-channel-type-text-implement-acknowledge-pending-messages"><primary>tp_svc_channel_type_text_implement_acknowledge_pending_messages</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_text_implement_acknowledge_pending_messages
                                                        (<link linkend="TpSvcChannelTypeTextClass">TpSvcChannelTypeTextClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-text-acknowledge-pending-messages-impl">tp_svc_channel_type_text_acknowledge_pending_messages_impl</link> impl);</programlisting>
<para>
Register an implementation for the AcknowledgePendingMessages method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> A callback used to implement the AcknowledgePendingMessages D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-return-from-acknowledge-pending-messages" role="function">
<title>tp_svc_channel_type_text_return_from_acknowledge_pending_messages ()</title>
<indexterm zone="tp-svc-channel-type-text-return-from-acknowledge-pending-messages"><primary>tp_svc_channel_type_text_return_from_acknowledge_pending_messages</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_text_return_from_acknowledge_pending_messages
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-get-message-types-impl" role="function">
<title>tp_svc_channel_type_text_get_message_types_impl ()</title>
<indexterm zone="tp-svc-channel-type-text-get-message-types-impl"><primary>tp_svc_channel_type_text_get_message_types_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_type_text_get_message_types_impl)
                                                        (<link linkend="TpSvcChannelTypeText">TpSvcChannelTypeText</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
GetMessageTypes on interface org.freedesktop.Telepathy.Channel.Type.Text.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-implement-get-message-types" role="function">
<title>tp_svc_channel_type_text_implement_get_message_types ()</title>
<indexterm zone="tp-svc-channel-type-text-implement-get-message-types"><primary>tp_svc_channel_type_text_implement_get_message_types</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_text_implement_get_message_types
                                                        (<link linkend="TpSvcChannelTypeTextClass">TpSvcChannelTypeTextClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-text-get-message-types-impl">tp_svc_channel_type_text_get_message_types_impl</link> impl);</programlisting>
<para>
Register an implementation for the GetMessageTypes method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> A callback used to implement the GetMessageTypes D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-return-from-get-message-types" role="function">
<title>tp_svc_channel_type_text_return_from_get_message_types ()</title>
<indexterm zone="tp-svc-channel-type-text-return-from-get-message-types"><primary>tp_svc_channel_type_text_return_from_get_message_types</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_text_return_from_get_message_types
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         const <link linkend="GArray">GArray</link> *out0);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> const GArray * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-list-pending-messages-impl" role="function">
<title>tp_svc_channel_type_text_list_pending_messages_impl ()</title>
<indexterm zone="tp-svc-channel-type-text-list-pending-messages-impl"><primary>tp_svc_channel_type_text_list_pending_messages_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_type_text_list_pending_messages_impl)
                                                        (<link linkend="TpSvcChannelTypeText">TpSvcChannelTypeText</link> *self,
                                                         <link linkend="gboolean">gboolean</link> in_clear,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
ListPendingMessages on interface org.freedesktop.Telepathy.Channel.Type.Text.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_clear</parameter>&nbsp;:</term>
<listitem><simpara> gboolean  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-implement-list-pending-messages" role="function">
<title>tp_svc_channel_type_text_implement_list_pending_messages ()</title>
<indexterm zone="tp-svc-channel-type-text-implement-list-pending-messages"><primary>tp_svc_channel_type_text_implement_list_pending_messages</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_text_implement_list_pending_messages
                                                        (<link linkend="TpSvcChannelTypeTextClass">TpSvcChannelTypeTextClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-text-list-pending-messages-impl">tp_svc_channel_type_text_list_pending_messages_impl</link> impl);</programlisting>
<para>
Register an implementation for the ListPendingMessages method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> A callback used to implement the ListPendingMessages D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-return-from-list-pending-messages" role="function">
<title>tp_svc_channel_type_text_return_from_list_pending_messages ()</title>
<indexterm zone="tp-svc-channel-type-text-return-from-list-pending-messages"><primary>tp_svc_channel_type_text_return_from_list_pending_messages</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_text_return_from_list_pending_messages
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *out0);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> const GPtrArray * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-send-impl" role="function">
<title>tp_svc_channel_type_text_send_impl ()</title>
<indexterm zone="tp-svc-channel-type-text-send-impl"><primary>tp_svc_channel_type_text_send_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_type_text_send_impl)
                                                        (<link linkend="TpSvcChannelTypeText">TpSvcChannelTypeText</link> *self,
                                                         <link linkend="guint">guint</link> in_type,
                                                         const <link linkend="gchar">gchar</link> *in_text,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
Send on interface org.freedesktop.Telepathy.Channel.Type.Text.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_type</parameter>&nbsp;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_text</parameter>&nbsp;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-implement-send" role="function">
<title>tp_svc_channel_type_text_implement_send ()</title>
<indexterm zone="tp-svc-channel-type-text-implement-send"><primary>tp_svc_channel_type_text_implement_send</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_text_implement_send
                                                        (<link linkend="TpSvcChannelTypeTextClass">TpSvcChannelTypeTextClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-text-send-impl">tp_svc_channel_type_text_send_impl</link> impl);</programlisting>
<para>
Register an implementation for the Send method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> A callback used to implement the Send D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-return-from-send" role="function">
<title>tp_svc_channel_type_text_return_from_send ()</title>
<indexterm zone="tp-svc-channel-type-text-return-from-send"><primary>tp_svc_channel_type_text_return_from_send</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_text_return_from_send
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-emit-lost-message" role="function">
<title>tp_svc_channel_type_text_emit_lost_message ()</title>
<indexterm zone="tp-svc-channel-type-text-emit-lost-message"><primary>tp_svc_channel_type_text_emit_lost_message</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_text_emit_lost_message
                                                        (<link linkend="gpointer">gpointer</link> instance);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
LostMessage signal on interface org.freedesktop.Telepathy.Channel.Type.Text.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-emit-received" role="function">
<title>tp_svc_channel_type_text_emit_received ()</title>
<indexterm zone="tp-svc-channel-type-text-emit-received"><primary>tp_svc_channel_type_text_emit_received</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_text_emit_received
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_id,
                                                         <link linkend="guint">guint</link> arg_timestamp,
                                                         <link linkend="guint">guint</link> arg_sender,
                                                         <link linkend="guint">guint</link> arg_type,
                                                         <link linkend="guint">guint</link> arg_flags,
                                                         const <link linkend="gchar">gchar</link> *arg_text);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
Received signal on interface org.freedesktop.Telepathy.Channel.Type.Text.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_id</parameter>&nbsp;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_timestamp</parameter>&nbsp;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_sender</parameter>&nbsp;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_type</parameter>&nbsp;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_flags</parameter>&nbsp;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_text</parameter>&nbsp;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-emit-send-error" role="function">
<title>tp_svc_channel_type_text_emit_send_error ()</title>
<indexterm zone="tp-svc-channel-type-text-emit-send-error"><primary>tp_svc_channel_type_text_emit_send_error</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_text_emit_send_error
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_error,
                                                         <link linkend="guint">guint</link> arg_timestamp,
                                                         <link linkend="guint">guint</link> arg_type,
                                                         const <link linkend="gchar">gchar</link> *arg_text);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
SendError signal on interface org.freedesktop.Telepathy.Channel.Type.Text.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_error</parameter>&nbsp;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_timestamp</parameter>&nbsp;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_type</parameter>&nbsp;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_text</parameter>&nbsp;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-emit-sent" role="function">
<title>tp_svc_channel_type_text_emit_sent ()</title>
<indexterm zone="tp-svc-channel-type-text-emit-sent"><primary>tp_svc_channel_type_text_emit_sent</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_text_emit_sent  (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_timestamp,
                                                         <link linkend="guint">guint</link> arg_type,
                                                         const <link linkend="gchar">gchar</link> *arg_text);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
Sent signal on interface org.freedesktop.Telepathy.Channel.Type.Text.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_timestamp</parameter>&nbsp;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_type</parameter>&nbsp;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_text</parameter>&nbsp;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TpSvcChannelInterfaceChatState" role="struct">
<title>TpSvcChannelInterfaceChatState</title>
<indexterm zone="TpSvcChannelInterfaceChatState"><primary>TpSvcChannelInterfaceChatState</primary></indexterm><programlisting>typedef struct _TpSvcChannelInterfaceChatState TpSvcChannelInterfaceChatState;</programlisting>
<para>
Dummy typedef representing any implementation of this interface.</para>
<para>

</para></refsect2>
<refsect2 id="TpSvcChannelInterfaceChatStateClass" role="struct">
<title>TpSvcChannelInterfaceChatStateClass</title>
<indexterm zone="TpSvcChannelInterfaceChatStateClass"><primary>TpSvcChannelInterfaceChatStateClass</primary></indexterm><programlisting>typedef struct _TpSvcChannelInterfaceChatStateClass TpSvcChannelInterfaceChatStateClass;</programlisting>
<para>
The class of TpSvcChannelInterfaceChatState.</para>
<para>

</para></refsect2>
<refsect2 id="tp-svc-channel-interface-chat-state-set-chat-state-impl" role="function">
<title>tp_svc_channel_interface_chat_state_set_chat_state_impl ()</title>
<indexterm zone="tp-svc-channel-interface-chat-state-set-chat-state-impl"><primary>tp_svc_channel_interface_chat_state_set_chat_state_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_interface_chat_state_set_chat_state_impl)
                                                        (<link linkend="TpSvcChannelInterfaceChatState">TpSvcChannelInterfaceChatState</link> *self,
                                                         <link linkend="guint">guint</link> in_state,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
SetChatState on interface org.freedesktop.Telepathy.Channel.Interface.ChatState.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_state</parameter>&nbsp;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-chat-state-implement-set-chat-state" role="function">
<title>tp_svc_channel_interface_chat_state_implement_set_chat_state ()</title>
<indexterm zone="tp-svc-channel-interface-chat-state-implement-set-chat-state"><primary>tp_svc_channel_interface_chat_state_implement_set_chat_state</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_chat_state_implement_set_chat_state
                                                        (<link linkend="TpSvcChannelInterfaceChatStateClass">TpSvcChannelInterfaceChatStateClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-chat-state-set-chat-state-impl">tp_svc_channel_interface_chat_state_set_chat_state_impl</link> impl);</programlisting>
<para>
Register an implementation for the SetChatState method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> A callback used to implement the SetChatState D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-chat-state-return-from-set-chat-state" role="function">
<title>tp_svc_channel_interface_chat_state_return_from_set_chat_state ()</title>
<indexterm zone="tp-svc-channel-interface-chat-state-return-from-set-chat-state"><primary>tp_svc_channel_interface_chat_state_return_from_set_chat_state</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_chat_state_return_from_set_chat_state
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-chat-state-emit-chat-state-changed" role="function">
<title>tp_svc_channel_interface_chat_state_emit_chat_state_changed ()</title>
<indexterm zone="tp-svc-channel-interface-chat-state-emit-chat-state-changed"><primary>tp_svc_channel_interface_chat_state_emit_chat_state_changed</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_chat_state_emit_chat_state_changed
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_contact,
                                                         <link linkend="guint">guint</link> arg_state);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
ChatStateChanged signal on interface org.freedesktop.Telepathy.Channel.Interface.ChatState.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_contact</parameter>&nbsp;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_state</parameter>&nbsp;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TpSvcChannelInterfacePassword" role="struct">
<title>TpSvcChannelInterfacePassword</title>
<indexterm zone="TpSvcChannelInterfacePassword"><primary>TpSvcChannelInterfacePassword</primary></indexterm><programlisting>typedef struct _TpSvcChannelInterfacePassword TpSvcChannelInterfacePassword;</programlisting>
<para>
Dummy typedef representing any implementation of this interface.</para>
<para>

</para></refsect2>
<refsect2 id="TpSvcChannelInterfacePasswordClass" role="struct">
<title>TpSvcChannelInterfacePasswordClass</title>
<indexterm zone="TpSvcChannelInterfacePasswordClass"><primary>TpSvcChannelInterfacePasswordClass</primary></indexterm><programlisting>typedef struct _TpSvcChannelInterfacePasswordClass TpSvcChannelInterfacePasswordClass;</programlisting>
<para>
The class of TpSvcChannelInterfacePassword.</para>
<para>

</para></refsect2>
<refsect2 id="tp-svc-channel-interface-password-get-password-flags-impl" role="function">
<title>tp_svc_channel_interface_password_get_password_flags_impl ()</title>
<indexterm zone="tp-svc-channel-interface-password-get-password-flags-impl"><primary>tp_svc_channel_interface_password_get_password_flags_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_interface_password_get_password_flags_impl)
                                                        (<link linkend="TpSvcChannelInterfacePassword">TpSvcChannelInterfacePassword</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
GetPasswordFlags on interface org.freedesktop.Telepathy.Channel.Interface.Password.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-password-implement-get-password-flags" role="function">
<title>tp_svc_channel_interface_password_implement_get_password_flags ()</title>
<indexterm zone="tp-svc-channel-interface-password-implement-get-password-flags"><primary>tp_svc_channel_interface_password_implement_get_password_flags</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_password_implement_get_password_flags
                                                        (<link linkend="TpSvcChannelInterfacePasswordClass">TpSvcChannelInterfacePasswordClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-password-get-password-flags-impl">tp_svc_channel_interface_password_get_password_flags_impl</link> impl);</programlisting>
<para>
Register an implementation for the GetPasswordFlags method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> A callback used to implement the GetPasswordFlags D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-password-return-from-get-password-flags" role="function">
<title>tp_svc_channel_interface_password_return_from_get_password_flags ()</title>
<indexterm zone="tp-svc-channel-interface-password-return-from-get-password-flags"><primary>tp_svc_channel_interface_password_return_from_get_password_flags</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_password_return_from_get_password_flags
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         <link linkend="guint">guint</link> out0);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-password-provide-password-impl" role="function">
<title>tp_svc_channel_interface_password_provide_password_impl ()</title>
<indexterm zone="tp-svc-channel-interface-password-provide-password-impl"><primary>tp_svc_channel_interface_password_provide_password_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_interface_password_provide_password_impl)
                                                        (<link linkend="TpSvcChannelInterfacePassword">TpSvcChannelInterfacePassword</link> *self,
                                                         const <link linkend="gchar">gchar</link> *in_password,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
ProvidePassword on interface org.freedesktop.Telepathy.Channel.Interface.Password.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_password</parameter>&nbsp;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-password-implement-provide-password" role="function">
<title>tp_svc_channel_interface_password_implement_provide_password ()</title>
<indexterm zone="tp-svc-channel-interface-password-implement-provide-password"><primary>tp_svc_channel_interface_password_implement_provide_password</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_password_implement_provide_password
                                                        (<link linkend="TpSvcChannelInterfacePasswordClass">TpSvcChannelInterfacePasswordClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-password-provide-password-impl">tp_svc_channel_interface_password_provide_password_impl</link> impl);</programlisting>
<para>
Register an implementation for the ProvidePassword method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> A callback used to implement the ProvidePassword D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-password-return-from-provide-password" role="function">
<title>tp_svc_channel_interface_password_return_from_provide_password ()</title>
<indexterm zone="tp-svc-channel-interface-password-return-from-provide-password"><primary>tp_svc_channel_interface_password_return_from_provide_password</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_password_return_from_provide_password
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         <link linkend="gboolean">gboolean</link> out0);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out0</parameter>&nbsp;:</term>
<listitem><simpara> gboolean  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-password-emit-password-flags-changed" role="function">
<title>tp_svc_channel_interface_password_emit_password_flags_changed ()</title>
<indexterm zone="tp-svc-channel-interface-password-emit-password-flags-changed"><primary>tp_svc_channel_interface_password_emit_password_flags_changed</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_password_emit_password_flags_changed
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_added,
                                                         <link linkend="guint">guint</link> arg_removed);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
PasswordFlagsChanged signal on interface org.freedesktop.Telepathy.Channel.Interface.Password.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_added</parameter>&nbsp;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_removed</parameter>&nbsp;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1 id="telepathy-glib-svc-channel-text.see-also">
<title>See Also</title>
<link linkend="TpTextMixin"><type>TpTextMixin</type></link>
</refsect1>

</refentry>
