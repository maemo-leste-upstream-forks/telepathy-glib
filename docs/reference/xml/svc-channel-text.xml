<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-svc-channel-text">
<refmeta>
<refentrytitle role="top_of_page" id="telepathy-glib-svc-channel-text.top_of_page">Text channels</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Text channels</refname>
<refpurpose>service-side interfaces for the Text channel type, and
 the Chat State and Password interfaces</refpurpose>
</refnamediv>

<refsynopsisdiv id="telepathy-glib-svc-channel-text.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>
<anchor id="TpSvcChannelTypeText"/><anchor id="TpSvcChannelInterfaceChatState"/><anchor id="TpSvcChannelInterfacePassword"/>
<synopsis>

#include &lt;telepathy-glib/svc-channel.h&gt;

                    <link linkend="TpSvcChannelTypeText-struct">TpSvcChannelTypeText</link>;
                    <link linkend="TpSvcChannelTypeTextClass">TpSvcChannelTypeTextClass</link>;
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-type-text-acknowledge-pending-messages-impl">*tp_svc_channel_type_text_acknowledge_pending_messages_impl</link>)
                                                        (<link linkend="TpSvcChannelTypeText">TpSvcChannelTypeText</link> *self,
                                                         const <link linkend="GArray">GArray</link> *in_IDs,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-text-implement-acknowledge-pending-messages">tp_svc_channel_type_text_implement_acknowledge_pending_messages</link>
                                                        (<link linkend="TpSvcChannelTypeTextClass">TpSvcChannelTypeTextClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-text-acknowledge-pending-messages-impl">tp_svc_channel_type_text_acknowledge_pending_messages_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-text-return-from-acknowledge-pending-messages">tp_svc_channel_type_text_return_from_acknowledge_pending_messages</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-type-text-get-message-types-impl">*tp_svc_channel_type_text_get_message_types_impl</link>)
                                                        (<link linkend="TpSvcChannelTypeText">TpSvcChannelTypeText</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-text-implement-get-message-types">tp_svc_channel_type_text_implement_get_message_types</link>
                                                        (<link linkend="TpSvcChannelTypeTextClass">TpSvcChannelTypeTextClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-text-get-message-types-impl">tp_svc_channel_type_text_get_message_types_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-text-return-from-get-message-types">tp_svc_channel_type_text_return_from_get_message_types</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         const <link linkend="GArray">GArray</link> *out_Available_Types);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-type-text-list-pending-messages-impl">*tp_svc_channel_type_text_list_pending_messages_impl</link>)
                                                        (<link linkend="TpSvcChannelTypeText">TpSvcChannelTypeText</link> *self,
                                                         <link linkend="gboolean">gboolean</link> in_Clear,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-text-implement-list-pending-messages">tp_svc_channel_type_text_implement_list_pending_messages</link>
                                                        (<link linkend="TpSvcChannelTypeTextClass">TpSvcChannelTypeTextClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-text-list-pending-messages-impl">tp_svc_channel_type_text_list_pending_messages_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-text-return-from-list-pending-messages">tp_svc_channel_type_text_return_from_list_pending_messages</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *out_Pending_Messages);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-type-text-send-impl">*tp_svc_channel_type_text_send_impl</link>)
                                                        (<link linkend="TpSvcChannelTypeText">TpSvcChannelTypeText</link> *self,
                                                         <link linkend="guint">guint</link> in_Type,
                                                         const <link linkend="gchar">gchar</link> *in_Text,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-text-implement-send">tp_svc_channel_type_text_implement_send</link>
                                                        (<link linkend="TpSvcChannelTypeTextClass">TpSvcChannelTypeTextClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-text-send-impl">tp_svc_channel_type_text_send_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-text-return-from-send">tp_svc_channel_type_text_return_from_send</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-text-emit-lost-message">tp_svc_channel_type_text_emit_lost_message</link>
                                                        (<link linkend="gpointer">gpointer</link> instance);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-text-emit-received">tp_svc_channel_type_text_emit_received</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_ID,
                                                         <link linkend="guint">guint</link> arg_Timestamp,
                                                         <link linkend="guint">guint</link> arg_Sender,
                                                         <link linkend="guint">guint</link> arg_Type,
                                                         <link linkend="guint">guint</link> arg_Flags,
                                                         const <link linkend="gchar">gchar</link> *arg_Text);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-text-emit-send-error">tp_svc_channel_type_text_emit_send_error</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_Error,
                                                         <link linkend="guint">guint</link> arg_Timestamp,
                                                         <link linkend="guint">guint</link> arg_Type,
                                                         const <link linkend="gchar">gchar</link> *arg_Text);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-text-emit-sent">tp_svc_channel_type_text_emit_sent</link>  (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_Timestamp,
                                                         <link linkend="guint">guint</link> arg_Type,
                                                         const <link linkend="gchar">gchar</link> *arg_Text);


                    <link linkend="TpSvcChannelInterfaceChatState-struct">TpSvcChannelInterfaceChatState</link>;
                    <link linkend="TpSvcChannelInterfaceChatStateClass">TpSvcChannelInterfaceChatStateClass</link>;
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-interface-chat-state-set-chat-state-impl">*tp_svc_channel_interface_chat_state_set_chat_state_impl</link>)
                                                        (<link linkend="TpSvcChannelInterfaceChatState">TpSvcChannelInterfaceChatState</link> *self,
                                                         <link linkend="guint">guint</link> in_State,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-chat-state-implement-set-chat-state">tp_svc_channel_interface_chat_state_implement_set_chat_state</link>
                                                        (<link linkend="TpSvcChannelInterfaceChatStateClass">TpSvcChannelInterfaceChatStateClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-chat-state-set-chat-state-impl">tp_svc_channel_interface_chat_state_set_chat_state_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-chat-state-return-from-set-chat-state">tp_svc_channel_interface_chat_state_return_from_set_chat_state</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-chat-state-emit-chat-state-changed">tp_svc_channel_interface_chat_state_emit_chat_state_changed</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_Contact,
                                                         <link linkend="guint">guint</link> arg_State);


                    <link linkend="TpSvcChannelInterfaceMessages">TpSvcChannelInterfaceMessages</link>;
                    <link linkend="TpSvcChannelInterfaceMessagesClass">TpSvcChannelInterfaceMessagesClass</link>;
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-messages-emit-message-received">tp_svc_channel_interface_messages_emit_message_received</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *arg_Message);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-messages-emit-message-sent">tp_svc_channel_interface_messages_emit_message_sent</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *arg_Content,
                                                         <link linkend="guint">guint</link> arg_Flags,
                                                         const <link linkend="gchar">gchar</link> *arg_Message_Token);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-messages-emit-pending-messages-removed">tp_svc_channel_interface_messages_emit_pending_messages_removed</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="GArray">GArray</link> *arg_Message_IDs);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-interface-messages-get-pending-message-content-impl">*tp_svc_channel_interface_messages_get_pending_message_content_impl</link>)
                                                        (<link linkend="TpSvcChannelInterfaceMessages">TpSvcChannelInterfaceMessages</link> *self,
                                                         <link linkend="guint">guint</link> in_Message_ID,
                                                         const <link linkend="GArray">GArray</link> *in_Parts,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-messages-implement-get-pending-message-content">tp_svc_channel_interface_messages_implement_get_pending_message_content</link>
                                                        (<link linkend="TpSvcChannelInterfaceMessagesClass">TpSvcChannelInterfaceMessagesClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-messages-get-pending-message-content-impl">tp_svc_channel_interface_messages_get_pending_message_content_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-messages-implement-send-message">tp_svc_channel_interface_messages_implement_send_message</link>
                                                        (<link linkend="TpSvcChannelInterfaceMessagesClass">TpSvcChannelInterfaceMessagesClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-messages-send-message-impl">tp_svc_channel_interface_messages_send_message_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-messages-return-from-get-pending-message-content">tp_svc_channel_interface_messages_return_from_get_pending_message_content</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         <link linkend="GHashTable">GHashTable</link> *out_Content);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-messages-return-from-send-message">tp_svc_channel_interface_messages_return_from_send_message</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         const <link linkend="gchar">gchar</link> *out_Token);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-interface-messages-send-message-impl">*tp_svc_channel_interface_messages_send_message_impl</link>)
                                                        (<link linkend="TpSvcChannelInterfaceMessages">TpSvcChannelInterfaceMessages</link> *self,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Message,
                                                         <link linkend="guint">guint</link> in_Flags,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);


                    <link linkend="TpSvcChannelInterfacePassword-struct">TpSvcChannelInterfacePassword</link>;
                    <link linkend="TpSvcChannelInterfacePasswordClass">TpSvcChannelInterfacePasswordClass</link>;
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-interface-password-get-password-flags-impl">*tp_svc_channel_interface_password_get_password_flags_impl</link>)
                                                        (<link linkend="TpSvcChannelInterfacePassword">TpSvcChannelInterfacePassword</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-password-implement-get-password-flags">tp_svc_channel_interface_password_implement_get_password_flags</link>
                                                        (<link linkend="TpSvcChannelInterfacePasswordClass">TpSvcChannelInterfacePasswordClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-password-get-password-flags-impl">tp_svc_channel_interface_password_get_password_flags_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-password-return-from-get-password-flags">tp_svc_channel_interface_password_return_from_get_password_flags</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         <link linkend="guint">guint</link> out_Password_Flags);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-interface-password-provide-password-impl">*tp_svc_channel_interface_password_provide_password_impl</link>)
                                                        (<link linkend="TpSvcChannelInterfacePassword">TpSvcChannelInterfacePassword</link> *self,
                                                         const <link linkend="gchar">gchar</link> *in_Password,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-password-implement-provide-password">tp_svc_channel_interface_password_implement_provide_password</link>
                                                        (<link linkend="TpSvcChannelInterfacePasswordClass">TpSvcChannelInterfacePasswordClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-password-provide-password-impl">tp_svc_channel_interface_password_provide_password_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-password-return-from-provide-password">tp_svc_channel_interface_password_return_from_provide_password</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         <link linkend="gboolean">gboolean</link> out_Correct);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-password-emit-password-flags-changed">tp_svc_channel_interface_password_emit_password_flags_changed</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_Added,
                                                         <link linkend="guint">guint</link> arg_Removed);
</synopsis>
</refsynopsisdiv>

<refsect1 id="telepathy-glib-svc-channel-text.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GInterface">GInterface</link>
   +----TpSvcChannelTypeText
</synopsis>
<synopsis>
  <link linkend="GInterface">GInterface</link>
   +----TpSvcChannelInterfaceChatState
</synopsis>
<synopsis>
  <link linkend="GInterface">GInterface</link>
   +----TpSvcChannelInterfacePassword
</synopsis>
</refsect1>






<refsect1 id="telepathy-glib-svc-channel-text.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="TpSvcChannelTypeText-lost-message">lost-message</link>&quot;                                   : Run Last / Has Details
  &quot;<link linkend="TpSvcChannelTypeText-received">received</link>&quot;                                       : Run Last / Has Details
  &quot;<link linkend="TpSvcChannelTypeText-send-error">send-error</link>&quot;                                     : Run Last / Has Details
  &quot;<link linkend="TpSvcChannelTypeText-sent">sent</link>&quot;                                           : Run Last / Has Details
  &quot;<link linkend="TpSvcChannelInterfaceChatState-chat-state-changed">chat-state-changed</link>&quot;                             : Run Last / Has Details
  &quot;<link linkend="TpSvcChannelInterfacePassword-password-flags-changed">password-flags-changed</link>&quot;                         : Run Last / Has Details
</synopsis>
</refsect1>


<refsect1 id="telepathy-glib-svc-channel-text.description" role="desc">
<title role="desc.title">Description</title>
<para>
A major use for instant messaging is obviously to send messages.
Channels of type Text represent IM conversations or chat rooms.
</para>
<para>
This section documents the auto-generated GInterfaces used to implement
the Text channel type, and some interfaces used in conjunction with it.</para>
<para>
</para>
</refsect1>

<refsect1 id="telepathy-glib-svc-channel-text.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="TpSvcChannelTypeText-struct" role="struct">
<title>TpSvcChannelTypeText</title>
<indexterm zone="TpSvcChannelTypeText-struct"><primary sortas="TpSvcChannelTypeText">TpSvcChannelTypeText</primary></indexterm><programlisting>typedef struct _TpSvcChannelTypeText TpSvcChannelTypeText;</programlisting>
<para>
Dummy typedef representing any implementation of this interface.</para>
<para>
</para></refsect2>
<refsect2 id="TpSvcChannelTypeTextClass" role="struct">
<title>TpSvcChannelTypeTextClass</title>
<indexterm zone="TpSvcChannelTypeTextClass"><primary sortas="TpSvcChannelTypeTextClass">TpSvcChannelTypeTextClass</primary></indexterm><programlisting>typedef struct _TpSvcChannelTypeTextClass TpSvcChannelTypeTextClass;</programlisting>
<para>
The class of TpSvcChannelTypeText.</para>
<para>
</para></refsect2>
<refsect2 id="tp-svc-channel-type-text-acknowledge-pending-messages-impl" role="function">
<title>tp_svc_channel_type_text_acknowledge_pending_messages_impl ()</title>
<indexterm zone="tp-svc-channel-type-text-acknowledge-pending-messages-impl"><primary sortas="tp_svc_channel_type_text_acknowledge_pending_messages_impl">tp_svc_channel_type_text_acknowledge_pending_messages_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_type_text_acknowledge_pending_messages_impl)
                                                        (<link linkend="TpSvcChannelTypeText">TpSvcChannelTypeText</link> *self,
                                                         const <link linkend="GArray">GArray</link> *in_IDs,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
AcknowledgePendingMessages on interface org.freedesktop.Telepathy.Channel.Type.Text.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_IDs</parameter>&#160;:</term>
<listitem><simpara> const GArray * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-implement-acknowledge-pending-messages" role="function">
<title>tp_svc_channel_type_text_implement_acknowledge_pending_messages ()</title>
<indexterm zone="tp-svc-channel-type-text-implement-acknowledge-pending-messages"><primary sortas="tp_svc_channel_type_text_implement_acknowledge_pending_messages">tp_svc_channel_type_text_implement_acknowledge_pending_messages</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_text_implement_acknowledge_pending_messages
                                                        (<link linkend="TpSvcChannelTypeTextClass">TpSvcChannelTypeTextClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-text-acknowledge-pending-messages-impl">tp_svc_channel_type_text_acknowledge_pending_messages_impl</link> impl);</programlisting>
<para>
Register an implementation for the AcknowledgePendingMessages method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the AcknowledgePendingMessages D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-return-from-acknowledge-pending-messages" role="function">
<title>tp_svc_channel_type_text_return_from_acknowledge_pending_messages ()</title>
<indexterm zone="tp-svc-channel-type-text-return-from-acknowledge-pending-messages"><primary sortas="tp_svc_channel_type_text_return_from_acknowledge_pending_messages">tp_svc_channel_type_text_return_from_acknowledge_pending_messages</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_text_return_from_acknowledge_pending_messages
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-get-message-types-impl" role="function">
<title>tp_svc_channel_type_text_get_message_types_impl ()</title>
<indexterm zone="tp-svc-channel-type-text-get-message-types-impl"><primary sortas="tp_svc_channel_type_text_get_message_types_impl">tp_svc_channel_type_text_get_message_types_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_type_text_get_message_types_impl)
                                                        (<link linkend="TpSvcChannelTypeText">TpSvcChannelTypeText</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
GetMessageTypes on interface org.freedesktop.Telepathy.Channel.Type.Text.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-implement-get-message-types" role="function">
<title>tp_svc_channel_type_text_implement_get_message_types ()</title>
<indexterm zone="tp-svc-channel-type-text-implement-get-message-types"><primary sortas="tp_svc_channel_type_text_implement_get_message_types">tp_svc_channel_type_text_implement_get_message_types</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_text_implement_get_message_types
                                                        (<link linkend="TpSvcChannelTypeTextClass">TpSvcChannelTypeTextClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-text-get-message-types-impl">tp_svc_channel_type_text_get_message_types_impl</link> impl);</programlisting>
<para>
Register an implementation for the GetMessageTypes method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the GetMessageTypes D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-return-from-get-message-types" role="function">
<title>tp_svc_channel_type_text_return_from_get_message_types ()</title>
<indexterm zone="tp-svc-channel-type-text-return-from-get-message-types"><primary sortas="tp_svc_channel_type_text_return_from_get_message_types">tp_svc_channel_type_text_return_from_get_message_types</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_text_return_from_get_message_types
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         const <link linkend="GArray">GArray</link> *out_Available_Types);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Available_Types</parameter>&#160;:</term>
<listitem><simpara> const GArray * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-list-pending-messages-impl" role="function">
<title>tp_svc_channel_type_text_list_pending_messages_impl ()</title>
<indexterm zone="tp-svc-channel-type-text-list-pending-messages-impl"><primary sortas="tp_svc_channel_type_text_list_pending_messages_impl">tp_svc_channel_type_text_list_pending_messages_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_type_text_list_pending_messages_impl)
                                                        (<link linkend="TpSvcChannelTypeText">TpSvcChannelTypeText</link> *self,
                                                         <link linkend="gboolean">gboolean</link> in_Clear,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
ListPendingMessages on interface org.freedesktop.Telepathy.Channel.Type.Text.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Clear</parameter>&#160;:</term>
<listitem><simpara> gboolean  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-implement-list-pending-messages" role="function">
<title>tp_svc_channel_type_text_implement_list_pending_messages ()</title>
<indexterm zone="tp-svc-channel-type-text-implement-list-pending-messages"><primary sortas="tp_svc_channel_type_text_implement_list_pending_messages">tp_svc_channel_type_text_implement_list_pending_messages</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_text_implement_list_pending_messages
                                                        (<link linkend="TpSvcChannelTypeTextClass">TpSvcChannelTypeTextClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-text-list-pending-messages-impl">tp_svc_channel_type_text_list_pending_messages_impl</link> impl);</programlisting>
<para>
Register an implementation for the ListPendingMessages method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the ListPendingMessages D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-return-from-list-pending-messages" role="function">
<title>tp_svc_channel_type_text_return_from_list_pending_messages ()</title>
<indexterm zone="tp-svc-channel-type-text-return-from-list-pending-messages"><primary sortas="tp_svc_channel_type_text_return_from_list_pending_messages">tp_svc_channel_type_text_return_from_list_pending_messages</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_text_return_from_list_pending_messages
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *out_Pending_Messages);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Pending_Messages</parameter>&#160;:</term>
<listitem><simpara> const GPtrArray * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-send-impl" role="function">
<title>tp_svc_channel_type_text_send_impl ()</title>
<indexterm zone="tp-svc-channel-type-text-send-impl"><primary sortas="tp_svc_channel_type_text_send_impl">tp_svc_channel_type_text_send_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_type_text_send_impl)
                                                        (<link linkend="TpSvcChannelTypeText">TpSvcChannelTypeText</link> *self,
                                                         <link linkend="guint">guint</link> in_Type,
                                                         const <link linkend="gchar">gchar</link> *in_Text,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
Send on interface org.freedesktop.Telepathy.Channel.Type.Text.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Type</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Text</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-implement-send" role="function">
<title>tp_svc_channel_type_text_implement_send ()</title>
<indexterm zone="tp-svc-channel-type-text-implement-send"><primary sortas="tp_svc_channel_type_text_implement_send">tp_svc_channel_type_text_implement_send</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_text_implement_send
                                                        (<link linkend="TpSvcChannelTypeTextClass">TpSvcChannelTypeTextClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-text-send-impl">tp_svc_channel_type_text_send_impl</link> impl);</programlisting>
<para>
Register an implementation for the Send method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the Send D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-return-from-send" role="function">
<title>tp_svc_channel_type_text_return_from_send ()</title>
<indexterm zone="tp-svc-channel-type-text-return-from-send"><primary sortas="tp_svc_channel_type_text_return_from_send">tp_svc_channel_type_text_return_from_send</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_text_return_from_send
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-emit-lost-message" role="function">
<title>tp_svc_channel_type_text_emit_lost_message ()</title>
<indexterm zone="tp-svc-channel-type-text-emit-lost-message"><primary sortas="tp_svc_channel_type_text_emit_lost_message">tp_svc_channel_type_text_emit_lost_message</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_text_emit_lost_message
                                                        (<link linkend="gpointer">gpointer</link> instance);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
LostMessage signal on interface org.freedesktop.Telepathy.Channel.Type.Text.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-emit-received" role="function">
<title>tp_svc_channel_type_text_emit_received ()</title>
<indexterm zone="tp-svc-channel-type-text-emit-received"><primary sortas="tp_svc_channel_type_text_emit_received">tp_svc_channel_type_text_emit_received</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_text_emit_received
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_ID,
                                                         <link linkend="guint">guint</link> arg_Timestamp,
                                                         <link linkend="guint">guint</link> arg_Sender,
                                                         <link linkend="guint">guint</link> arg_Type,
                                                         <link linkend="guint">guint</link> arg_Flags,
                                                         const <link linkend="gchar">gchar</link> *arg_Text);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
Received signal on interface org.freedesktop.Telepathy.Channel.Type.Text.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_ID</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Timestamp</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Sender</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Type</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Flags</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Text</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-emit-send-error" role="function">
<title>tp_svc_channel_type_text_emit_send_error ()</title>
<indexterm zone="tp-svc-channel-type-text-emit-send-error"><primary sortas="tp_svc_channel_type_text_emit_send_error">tp_svc_channel_type_text_emit_send_error</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_text_emit_send_error
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_Error,
                                                         <link linkend="guint">guint</link> arg_Timestamp,
                                                         <link linkend="guint">guint</link> arg_Type,
                                                         const <link linkend="gchar">gchar</link> *arg_Text);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
SendError signal on interface org.freedesktop.Telepathy.Channel.Type.Text.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Error</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Timestamp</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Type</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Text</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-type-text-emit-sent" role="function">
<title>tp_svc_channel_type_text_emit_sent ()</title>
<indexterm zone="tp-svc-channel-type-text-emit-sent"><primary sortas="tp_svc_channel_type_text_emit_sent">tp_svc_channel_type_text_emit_sent</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_text_emit_sent  (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_Timestamp,
                                                         <link linkend="guint">guint</link> arg_Type,
                                                         const <link linkend="gchar">gchar</link> *arg_Text);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
Sent signal on interface org.freedesktop.Telepathy.Channel.Type.Text.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Timestamp</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Type</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Text</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TpSvcChannelInterfaceChatState-struct" role="struct">
<title>TpSvcChannelInterfaceChatState</title>
<indexterm zone="TpSvcChannelInterfaceChatState-struct"><primary sortas="TpSvcChannelInterfaceChatState">TpSvcChannelInterfaceChatState</primary></indexterm><programlisting>typedef struct _TpSvcChannelInterfaceChatState TpSvcChannelInterfaceChatState;</programlisting>
<para>
Dummy typedef representing any implementation of this interface.</para>
<para>
</para></refsect2>
<refsect2 id="TpSvcChannelInterfaceChatStateClass" role="struct">
<title>TpSvcChannelInterfaceChatStateClass</title>
<indexterm zone="TpSvcChannelInterfaceChatStateClass"><primary sortas="TpSvcChannelInterfaceChatStateClass">TpSvcChannelInterfaceChatStateClass</primary></indexterm><programlisting>typedef struct _TpSvcChannelInterfaceChatStateClass TpSvcChannelInterfaceChatStateClass;</programlisting>
<para>
The class of TpSvcChannelInterfaceChatState.</para>
<para>
</para></refsect2>
<refsect2 id="tp-svc-channel-interface-chat-state-set-chat-state-impl" role="function">
<title>tp_svc_channel_interface_chat_state_set_chat_state_impl ()</title>
<indexterm zone="tp-svc-channel-interface-chat-state-set-chat-state-impl"><primary sortas="tp_svc_channel_interface_chat_state_set_chat_state_impl">tp_svc_channel_interface_chat_state_set_chat_state_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_interface_chat_state_set_chat_state_impl)
                                                        (<link linkend="TpSvcChannelInterfaceChatState">TpSvcChannelInterfaceChatState</link> *self,
                                                         <link linkend="guint">guint</link> in_State,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
SetChatState on interface org.freedesktop.Telepathy.Channel.Interface.ChatState.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_State</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-chat-state-implement-set-chat-state" role="function">
<title>tp_svc_channel_interface_chat_state_implement_set_chat_state ()</title>
<indexterm zone="tp-svc-channel-interface-chat-state-implement-set-chat-state"><primary sortas="tp_svc_channel_interface_chat_state_implement_set_chat_state">tp_svc_channel_interface_chat_state_implement_set_chat_state</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_chat_state_implement_set_chat_state
                                                        (<link linkend="TpSvcChannelInterfaceChatStateClass">TpSvcChannelInterfaceChatStateClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-chat-state-set-chat-state-impl">tp_svc_channel_interface_chat_state_set_chat_state_impl</link> impl);</programlisting>
<para>
Register an implementation for the SetChatState method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the SetChatState D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-chat-state-return-from-set-chat-state" role="function">
<title>tp_svc_channel_interface_chat_state_return_from_set_chat_state ()</title>
<indexterm zone="tp-svc-channel-interface-chat-state-return-from-set-chat-state"><primary sortas="tp_svc_channel_interface_chat_state_return_from_set_chat_state">tp_svc_channel_interface_chat_state_return_from_set_chat_state</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_chat_state_return_from_set_chat_state
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-chat-state-emit-chat-state-changed" role="function">
<title>tp_svc_channel_interface_chat_state_emit_chat_state_changed ()</title>
<indexterm zone="tp-svc-channel-interface-chat-state-emit-chat-state-changed"><primary sortas="tp_svc_channel_interface_chat_state_emit_chat_state_changed">tp_svc_channel_interface_chat_state_emit_chat_state_changed</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_chat_state_emit_chat_state_changed
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_Contact,
                                                         <link linkend="guint">guint</link> arg_State);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
ChatStateChanged signal on interface org.freedesktop.Telepathy.Channel.Interface.ChatState.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Contact</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_State</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TpSvcChannelInterfaceMessages" role="struct">
<title>TpSvcChannelInterfaceMessages</title>
<indexterm zone="TpSvcChannelInterfaceMessages"><primary sortas="TpSvcChannelInterfaceMessages">TpSvcChannelInterfaceMessages</primary></indexterm><programlisting>typedef struct _TpSvcChannelInterfaceMessages TpSvcChannelInterfaceMessages;</programlisting>
<para>
Dummy typedef representing any implementation of this interface.</para>
<para>
</para></refsect2>
<refsect2 id="TpSvcChannelInterfaceMessagesClass" role="struct">
<title>TpSvcChannelInterfaceMessagesClass</title>
<indexterm zone="TpSvcChannelInterfaceMessagesClass"><primary sortas="TpSvcChannelInterfaceMessagesClass">TpSvcChannelInterfaceMessagesClass</primary></indexterm><programlisting>typedef struct _TpSvcChannelInterfaceMessagesClass TpSvcChannelInterfaceMessagesClass;</programlisting>
<para>
The class of TpSvcChannelInterfaceMessages.</para>
<para>
</para></refsect2>
<refsect2 id="tp-svc-channel-interface-messages-emit-message-received" role="function">
<title>tp_svc_channel_interface_messages_emit_message_received ()</title>
<indexterm zone="tp-svc-channel-interface-messages-emit-message-received"><primary sortas="tp_svc_channel_interface_messages_emit_message_received">tp_svc_channel_interface_messages_emit_message_received</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_messages_emit_message_received
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *arg_Message);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
MessageReceived signal on interface org.freedesktop.Telepathy.Channel.Interface.Messages.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Message</parameter>&#160;:</term>
<listitem><simpara> const GPtrArray * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-messages-emit-message-sent" role="function">
<title>tp_svc_channel_interface_messages_emit_message_sent ()</title>
<indexterm zone="tp-svc-channel-interface-messages-emit-message-sent"><primary sortas="tp_svc_channel_interface_messages_emit_message_sent">tp_svc_channel_interface_messages_emit_message_sent</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_messages_emit_message_sent
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *arg_Content,
                                                         <link linkend="guint">guint</link> arg_Flags,
                                                         const <link linkend="gchar">gchar</link> *arg_Message_Token);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
MessageSent signal on interface org.freedesktop.Telepathy.Channel.Interface.Messages.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Content</parameter>&#160;:</term>
<listitem><simpara> const GPtrArray * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Flags</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Message_Token</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-messages-emit-pending-messages-removed" role="function">
<title>tp_svc_channel_interface_messages_emit_pending_messages_removed ()</title>
<indexterm zone="tp-svc-channel-interface-messages-emit-pending-messages-removed"><primary sortas="tp_svc_channel_interface_messages_emit_pending_messages_removed">tp_svc_channel_interface_messages_emit_pending_messages_removed</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_messages_emit_pending_messages_removed
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="GArray">GArray</link> *arg_Message_IDs);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
PendingMessagesRemoved signal on interface org.freedesktop.Telepathy.Channel.Interface.Messages.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Message_IDs</parameter>&#160;:</term>
<listitem><simpara> const GArray * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-messages-get-pending-message-content-impl" role="function">
<title>tp_svc_channel_interface_messages_get_pending_message_content_impl ()</title>
<indexterm zone="tp-svc-channel-interface-messages-get-pending-message-content-impl"><primary sortas="tp_svc_channel_interface_messages_get_pending_message_content_impl">tp_svc_channel_interface_messages_get_pending_message_content_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_interface_messages_get_pending_message_content_impl)
                                                        (<link linkend="TpSvcChannelInterfaceMessages">TpSvcChannelInterfaceMessages</link> *self,
                                                         <link linkend="guint">guint</link> in_Message_ID,
                                                         const <link linkend="GArray">GArray</link> *in_Parts,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
GetPendingMessageContent on interface org.freedesktop.Telepathy.Channel.Interface.Messages.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Message_ID</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Parts</parameter>&#160;:</term>
<listitem><simpara> const GArray * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-messages-implement-get-pending-message-content" role="function">
<title>tp_svc_channel_interface_messages_implement_get_pending_message_content ()</title>
<indexterm zone="tp-svc-channel-interface-messages-implement-get-pending-message-content"><primary sortas="tp_svc_channel_interface_messages_implement_get_pending_message_content">tp_svc_channel_interface_messages_implement_get_pending_message_content</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_messages_implement_get_pending_message_content
                                                        (<link linkend="TpSvcChannelInterfaceMessagesClass">TpSvcChannelInterfaceMessagesClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-messages-get-pending-message-content-impl">tp_svc_channel_interface_messages_get_pending_message_content_impl</link> impl);</programlisting>
<para>
Register an implementation for the GetPendingMessageContent method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the GetPendingMessageContent D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-messages-implement-send-message" role="function">
<title>tp_svc_channel_interface_messages_implement_send_message ()</title>
<indexterm zone="tp-svc-channel-interface-messages-implement-send-message"><primary sortas="tp_svc_channel_interface_messages_implement_send_message">tp_svc_channel_interface_messages_implement_send_message</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_messages_implement_send_message
                                                        (<link linkend="TpSvcChannelInterfaceMessagesClass">TpSvcChannelInterfaceMessagesClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-messages-send-message-impl">tp_svc_channel_interface_messages_send_message_impl</link> impl);</programlisting>
<para>
Register an implementation for the SendMessage method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the SendMessage D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-messages-return-from-get-pending-message-content" role="function">
<title>tp_svc_channel_interface_messages_return_from_get_pending_message_content ()</title>
<indexterm zone="tp-svc-channel-interface-messages-return-from-get-pending-message-content"><primary sortas="tp_svc_channel_interface_messages_return_from_get_pending_message_content">tp_svc_channel_interface_messages_return_from_get_pending_message_content</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_messages_return_from_get_pending_message_content
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         <link linkend="GHashTable">GHashTable</link> *out_Content);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Content</parameter>&#160;:</term>
<listitem><simpara> GHashTable * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-messages-return-from-send-message" role="function">
<title>tp_svc_channel_interface_messages_return_from_send_message ()</title>
<indexterm zone="tp-svc-channel-interface-messages-return-from-send-message"><primary sortas="tp_svc_channel_interface_messages_return_from_send_message">tp_svc_channel_interface_messages_return_from_send_message</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_messages_return_from_send_message
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         const <link linkend="gchar">gchar</link> *out_Token);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Token</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-messages-send-message-impl" role="function">
<title>tp_svc_channel_interface_messages_send_message_impl ()</title>
<indexterm zone="tp-svc-channel-interface-messages-send-message-impl"><primary sortas="tp_svc_channel_interface_messages_send_message_impl">tp_svc_channel_interface_messages_send_message_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_interface_messages_send_message_impl)
                                                        (<link linkend="TpSvcChannelInterfaceMessages">TpSvcChannelInterfaceMessages</link> *self,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Message,
                                                         <link linkend="guint">guint</link> in_Flags,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
SendMessage on interface org.freedesktop.Telepathy.Channel.Interface.Messages.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Message</parameter>&#160;:</term>
<listitem><simpara> const GPtrArray * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Flags</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TpSvcChannelInterfacePassword-struct" role="struct">
<title>TpSvcChannelInterfacePassword</title>
<indexterm zone="TpSvcChannelInterfacePassword-struct"><primary sortas="TpSvcChannelInterfacePassword">TpSvcChannelInterfacePassword</primary></indexterm><programlisting>typedef struct _TpSvcChannelInterfacePassword TpSvcChannelInterfacePassword;</programlisting>
<para>
Dummy typedef representing any implementation of this interface.</para>
<para>
</para></refsect2>
<refsect2 id="TpSvcChannelInterfacePasswordClass" role="struct">
<title>TpSvcChannelInterfacePasswordClass</title>
<indexterm zone="TpSvcChannelInterfacePasswordClass"><primary sortas="TpSvcChannelInterfacePasswordClass">TpSvcChannelInterfacePasswordClass</primary></indexterm><programlisting>typedef struct _TpSvcChannelInterfacePasswordClass TpSvcChannelInterfacePasswordClass;</programlisting>
<para>
The class of TpSvcChannelInterfacePassword.</para>
<para>
</para></refsect2>
<refsect2 id="tp-svc-channel-interface-password-get-password-flags-impl" role="function">
<title>tp_svc_channel_interface_password_get_password_flags_impl ()</title>
<indexterm zone="tp-svc-channel-interface-password-get-password-flags-impl"><primary sortas="tp_svc_channel_interface_password_get_password_flags_impl">tp_svc_channel_interface_password_get_password_flags_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_interface_password_get_password_flags_impl)
                                                        (<link linkend="TpSvcChannelInterfacePassword">TpSvcChannelInterfacePassword</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
GetPasswordFlags on interface org.freedesktop.Telepathy.Channel.Interface.Password.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-password-implement-get-password-flags" role="function">
<title>tp_svc_channel_interface_password_implement_get_password_flags ()</title>
<indexterm zone="tp-svc-channel-interface-password-implement-get-password-flags"><primary sortas="tp_svc_channel_interface_password_implement_get_password_flags">tp_svc_channel_interface_password_implement_get_password_flags</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_password_implement_get_password_flags
                                                        (<link linkend="TpSvcChannelInterfacePasswordClass">TpSvcChannelInterfacePasswordClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-password-get-password-flags-impl">tp_svc_channel_interface_password_get_password_flags_impl</link> impl);</programlisting>
<para>
Register an implementation for the GetPasswordFlags method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the GetPasswordFlags D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-password-return-from-get-password-flags" role="function">
<title>tp_svc_channel_interface_password_return_from_get_password_flags ()</title>
<indexterm zone="tp-svc-channel-interface-password-return-from-get-password-flags"><primary sortas="tp_svc_channel_interface_password_return_from_get_password_flags">tp_svc_channel_interface_password_return_from_get_password_flags</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_password_return_from_get_password_flags
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         <link linkend="guint">guint</link> out_Password_Flags);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Password_Flags</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-password-provide-password-impl" role="function">
<title>tp_svc_channel_interface_password_provide_password_impl ()</title>
<indexterm zone="tp-svc-channel-interface-password-provide-password-impl"><primary sortas="tp_svc_channel_interface_password_provide_password_impl">tp_svc_channel_interface_password_provide_password_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_interface_password_provide_password_impl)
                                                        (<link linkend="TpSvcChannelInterfacePassword">TpSvcChannelInterfacePassword</link> *self,
                                                         const <link linkend="gchar">gchar</link> *in_Password,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
ProvidePassword on interface org.freedesktop.Telepathy.Channel.Interface.Password.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Password</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-password-implement-provide-password" role="function">
<title>tp_svc_channel_interface_password_implement_provide_password ()</title>
<indexterm zone="tp-svc-channel-interface-password-implement-provide-password"><primary sortas="tp_svc_channel_interface_password_implement_provide_password">tp_svc_channel_interface_password_implement_provide_password</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_password_implement_provide_password
                                                        (<link linkend="TpSvcChannelInterfacePasswordClass">TpSvcChannelInterfacePasswordClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-password-provide-password-impl">tp_svc_channel_interface_password_provide_password_impl</link> impl);</programlisting>
<para>
Register an implementation for the ProvidePassword method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the ProvidePassword D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-password-return-from-provide-password" role="function">
<title>tp_svc_channel_interface_password_return_from_provide_password ()</title>
<indexterm zone="tp-svc-channel-interface-password-return-from-provide-password"><primary sortas="tp_svc_channel_interface_password_return_from_provide_password">tp_svc_channel_interface_password_return_from_provide_password</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_password_return_from_provide_password
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         <link linkend="gboolean">gboolean</link> out_Correct);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Correct</parameter>&#160;:</term>
<listitem><simpara> gboolean  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-interface-password-emit-password-flags-changed" role="function">
<title>tp_svc_channel_interface_password_emit_password_flags_changed ()</title>
<indexterm zone="tp-svc-channel-interface-password-emit-password-flags-changed"><primary sortas="tp_svc_channel_interface_password_emit_password_flags_changed">tp_svc_channel_interface_password_emit_password_flags_changed</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_password_emit_password_flags_changed
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> arg_Added,
                                                         <link linkend="guint">guint</link> arg_Removed);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
PasswordFlagsChanged signal on interface org.freedesktop.Telepathy.Channel.Interface.Password.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Added</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Removed</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

<refsect1 id="telepathy-glib-svc-channel-text.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="TpSvcChannelTypeText-lost-message" role="signal"><title>The <literal>&quot;lost-message&quot;</literal> signal</title>
<indexterm zone="TpSvcChannelTypeText-lost-message"><primary sortas="TpSvcChannelTypeText::lost-message">TpSvcChannelTypeText::lost-message</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcChannelTypeText">TpSvcChannelTypeText</link> *arg0,
                                                        <link linkend="gpointer">gpointer</link>              user_data)      : Run Last / Has Details</programlisting>
<para>
The LostMessage D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpSvcChannelTypeText-received" role="signal"><title>The <literal>&quot;received&quot;</literal> signal</title>
<indexterm zone="TpSvcChannelTypeText-received"><primary sortas="TpSvcChannelTypeText::received">TpSvcChannelTypeText::received</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcChannelTypeText">TpSvcChannelTypeText</link> *arg_ID,
                                                        <link linkend="guint">guint</link>                 arg_Timestamp,
                                                        <link linkend="guint">guint</link>                 arg_Sender,
                                                        <link linkend="guint">guint</link>                 arg_Type,
                                                        <link linkend="guint">guint</link>                 arg_Flags,
                                                        <link linkend="guint">guint</link>                 arg_Text,
                                                        <link linkend="gchar">gchar</link>                *arg6,
                                                        <link linkend="gpointer">gpointer</link>              user_data)          : Run Last / Has Details</programlisting>
<para>
The Received D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>arg_ID</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Timestamp</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Sender</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Type</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Flags</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Text</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpSvcChannelTypeText-send-error" role="signal"><title>The <literal>&quot;send-error&quot;</literal> signal</title>
<indexterm zone="TpSvcChannelTypeText-send-error"><primary sortas="TpSvcChannelTypeText::send-error">TpSvcChannelTypeText::send-error</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcChannelTypeText">TpSvcChannelTypeText</link> *arg_Error,
                                                        <link linkend="guint">guint</link>                 arg_Timestamp,
                                                        <link linkend="guint">guint</link>                 arg_Type,
                                                        <link linkend="guint">guint</link>                 arg_Text,
                                                        <link linkend="gchar">gchar</link>                *arg4,
                                                        <link linkend="gpointer">gpointer</link>              user_data)          : Run Last / Has Details</programlisting>
<para>
The SendError D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>arg_Error</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Timestamp</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Type</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Text</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpSvcChannelTypeText-sent" role="signal"><title>The <literal>&quot;sent&quot;</literal> signal</title>
<indexterm zone="TpSvcChannelTypeText-sent"><primary sortas="TpSvcChannelTypeText::sent">TpSvcChannelTypeText::sent</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcChannelTypeText">TpSvcChannelTypeText</link> *arg_Timestamp,
                                                        <link linkend="guint">guint</link>                 arg_Type,
                                                        <link linkend="guint">guint</link>                 arg_Text,
                                                        <link linkend="gchar">gchar</link>                *arg3,
                                                        <link linkend="gpointer">gpointer</link>              user_data)          : Run Last / Has Details</programlisting>
<para>
The Sent D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>arg_Timestamp</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Type</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Text</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpSvcChannelInterfaceChatState-chat-state-changed" role="signal"><title>The <literal>&quot;chat-state-changed&quot;</literal> signal</title>
<indexterm zone="TpSvcChannelInterfaceChatState-chat-state-changed"><primary sortas="TpSvcChannelInterfaceChatState::chat-state-changed">TpSvcChannelInterfaceChatState::chat-state-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcChannelInterfaceChatState">TpSvcChannelInterfaceChatState</link> *arg_Contact,
                                                        <link linkend="guint">guint</link>                           arg_State,
                                                        <link linkend="guint">guint</link>                           arg2,
                                                        <link linkend="gpointer">gpointer</link>                        user_data)        : Run Last / Has Details</programlisting>
<para>
The ChatStateChanged D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>arg_Contact</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_State</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpSvcChannelInterfacePassword-password-flags-changed" role="signal"><title>The <literal>&quot;password-flags-changed&quot;</literal> signal</title>
<indexterm zone="TpSvcChannelInterfacePassword-password-flags-changed"><primary sortas="TpSvcChannelInterfacePassword::password-flags-changed">TpSvcChannelInterfacePassword::password-flags-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcChannelInterfacePassword">TpSvcChannelInterfacePassword</link> *arg_Added,
                                                        <link linkend="guint">guint</link>                          arg_Removed,
                                                        <link linkend="guint">guint</link>                          arg2,
                                                        <link linkend="gpointer">gpointer</link>                       user_data)        : Run Last / Has Details</programlisting>
<para>
The PasswordFlagsChanged D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>arg_Added</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Removed</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>


<refsect1 id="telepathy-glib-svc-channel-text.see-also">
<title>See Also</title>
#TpTextMixin
</refsect1>

</refentry>
