<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-svc-media-interfaces">
<refmeta>
<refentrytitle role="top_of_page" id="telepathy-glib-svc-media-interfaces.top_of_page">Service-side media streaming helper interfaces</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Service-side media streaming helper interfaces</refname>
<refpurpose>media session and media stream</refpurpose>
</refnamediv>

<refsynopsisdiv id="telepathy-glib-svc-media-interfaces.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>
<anchor id="TpSvcMediaSessionHandler"/><anchor id="TpSvcMediaStreamHandler"/>
<synopsis>

#include &lt;telepathy-glib/svc-media-interfaces.h&gt;

                    <link linkend="TpSvcMediaSessionHandler-struct">TpSvcMediaSessionHandler</link>;
                    <link linkend="TpSvcMediaSessionHandlerClass">TpSvcMediaSessionHandlerClass</link>;
<link linkend="void">void</link>                (<link linkend="tp-svc-media-session-handler-error-impl">*tp_svc_media_session_handler_error_impl</link>)
                                                        (<link linkend="TpSvcMediaSessionHandler">TpSvcMediaSessionHandler</link> *self,
                                                         <link linkend="guint">guint</link> in_Error_Code,
                                                         const <link linkend="gchar">gchar</link> *in_Message,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-media-session-handler-implement-error">tp_svc_media_session_handler_implement_error</link>
                                                        (<link linkend="TpSvcMediaSessionHandlerClass">TpSvcMediaSessionHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-session-handler-error-impl">tp_svc_media_session_handler_error_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-media-session-handler-return-from-error">tp_svc_media_session_handler_return_from_error</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                (<link linkend="tp-svc-media-session-handler-ready-impl">*tp_svc_media_session_handler_ready_impl</link>)
                                                        (<link linkend="TpSvcMediaSessionHandler">TpSvcMediaSessionHandler</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-media-session-handler-implement-ready">tp_svc_media_session_handler_implement_ready</link>
                                                        (<link linkend="TpSvcMediaSessionHandlerClass">TpSvcMediaSessionHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-session-handler-ready-impl">tp_svc_media_session_handler_ready_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-media-session-handler-return-from-ready">tp_svc_media_session_handler_return_from_ready</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-media-session-handler-emit-new-stream-handler">tp_svc_media_session_handler_emit_new_stream_handler</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="gchar">gchar</link> *arg_Stream_Handler,
                                                         <link linkend="guint">guint</link> arg_ID,
                                                         <link linkend="guint">guint</link> arg_Media_Type,
                                                         <link linkend="guint">guint</link> arg_Direction);


                    <link linkend="TpSvcMediaStreamHandler-struct">TpSvcMediaStreamHandler</link>;
                    <link linkend="TpSvcMediaStreamHandlerClass">TpSvcMediaStreamHandlerClass</link>;
<link linkend="void">void</link>                (<link linkend="tp-svc-media-stream-handler-codec-choice-impl">*tp_svc_media_stream_handler_codec_choice_impl</link>)
                                                        (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *self,
                                                         <link linkend="guint">guint</link> in_Codec_ID,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-implement-codec-choice">tp_svc_media_stream_handler_implement_codec_choice</link>
                                                        (<link linkend="TpSvcMediaStreamHandlerClass">TpSvcMediaStreamHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-stream-handler-codec-choice-impl">tp_svc_media_stream_handler_codec_choice_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-return-from-codec-choice">tp_svc_media_stream_handler_return_from_codec_choice</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                (<link linkend="tp-svc-media-stream-handler-error-impl">*tp_svc_media_stream_handler_error_impl</link>)
                                                        (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *self,
                                                         <link linkend="guint">guint</link> in_Error_Code,
                                                         const <link linkend="gchar">gchar</link> *in_Message,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-implement-error">tp_svc_media_stream_handler_implement_error</link>
                                                        (<link linkend="TpSvcMediaStreamHandlerClass">TpSvcMediaStreamHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-stream-handler-error-impl">tp_svc_media_stream_handler_error_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-return-from-error">tp_svc_media_stream_handler_return_from_error</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                (<link linkend="tp-svc-media-stream-handler-native-candidates-prepared-impl">*tp_svc_media_stream_handler_native_candidates_prepared_impl</link>)
                                                        (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-implement-native-candidates-prepared">tp_svc_media_stream_handler_implement_native_candidates_prepared</link>
                                                        (<link linkend="TpSvcMediaStreamHandlerClass">TpSvcMediaStreamHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-stream-handler-native-candidates-prepared-impl">tp_svc_media_stream_handler_native_candidates_prepared_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-return-from-native-candidates-prepared">tp_svc_media_stream_handler_return_from_native_candidates_prepared</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                (<link linkend="tp-svc-media-stream-handler-new-active-candidate-pair-impl">*tp_svc_media_stream_handler_new_active_candidate_pair_impl</link>)
                                                        (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *self,
                                                         const <link linkend="gchar">gchar</link> *in_Native_Candidate_ID,
                                                         const <link linkend="gchar">gchar</link> *in_Remote_Candidate_ID,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-implement-new-active-candidate-pair">tp_svc_media_stream_handler_implement_new_active_candidate_pair</link>
                                                        (<link linkend="TpSvcMediaStreamHandlerClass">TpSvcMediaStreamHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-stream-handler-new-active-candidate-pair-impl">tp_svc_media_stream_handler_new_active_candidate_pair_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-return-from-new-active-candidate-pair">tp_svc_media_stream_handler_return_from_new_active_candidate_pair</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                (<link linkend="tp-svc-media-stream-handler-new-native-candidate-impl">*tp_svc_media_stream_handler_new_native_candidate_impl</link>)
                                                        (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *self,
                                                         const <link linkend="gchar">gchar</link> *in_Candidate_ID,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Transports,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-implement-new-native-candidate">tp_svc_media_stream_handler_implement_new_native_candidate</link>
                                                        (<link linkend="TpSvcMediaStreamHandlerClass">TpSvcMediaStreamHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-stream-handler-new-native-candidate-impl">tp_svc_media_stream_handler_new_native_candidate_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-return-from-new-native-candidate">tp_svc_media_stream_handler_return_from_new_native_candidate</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                (<link linkend="tp-svc-media-stream-handler-ready-impl">*tp_svc_media_stream_handler_ready_impl</link>)
                                                        (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *self,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Codecs,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-implement-ready">tp_svc_media_stream_handler_implement_ready</link>
                                                        (<link linkend="TpSvcMediaStreamHandlerClass">TpSvcMediaStreamHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-stream-handler-ready-impl">tp_svc_media_stream_handler_ready_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-return-from-ready">tp_svc_media_stream_handler_return_from_ready</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                (<link linkend="tp-svc-media-stream-handler-set-local-codecs-impl">*tp_svc_media_stream_handler_set_local_codecs_impl</link>)
                                                        (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *self,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Codecs,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-implement-set-local-codecs">tp_svc_media_stream_handler_implement_set_local_codecs</link>
                                                        (<link linkend="TpSvcMediaStreamHandlerClass">TpSvcMediaStreamHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-stream-handler-set-local-codecs-impl">tp_svc_media_stream_handler_set_local_codecs_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-return-from-set-local-codecs">tp_svc_media_stream_handler_return_from_set_local_codecs</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                (<link linkend="tp-svc-media-stream-handler-stream-state-impl">*tp_svc_media_stream_handler_stream_state_impl</link>)
                                                        (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *self,
                                                         <link linkend="guint">guint</link> in_State,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-implement-stream-state">tp_svc_media_stream_handler_implement_stream_state</link>
                                                        (<link linkend="TpSvcMediaStreamHandlerClass">TpSvcMediaStreamHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-stream-handler-stream-state-impl">tp_svc_media_stream_handler_stream_state_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-return-from-stream-state">tp_svc_media_stream_handler_return_from_stream_state</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                (<link linkend="tp-svc-media-stream-handler-supported-codecs-impl">*tp_svc_media_stream_handler_supported_codecs_impl</link>)
                                                        (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *self,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Codecs,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-implement-supported-codecs">tp_svc_media_stream_handler_implement_supported_codecs</link>
                                                        (<link linkend="TpSvcMediaStreamHandlerClass">TpSvcMediaStreamHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-stream-handler-supported-codecs-impl">tp_svc_media_stream_handler_supported_codecs_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-return-from-supported-codecs">tp_svc_media_stream_handler_return_from_supported_codecs</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-emit-add-remote-candidate">tp_svc_media_stream_handler_emit_add_remote_candidate</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="gchar">gchar</link> *arg_Candidate_ID,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *arg_Transports);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-emit-close">tp_svc_media_stream_handler_emit_close</link>
                                                        (<link linkend="gpointer">gpointer</link> instance);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-emit-remove-remote-candidate">tp_svc_media_stream_handler_emit_remove_remote_candidate</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="gchar">gchar</link> *arg_Candidate_ID);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-emit-set-active-candidate-pair">tp_svc_media_stream_handler_emit_set_active_candidate_pair</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="gchar">gchar</link> *arg_Native_Candidate_ID,
                                                         const <link linkend="gchar">gchar</link> *arg_Remote_Candidate_ID);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-emit-set-remote-candidate-list">tp_svc_media_stream_handler_emit_set_remote_candidate_list</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *arg_Remote_Candidates);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-emit-set-remote-codecs">tp_svc_media_stream_handler_emit_set_remote_codecs</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *arg_Codecs);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-emit-set-stream-playing">tp_svc_media_stream_handler_emit_set_stream_playing</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="gboolean">gboolean</link> arg_Playing);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-emit-set-stream-sending">tp_svc_media_stream_handler_emit_set_stream_sending</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="gboolean">gboolean</link> arg_Sending);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-emit-start-telephony-event">tp_svc_media_stream_handler_emit_start_telephony_event</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guchar">guchar</link> arg_Event);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-emit-stop-telephony-event">tp_svc_media_stream_handler_emit_stop_telephony_event</link>
                                                        (<link linkend="gpointer">gpointer</link> instance);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-emit-set-stream-held">tp_svc_media_stream_handler_emit_set_stream_held</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="gboolean">gboolean</link> arg_Held);
<link linkend="void">void</link>                (<link linkend="tp-svc-media-stream-handler-hold-state-impl">*tp_svc_media_stream_handler_hold_state_impl</link>)
                                                        (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *self,
                                                         <link linkend="gboolean">gboolean</link> in_Held,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-implement-hold-state">tp_svc_media_stream_handler_implement_hold_state</link>
                                                        (<link linkend="TpSvcMediaStreamHandlerClass">TpSvcMediaStreamHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-stream-handler-hold-state-impl">tp_svc_media_stream_handler_hold_state_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-implement-unhold-failure">tp_svc_media_stream_handler_implement_unhold_failure</link>
                                                        (<link linkend="TpSvcMediaStreamHandlerClass">TpSvcMediaStreamHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-stream-handler-unhold-failure-impl">tp_svc_media_stream_handler_unhold_failure_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-return-from-hold-state">tp_svc_media_stream_handler_return_from_hold_state</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-return-from-unhold-failure">tp_svc_media_stream_handler_return_from_unhold_failure</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                (<link linkend="tp-svc-media-stream-handler-unhold-failure-impl">*tp_svc_media_stream_handler_unhold_failure_impl</link>)
                                                        (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                (<link linkend="tp-svc-media-stream-handler-codecs-updated-impl">*tp_svc_media_stream_handler_codecs_updated_impl</link>)
                                                        (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *self,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Codecs,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-implement-codecs-updated">tp_svc_media_stream_handler_implement_codecs_updated</link>
                                                        (<link linkend="TpSvcMediaStreamHandlerClass">TpSvcMediaStreamHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-stream-handler-codecs-updated-impl">tp_svc_media_stream_handler_codecs_updated_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-media-stream-handler-return-from-codecs-updated">tp_svc_media_stream_handler_return_from_codecs_updated</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
</synopsis>
</refsynopsisdiv>

<refsect1 id="telepathy-glib-svc-media-interfaces.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GInterface">GInterface</link>
   +----TpSvcMediaSessionHandler
</synopsis>
<synopsis>
  <link linkend="GInterface">GInterface</link>
   +----TpSvcMediaStreamHandler
</synopsis>
</refsect1>






<refsect1 id="telepathy-glib-svc-media-interfaces.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="TpSvcMediaSessionHandler-new-stream-handler">new-stream-handler</link>&quot;                             : Run Last / Has Details
  &quot;<link linkend="TpSvcMediaStreamHandler-add-remote-candidate">add-remote-candidate</link>&quot;                           : Run Last / Has Details
  &quot;<link linkend="TpSvcMediaStreamHandler-close">close</link>&quot;                                          : Run Last / Has Details
  &quot;<link linkend="TpSvcMediaStreamHandler-remove-remote-candidate">remove-remote-candidate</link>&quot;                        : Run Last / Has Details
  &quot;<link linkend="TpSvcMediaStreamHandler-set-active-candidate-pair">set-active-candidate-pair</link>&quot;                      : Run Last / Has Details
  &quot;<link linkend="TpSvcMediaStreamHandler-set-remote-candidate-list">set-remote-candidate-list</link>&quot;                      : Run Last / Has Details
  &quot;<link linkend="TpSvcMediaStreamHandler-set-remote-codecs">set-remote-codecs</link>&quot;                              : Run Last / Has Details
  &quot;<link linkend="TpSvcMediaStreamHandler-set-stream-held">set-stream-held</link>&quot;                                : Run Last / Has Details
  &quot;<link linkend="TpSvcMediaStreamHandler-set-stream-playing">set-stream-playing</link>&quot;                             : Run Last / Has Details
  &quot;<link linkend="TpSvcMediaStreamHandler-set-stream-sending">set-stream-sending</link>&quot;                             : Run Last / Has Details
  &quot;<link linkend="TpSvcMediaStreamHandler-start-telephony-event">start-telephony-event</link>&quot;                          : Run Last / Has Details
  &quot;<link linkend="TpSvcMediaStreamHandler-stop-telephony-event">stop-telephony-event</link>&quot;                           : Run Last / Has Details
</synopsis>
</refsect1>


<refsect1 id="telepathy-glib-svc-media-interfaces.description" role="desc">
<title role="desc.title">Description</title>
<para>
These interfaces (auto-generated from the telepathy spec) make it easier
to export the objects used to implement <link linkend="TpSvcChannelTypeStreamedMedia"><type>TpSvcChannelTypeStreamedMedia</type></link>,
with the correct method and signal signatures, and emit signals from those
objects.</para>
<para>
</para>
</refsect1>

<refsect1 id="telepathy-glib-svc-media-interfaces.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="TpSvcMediaSessionHandler-struct" role="struct">
<title>TpSvcMediaSessionHandler</title>
<indexterm zone="TpSvcMediaSessionHandler-struct"><primary sortas="TpSvcMediaSessionHandler">TpSvcMediaSessionHandler</primary></indexterm><programlisting>typedef struct _TpSvcMediaSessionHandler TpSvcMediaSessionHandler;</programlisting>
<para>
Dummy typedef representing any implementation of this interface.</para>
<para>
</para></refsect2>
<refsect2 id="TpSvcMediaSessionHandlerClass" role="struct">
<title>TpSvcMediaSessionHandlerClass</title>
<indexterm zone="TpSvcMediaSessionHandlerClass"><primary sortas="TpSvcMediaSessionHandlerClass">TpSvcMediaSessionHandlerClass</primary></indexterm><programlisting>typedef struct _TpSvcMediaSessionHandlerClass TpSvcMediaSessionHandlerClass;</programlisting>
<para>
The class of TpSvcMediaSessionHandler.
</para>
<para>
In a full implementation of this interface (i.e. all
methods implemented), the interface initialization
function used in <link linkend="G-IMPLEMENT-INTERFACE--CAPS"><function>G_IMPLEMENT_INTERFACE()</function></link> would
typically look like this:
</para>
<para>
<programlisting>
static void
implement_media_session_handler (gpointer klass,
    gpointer unused G_GNUC_UNUSED)
{
#define IMPLEMENT(x) tp_svc_media_session_handler_implement_##<link linkend="x">x</link> (\
  klass, my_object_##<link linkend="x">x</link>)
  IMPLEMENT (error);
  IMPLEMENT (ready);
#undef IMPLEMENT
}
</programlisting></para>
<para>
</para></refsect2>
<refsect2 id="tp-svc-media-session-handler-error-impl" role="function">
<title>tp_svc_media_session_handler_error_impl ()</title>
<indexterm zone="tp-svc-media-session-handler-error-impl"><primary sortas="tp_svc_media_session_handler_error_impl">tp_svc_media_session_handler_error_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_media_session_handler_error_impl)
                                                        (<link linkend="TpSvcMediaSessionHandler">TpSvcMediaSessionHandler</link> *self,
                                                         <link linkend="guint">guint</link> in_Error_Code,
                                                         const <link linkend="gchar">gchar</link> *in_Message,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
Error on interface org.freedesktop.Telepathy.Media.SessionHandler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Error_Code</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Message</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-session-handler-implement-error" role="function">
<title>tp_svc_media_session_handler_implement_error ()</title>
<indexterm zone="tp-svc-media-session-handler-implement-error"><primary sortas="tp_svc_media_session_handler_implement_error">tp_svc_media_session_handler_implement_error</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_session_handler_implement_error
                                                        (<link linkend="TpSvcMediaSessionHandlerClass">TpSvcMediaSessionHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-session-handler-error-impl">tp_svc_media_session_handler_error_impl</link> impl);</programlisting>
<para>
Register an implementation for the Error method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the Error D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-session-handler-return-from-error" role="function">
<title>tp_svc_media_session_handler_return_from_error ()</title>
<indexterm zone="tp-svc-media-session-handler-return-from-error"><primary sortas="tp_svc_media_session_handler_return_from_error">tp_svc_media_session_handler_return_from_error</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_session_handler_return_from_error
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-session-handler-ready-impl" role="function">
<title>tp_svc_media_session_handler_ready_impl ()</title>
<indexterm zone="tp-svc-media-session-handler-ready-impl"><primary sortas="tp_svc_media_session_handler_ready_impl">tp_svc_media_session_handler_ready_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_media_session_handler_ready_impl)
                                                        (<link linkend="TpSvcMediaSessionHandler">TpSvcMediaSessionHandler</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
Ready on interface org.freedesktop.Telepathy.Media.SessionHandler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-session-handler-implement-ready" role="function">
<title>tp_svc_media_session_handler_implement_ready ()</title>
<indexterm zone="tp-svc-media-session-handler-implement-ready"><primary sortas="tp_svc_media_session_handler_implement_ready">tp_svc_media_session_handler_implement_ready</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_session_handler_implement_ready
                                                        (<link linkend="TpSvcMediaSessionHandlerClass">TpSvcMediaSessionHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-session-handler-ready-impl">tp_svc_media_session_handler_ready_impl</link> impl);</programlisting>
<para>
Register an implementation for the Ready method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the Ready D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-session-handler-return-from-ready" role="function">
<title>tp_svc_media_session_handler_return_from_ready ()</title>
<indexterm zone="tp-svc-media-session-handler-return-from-ready"><primary sortas="tp_svc_media_session_handler_return_from_ready">tp_svc_media_session_handler_return_from_ready</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_session_handler_return_from_ready
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-session-handler-emit-new-stream-handler" role="function">
<title>tp_svc_media_session_handler_emit_new_stream_handler ()</title>
<indexterm zone="tp-svc-media-session-handler-emit-new-stream-handler"><primary sortas="tp_svc_media_session_handler_emit_new_stream_handler">tp_svc_media_session_handler_emit_new_stream_handler</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_session_handler_emit_new_stream_handler
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="gchar">gchar</link> *arg_Stream_Handler,
                                                         <link linkend="guint">guint</link> arg_ID,
                                                         <link linkend="guint">guint</link> arg_Media_Type,
                                                         <link linkend="guint">guint</link> arg_Direction);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
NewStreamHandler signal on interface org.freedesktop.Telepathy.Media.SessionHandler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Stream_Handler</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_ID</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Media_Type</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Direction</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TpSvcMediaStreamHandler-struct" role="struct">
<title>TpSvcMediaStreamHandler</title>
<indexterm zone="TpSvcMediaStreamHandler-struct"><primary sortas="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</primary></indexterm><programlisting>typedef struct _TpSvcMediaStreamHandler TpSvcMediaStreamHandler;</programlisting>
<para>
Dummy typedef representing any implementation of this interface.</para>
<para>
</para></refsect2>
<refsect2 id="TpSvcMediaStreamHandlerClass" role="struct">
<title>TpSvcMediaStreamHandlerClass</title>
<indexterm zone="TpSvcMediaStreamHandlerClass"><primary sortas="TpSvcMediaStreamHandlerClass">TpSvcMediaStreamHandlerClass</primary></indexterm><programlisting>typedef struct _TpSvcMediaStreamHandlerClass TpSvcMediaStreamHandlerClass;</programlisting>
<para>
The class of TpSvcMediaStreamHandler.
</para>
<para>
In a full implementation of this interface (i.e. all
methods implemented), the interface initialization
function used in <link linkend="G-IMPLEMENT-INTERFACE--CAPS"><function>G_IMPLEMENT_INTERFACE()</function></link> would
typically look like this:
</para>
<para>
<programlisting>
static void
implement_media_stream_handler (gpointer klass,
    gpointer unused G_GNUC_UNUSED)
{
#define IMPLEMENT(x) tp_svc_media_stream_handler_implement_##<link linkend="x">x</link> (\
  klass, my_object_##<link linkend="x">x</link>)
  IMPLEMENT (codec_choice);
  IMPLEMENT (error);
  IMPLEMENT (native_candidates_prepared);
  IMPLEMENT (new_active_candidate_pair);
  IMPLEMENT (new_native_candidate);
  IMPLEMENT (ready);
  IMPLEMENT (set_local_codecs);
  IMPLEMENT (stream_state);
  IMPLEMENT (supported_codecs);
  IMPLEMENT (codecs_updated);
  IMPLEMENT (hold_state);
  IMPLEMENT (unhold_failure);
#undef IMPLEMENT
}
</programlisting></para>
<para>
</para></refsect2>
<refsect2 id="tp-svc-media-stream-handler-codec-choice-impl" role="function">
<title>tp_svc_media_stream_handler_codec_choice_impl ()</title>
<indexterm zone="tp-svc-media-stream-handler-codec-choice-impl"><primary sortas="tp_svc_media_stream_handler_codec_choice_impl">tp_svc_media_stream_handler_codec_choice_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_media_stream_handler_codec_choice_impl)
                                                        (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *self,
                                                         <link linkend="guint">guint</link> in_Codec_ID,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
CodecChoice on interface org.freedesktop.Telepathy.Media.StreamHandler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Codec_ID</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-implement-codec-choice" role="function">
<title>tp_svc_media_stream_handler_implement_codec_choice ()</title>
<indexterm zone="tp-svc-media-stream-handler-implement-codec-choice"><primary sortas="tp_svc_media_stream_handler_implement_codec_choice">tp_svc_media_stream_handler_implement_codec_choice</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_implement_codec_choice
                                                        (<link linkend="TpSvcMediaStreamHandlerClass">TpSvcMediaStreamHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-stream-handler-codec-choice-impl">tp_svc_media_stream_handler_codec_choice_impl</link> impl);</programlisting>
<para>
Register an implementation for the CodecChoice method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the CodecChoice D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-return-from-codec-choice" role="function">
<title>tp_svc_media_stream_handler_return_from_codec_choice ()</title>
<indexterm zone="tp-svc-media-stream-handler-return-from-codec-choice"><primary sortas="tp_svc_media_stream_handler_return_from_codec_choice">tp_svc_media_stream_handler_return_from_codec_choice</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_return_from_codec_choice
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-error-impl" role="function">
<title>tp_svc_media_stream_handler_error_impl ()</title>
<indexterm zone="tp-svc-media-stream-handler-error-impl"><primary sortas="tp_svc_media_stream_handler_error_impl">tp_svc_media_stream_handler_error_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_media_stream_handler_error_impl)
                                                        (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *self,
                                                         <link linkend="guint">guint</link> in_Error_Code,
                                                         const <link linkend="gchar">gchar</link> *in_Message,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
Error on interface org.freedesktop.Telepathy.Media.StreamHandler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Error_Code</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Message</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-implement-error" role="function">
<title>tp_svc_media_stream_handler_implement_error ()</title>
<indexterm zone="tp-svc-media-stream-handler-implement-error"><primary sortas="tp_svc_media_stream_handler_implement_error">tp_svc_media_stream_handler_implement_error</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_implement_error
                                                        (<link linkend="TpSvcMediaStreamHandlerClass">TpSvcMediaStreamHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-stream-handler-error-impl">tp_svc_media_stream_handler_error_impl</link> impl);</programlisting>
<para>
Register an implementation for the Error method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the Error D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-return-from-error" role="function">
<title>tp_svc_media_stream_handler_return_from_error ()</title>
<indexterm zone="tp-svc-media-stream-handler-return-from-error"><primary sortas="tp_svc_media_stream_handler_return_from_error">tp_svc_media_stream_handler_return_from_error</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_return_from_error
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-native-candidates-prepared-impl" role="function">
<title>tp_svc_media_stream_handler_native_candidates_prepared_impl ()</title>
<indexterm zone="tp-svc-media-stream-handler-native-candidates-prepared-impl"><primary sortas="tp_svc_media_stream_handler_native_candidates_prepared_impl">tp_svc_media_stream_handler_native_candidates_prepared_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_media_stream_handler_native_candidates_prepared_impl)
                                                        (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
NativeCandidatesPrepared on interface org.freedesktop.Telepathy.Media.StreamHandler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-implement-native-candidates-prepared" role="function">
<title>tp_svc_media_stream_handler_implement_native_candidates_prepared ()</title>
<indexterm zone="tp-svc-media-stream-handler-implement-native-candidates-prepared"><primary sortas="tp_svc_media_stream_handler_implement_native_candidates_prepared">tp_svc_media_stream_handler_implement_native_candidates_prepared</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_implement_native_candidates_prepared
                                                        (<link linkend="TpSvcMediaStreamHandlerClass">TpSvcMediaStreamHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-stream-handler-native-candidates-prepared-impl">tp_svc_media_stream_handler_native_candidates_prepared_impl</link> impl);</programlisting>
<para>
Register an implementation for the NativeCandidatesPrepared method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the NativeCandidatesPrepared D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-return-from-native-candidates-prepared" role="function">
<title>tp_svc_media_stream_handler_return_from_native_candidates_prepared ()</title>
<indexterm zone="tp-svc-media-stream-handler-return-from-native-candidates-prepared"><primary sortas="tp_svc_media_stream_handler_return_from_native_candidates_prepared">tp_svc_media_stream_handler_return_from_native_candidates_prepared</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_return_from_native_candidates_prepared
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-new-active-candidate-pair-impl" role="function">
<title>tp_svc_media_stream_handler_new_active_candidate_pair_impl ()</title>
<indexterm zone="tp-svc-media-stream-handler-new-active-candidate-pair-impl"><primary sortas="tp_svc_media_stream_handler_new_active_candidate_pair_impl">tp_svc_media_stream_handler_new_active_candidate_pair_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_media_stream_handler_new_active_candidate_pair_impl)
                                                        (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *self,
                                                         const <link linkend="gchar">gchar</link> *in_Native_Candidate_ID,
                                                         const <link linkend="gchar">gchar</link> *in_Remote_Candidate_ID,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
NewActiveCandidatePair on interface org.freedesktop.Telepathy.Media.StreamHandler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Native_Candidate_ID</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Remote_Candidate_ID</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-implement-new-active-candidate-pair" role="function">
<title>tp_svc_media_stream_handler_implement_new_active_candidate_pair ()</title>
<indexterm zone="tp-svc-media-stream-handler-implement-new-active-candidate-pair"><primary sortas="tp_svc_media_stream_handler_implement_new_active_candidate_pair">tp_svc_media_stream_handler_implement_new_active_candidate_pair</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_implement_new_active_candidate_pair
                                                        (<link linkend="TpSvcMediaStreamHandlerClass">TpSvcMediaStreamHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-stream-handler-new-active-candidate-pair-impl">tp_svc_media_stream_handler_new_active_candidate_pair_impl</link> impl);</programlisting>
<para>
Register an implementation for the NewActiveCandidatePair method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the NewActiveCandidatePair D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-return-from-new-active-candidate-pair" role="function">
<title>tp_svc_media_stream_handler_return_from_new_active_candidate_pair ()</title>
<indexterm zone="tp-svc-media-stream-handler-return-from-new-active-candidate-pair"><primary sortas="tp_svc_media_stream_handler_return_from_new_active_candidate_pair">tp_svc_media_stream_handler_return_from_new_active_candidate_pair</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_return_from_new_active_candidate_pair
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-new-native-candidate-impl" role="function">
<title>tp_svc_media_stream_handler_new_native_candidate_impl ()</title>
<indexterm zone="tp-svc-media-stream-handler-new-native-candidate-impl"><primary sortas="tp_svc_media_stream_handler_new_native_candidate_impl">tp_svc_media_stream_handler_new_native_candidate_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_media_stream_handler_new_native_candidate_impl)
                                                        (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *self,
                                                         const <link linkend="gchar">gchar</link> *in_Candidate_ID,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Transports,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
NewNativeCandidate on interface org.freedesktop.Telepathy.Media.StreamHandler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Candidate_ID</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Transports</parameter>&#160;:</term>
<listitem><simpara> const GPtrArray * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-implement-new-native-candidate" role="function">
<title>tp_svc_media_stream_handler_implement_new_native_candidate ()</title>
<indexterm zone="tp-svc-media-stream-handler-implement-new-native-candidate"><primary sortas="tp_svc_media_stream_handler_implement_new_native_candidate">tp_svc_media_stream_handler_implement_new_native_candidate</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_implement_new_native_candidate
                                                        (<link linkend="TpSvcMediaStreamHandlerClass">TpSvcMediaStreamHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-stream-handler-new-native-candidate-impl">tp_svc_media_stream_handler_new_native_candidate_impl</link> impl);</programlisting>
<para>
Register an implementation for the NewNativeCandidate method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the NewNativeCandidate D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-return-from-new-native-candidate" role="function">
<title>tp_svc_media_stream_handler_return_from_new_native_candidate ()</title>
<indexterm zone="tp-svc-media-stream-handler-return-from-new-native-candidate"><primary sortas="tp_svc_media_stream_handler_return_from_new_native_candidate">tp_svc_media_stream_handler_return_from_new_native_candidate</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_return_from_new_native_candidate
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-ready-impl" role="function">
<title>tp_svc_media_stream_handler_ready_impl ()</title>
<indexterm zone="tp-svc-media-stream-handler-ready-impl"><primary sortas="tp_svc_media_stream_handler_ready_impl">tp_svc_media_stream_handler_ready_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_media_stream_handler_ready_impl)
                                                        (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *self,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Codecs,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
Ready on interface org.freedesktop.Telepathy.Media.StreamHandler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Codecs</parameter>&#160;:</term>
<listitem><simpara> const GPtrArray * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-implement-ready" role="function">
<title>tp_svc_media_stream_handler_implement_ready ()</title>
<indexterm zone="tp-svc-media-stream-handler-implement-ready"><primary sortas="tp_svc_media_stream_handler_implement_ready">tp_svc_media_stream_handler_implement_ready</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_implement_ready
                                                        (<link linkend="TpSvcMediaStreamHandlerClass">TpSvcMediaStreamHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-stream-handler-ready-impl">tp_svc_media_stream_handler_ready_impl</link> impl);</programlisting>
<para>
Register an implementation for the Ready method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the Ready D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-return-from-ready" role="function">
<title>tp_svc_media_stream_handler_return_from_ready ()</title>
<indexterm zone="tp-svc-media-stream-handler-return-from-ready"><primary sortas="tp_svc_media_stream_handler_return_from_ready">tp_svc_media_stream_handler_return_from_ready</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_return_from_ready
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-set-local-codecs-impl" role="function">
<title>tp_svc_media_stream_handler_set_local_codecs_impl ()</title>
<indexterm zone="tp-svc-media-stream-handler-set-local-codecs-impl"><primary sortas="tp_svc_media_stream_handler_set_local_codecs_impl">tp_svc_media_stream_handler_set_local_codecs_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_media_stream_handler_set_local_codecs_impl)
                                                        (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *self,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Codecs,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
SetLocalCodecs on interface org.freedesktop.Telepathy.Media.StreamHandler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Codecs</parameter>&#160;:</term>
<listitem><simpara> const GPtrArray * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-implement-set-local-codecs" role="function">
<title>tp_svc_media_stream_handler_implement_set_local_codecs ()</title>
<indexterm zone="tp-svc-media-stream-handler-implement-set-local-codecs"><primary sortas="tp_svc_media_stream_handler_implement_set_local_codecs">tp_svc_media_stream_handler_implement_set_local_codecs</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_implement_set_local_codecs
                                                        (<link linkend="TpSvcMediaStreamHandlerClass">TpSvcMediaStreamHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-stream-handler-set-local-codecs-impl">tp_svc_media_stream_handler_set_local_codecs_impl</link> impl);</programlisting>
<para>
Register an implementation for the SetLocalCodecs method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the SetLocalCodecs D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-return-from-set-local-codecs" role="function">
<title>tp_svc_media_stream_handler_return_from_set_local_codecs ()</title>
<indexterm zone="tp-svc-media-stream-handler-return-from-set-local-codecs"><primary sortas="tp_svc_media_stream_handler_return_from_set_local_codecs">tp_svc_media_stream_handler_return_from_set_local_codecs</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_return_from_set_local_codecs
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-stream-state-impl" role="function">
<title>tp_svc_media_stream_handler_stream_state_impl ()</title>
<indexterm zone="tp-svc-media-stream-handler-stream-state-impl"><primary sortas="tp_svc_media_stream_handler_stream_state_impl">tp_svc_media_stream_handler_stream_state_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_media_stream_handler_stream_state_impl)
                                                        (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *self,
                                                         <link linkend="guint">guint</link> in_State,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
StreamState on interface org.freedesktop.Telepathy.Media.StreamHandler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_State</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-implement-stream-state" role="function">
<title>tp_svc_media_stream_handler_implement_stream_state ()</title>
<indexterm zone="tp-svc-media-stream-handler-implement-stream-state"><primary sortas="tp_svc_media_stream_handler_implement_stream_state">tp_svc_media_stream_handler_implement_stream_state</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_implement_stream_state
                                                        (<link linkend="TpSvcMediaStreamHandlerClass">TpSvcMediaStreamHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-stream-handler-stream-state-impl">tp_svc_media_stream_handler_stream_state_impl</link> impl);</programlisting>
<para>
Register an implementation for the StreamState method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the StreamState D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-return-from-stream-state" role="function">
<title>tp_svc_media_stream_handler_return_from_stream_state ()</title>
<indexterm zone="tp-svc-media-stream-handler-return-from-stream-state"><primary sortas="tp_svc_media_stream_handler_return_from_stream_state">tp_svc_media_stream_handler_return_from_stream_state</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_return_from_stream_state
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-supported-codecs-impl" role="function">
<title>tp_svc_media_stream_handler_supported_codecs_impl ()</title>
<indexterm zone="tp-svc-media-stream-handler-supported-codecs-impl"><primary sortas="tp_svc_media_stream_handler_supported_codecs_impl">tp_svc_media_stream_handler_supported_codecs_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_media_stream_handler_supported_codecs_impl)
                                                        (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *self,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Codecs,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
SupportedCodecs on interface org.freedesktop.Telepathy.Media.StreamHandler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Codecs</parameter>&#160;:</term>
<listitem><simpara> const GPtrArray * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-implement-supported-codecs" role="function">
<title>tp_svc_media_stream_handler_implement_supported_codecs ()</title>
<indexterm zone="tp-svc-media-stream-handler-implement-supported-codecs"><primary sortas="tp_svc_media_stream_handler_implement_supported_codecs">tp_svc_media_stream_handler_implement_supported_codecs</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_implement_supported_codecs
                                                        (<link linkend="TpSvcMediaStreamHandlerClass">TpSvcMediaStreamHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-stream-handler-supported-codecs-impl">tp_svc_media_stream_handler_supported_codecs_impl</link> impl);</programlisting>
<para>
Register an implementation for the SupportedCodecs method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the SupportedCodecs D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-return-from-supported-codecs" role="function">
<title>tp_svc_media_stream_handler_return_from_supported_codecs ()</title>
<indexterm zone="tp-svc-media-stream-handler-return-from-supported-codecs"><primary sortas="tp_svc_media_stream_handler_return_from_supported_codecs">tp_svc_media_stream_handler_return_from_supported_codecs</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_return_from_supported_codecs
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-emit-add-remote-candidate" role="function">
<title>tp_svc_media_stream_handler_emit_add_remote_candidate ()</title>
<indexterm zone="tp-svc-media-stream-handler-emit-add-remote-candidate"><primary sortas="tp_svc_media_stream_handler_emit_add_remote_candidate">tp_svc_media_stream_handler_emit_add_remote_candidate</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_emit_add_remote_candidate
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="gchar">gchar</link> *arg_Candidate_ID,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *arg_Transports);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
AddRemoteCandidate signal on interface org.freedesktop.Telepathy.Media.StreamHandler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Candidate_ID</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Transports</parameter>&#160;:</term>
<listitem><simpara> const GPtrArray * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-emit-close" role="function">
<title>tp_svc_media_stream_handler_emit_close ()</title>
<indexterm zone="tp-svc-media-stream-handler-emit-close"><primary sortas="tp_svc_media_stream_handler_emit_close">tp_svc_media_stream_handler_emit_close</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_emit_close
                                                        (<link linkend="gpointer">gpointer</link> instance);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
Close signal on interface org.freedesktop.Telepathy.Media.StreamHandler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-emit-remove-remote-candidate" role="function">
<title>tp_svc_media_stream_handler_emit_remove_remote_candidate ()</title>
<indexterm zone="tp-svc-media-stream-handler-emit-remove-remote-candidate"><primary sortas="tp_svc_media_stream_handler_emit_remove_remote_candidate">tp_svc_media_stream_handler_emit_remove_remote_candidate</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_emit_remove_remote_candidate
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="gchar">gchar</link> *arg_Candidate_ID);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
RemoveRemoteCandidate signal on interface org.freedesktop.Telepathy.Media.StreamHandler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Candidate_ID</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-emit-set-active-candidate-pair" role="function">
<title>tp_svc_media_stream_handler_emit_set_active_candidate_pair ()</title>
<indexterm zone="tp-svc-media-stream-handler-emit-set-active-candidate-pair"><primary sortas="tp_svc_media_stream_handler_emit_set_active_candidate_pair">tp_svc_media_stream_handler_emit_set_active_candidate_pair</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_emit_set_active_candidate_pair
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="gchar">gchar</link> *arg_Native_Candidate_ID,
                                                         const <link linkend="gchar">gchar</link> *arg_Remote_Candidate_ID);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
SetActiveCandidatePair signal on interface org.freedesktop.Telepathy.Media.StreamHandler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Native_Candidate_ID</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Remote_Candidate_ID</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-emit-set-remote-candidate-list" role="function">
<title>tp_svc_media_stream_handler_emit_set_remote_candidate_list ()</title>
<indexterm zone="tp-svc-media-stream-handler-emit-set-remote-candidate-list"><primary sortas="tp_svc_media_stream_handler_emit_set_remote_candidate_list">tp_svc_media_stream_handler_emit_set_remote_candidate_list</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_emit_set_remote_candidate_list
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *arg_Remote_Candidates);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
SetRemoteCandidateList signal on interface org.freedesktop.Telepathy.Media.StreamHandler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Remote_Candidates</parameter>&#160;:</term>
<listitem><simpara> const GPtrArray * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-emit-set-remote-codecs" role="function">
<title>tp_svc_media_stream_handler_emit_set_remote_codecs ()</title>
<indexterm zone="tp-svc-media-stream-handler-emit-set-remote-codecs"><primary sortas="tp_svc_media_stream_handler_emit_set_remote_codecs">tp_svc_media_stream_handler_emit_set_remote_codecs</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_emit_set_remote_codecs
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *arg_Codecs);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
SetRemoteCodecs signal on interface org.freedesktop.Telepathy.Media.StreamHandler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Codecs</parameter>&#160;:</term>
<listitem><simpara> const GPtrArray * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-emit-set-stream-playing" role="function">
<title>tp_svc_media_stream_handler_emit_set_stream_playing ()</title>
<indexterm zone="tp-svc-media-stream-handler-emit-set-stream-playing"><primary sortas="tp_svc_media_stream_handler_emit_set_stream_playing">tp_svc_media_stream_handler_emit_set_stream_playing</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_emit_set_stream_playing
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="gboolean">gboolean</link> arg_Playing);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
SetStreamPlaying signal on interface org.freedesktop.Telepathy.Media.StreamHandler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Playing</parameter>&#160;:</term>
<listitem><simpara> gboolean  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-emit-set-stream-sending" role="function">
<title>tp_svc_media_stream_handler_emit_set_stream_sending ()</title>
<indexterm zone="tp-svc-media-stream-handler-emit-set-stream-sending"><primary sortas="tp_svc_media_stream_handler_emit_set_stream_sending">tp_svc_media_stream_handler_emit_set_stream_sending</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_emit_set_stream_sending
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="gboolean">gboolean</link> arg_Sending);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
SetStreamSending signal on interface org.freedesktop.Telepathy.Media.StreamHandler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Sending</parameter>&#160;:</term>
<listitem><simpara> gboolean  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-emit-start-telephony-event" role="function">
<title>tp_svc_media_stream_handler_emit_start_telephony_event ()</title>
<indexterm zone="tp-svc-media-stream-handler-emit-start-telephony-event"><primary sortas="tp_svc_media_stream_handler_emit_start_telephony_event">tp_svc_media_stream_handler_emit_start_telephony_event</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_emit_start_telephony_event
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guchar">guchar</link> arg_Event);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
StartTelephonyEvent signal on interface org.freedesktop.Telepathy.Media.StreamHandler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Event</parameter>&#160;:</term>
<listitem><simpara> guchar  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-emit-stop-telephony-event" role="function">
<title>tp_svc_media_stream_handler_emit_stop_telephony_event ()</title>
<indexterm zone="tp-svc-media-stream-handler-emit-stop-telephony-event"><primary sortas="tp_svc_media_stream_handler_emit_stop_telephony_event">tp_svc_media_stream_handler_emit_stop_telephony_event</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_emit_stop_telephony_event
                                                        (<link linkend="gpointer">gpointer</link> instance);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
StopTelephonyEvent signal on interface org.freedesktop.Telepathy.Media.StreamHandler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-emit-set-stream-held" role="function">
<title>tp_svc_media_stream_handler_emit_set_stream_held ()</title>
<indexterm zone="tp-svc-media-stream-handler-emit-set-stream-held"><primary sortas="tp_svc_media_stream_handler_emit_set_stream_held">tp_svc_media_stream_handler_emit_set_stream_held</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_emit_set_stream_held
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="gboolean">gboolean</link> arg_Held);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
SetStreamHeld signal on interface org.freedesktop.Telepathy.Media.StreamHandler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Held</parameter>&#160;:</term>
<listitem><simpara> gboolean  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-hold-state-impl" role="function">
<title>tp_svc_media_stream_handler_hold_state_impl ()</title>
<indexterm zone="tp-svc-media-stream-handler-hold-state-impl"><primary sortas="tp_svc_media_stream_handler_hold_state_impl">tp_svc_media_stream_handler_hold_state_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_media_stream_handler_hold_state_impl)
                                                        (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *self,
                                                         <link linkend="gboolean">gboolean</link> in_Held,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
HoldState on interface org.freedesktop.Telepathy.Media.StreamHandler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Held</parameter>&#160;:</term>
<listitem><simpara> gboolean  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-implement-hold-state" role="function">
<title>tp_svc_media_stream_handler_implement_hold_state ()</title>
<indexterm zone="tp-svc-media-stream-handler-implement-hold-state"><primary sortas="tp_svc_media_stream_handler_implement_hold_state">tp_svc_media_stream_handler_implement_hold_state</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_implement_hold_state
                                                        (<link linkend="TpSvcMediaStreamHandlerClass">TpSvcMediaStreamHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-stream-handler-hold-state-impl">tp_svc_media_stream_handler_hold_state_impl</link> impl);</programlisting>
<para>
Register an implementation for the HoldState method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the HoldState D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-implement-unhold-failure" role="function">
<title>tp_svc_media_stream_handler_implement_unhold_failure ()</title>
<indexterm zone="tp-svc-media-stream-handler-implement-unhold-failure"><primary sortas="tp_svc_media_stream_handler_implement_unhold_failure">tp_svc_media_stream_handler_implement_unhold_failure</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_implement_unhold_failure
                                                        (<link linkend="TpSvcMediaStreamHandlerClass">TpSvcMediaStreamHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-stream-handler-unhold-failure-impl">tp_svc_media_stream_handler_unhold_failure_impl</link> impl);</programlisting>
<para>
Register an implementation for the UnholdFailure method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the UnholdFailure D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-return-from-hold-state" role="function">
<title>tp_svc_media_stream_handler_return_from_hold_state ()</title>
<indexterm zone="tp-svc-media-stream-handler-return-from-hold-state"><primary sortas="tp_svc_media_stream_handler_return_from_hold_state">tp_svc_media_stream_handler_return_from_hold_state</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_return_from_hold_state
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-return-from-unhold-failure" role="function">
<title>tp_svc_media_stream_handler_return_from_unhold_failure ()</title>
<indexterm zone="tp-svc-media-stream-handler-return-from-unhold-failure"><primary sortas="tp_svc_media_stream_handler_return_from_unhold_failure">tp_svc_media_stream_handler_return_from_unhold_failure</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_return_from_unhold_failure
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-unhold-failure-impl" role="function">
<title>tp_svc_media_stream_handler_unhold_failure_impl ()</title>
<indexterm zone="tp-svc-media-stream-handler-unhold-failure-impl"><primary sortas="tp_svc_media_stream_handler_unhold_failure_impl">tp_svc_media_stream_handler_unhold_failure_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_media_stream_handler_unhold_failure_impl)
                                                        (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
UnholdFailure on interface org.freedesktop.Telepathy.Media.StreamHandler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-codecs-updated-impl" role="function">
<title>tp_svc_media_stream_handler_codecs_updated_impl ()</title>
<indexterm zone="tp-svc-media-stream-handler-codecs-updated-impl"><primary sortas="tp_svc_media_stream_handler_codecs_updated_impl">tp_svc_media_stream_handler_codecs_updated_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_media_stream_handler_codecs_updated_impl)
                                                        (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *self,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Codecs,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
CodecsUpdated on interface org.freedesktop.Telepathy.Media.StreamHandler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Codecs</parameter>&#160;:</term>
<listitem><simpara> const GPtrArray * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-implement-codecs-updated" role="function">
<title>tp_svc_media_stream_handler_implement_codecs_updated ()</title>
<indexterm zone="tp-svc-media-stream-handler-implement-codecs-updated"><primary sortas="tp_svc_media_stream_handler_implement_codecs_updated">tp_svc_media_stream_handler_implement_codecs_updated</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_implement_codecs_updated
                                                        (<link linkend="TpSvcMediaStreamHandlerClass">TpSvcMediaStreamHandlerClass</link> *klass,
                                                         <link linkend="tp-svc-media-stream-handler-codecs-updated-impl">tp_svc_media_stream_handler_codecs_updated_impl</link> impl);</programlisting>
<para>
Register an implementation for the CodecsUpdated method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the CodecsUpdated D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-media-stream-handler-return-from-codecs-updated" role="function">
<title>tp_svc_media_stream_handler_return_from_codecs_updated ()</title>
<indexterm zone="tp-svc-media-stream-handler-return-from-codecs-updated"><primary sortas="tp_svc_media_stream_handler_return_from_codecs_updated">tp_svc_media_stream_handler_return_from_codecs_updated</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_media_stream_handler_return_from_codecs_updated
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

<refsect1 id="telepathy-glib-svc-media-interfaces.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="TpSvcMediaSessionHandler-new-stream-handler" role="signal"><title>The <literal>&quot;new-stream-handler&quot;</literal> signal</title>
<indexterm zone="TpSvcMediaSessionHandler-new-stream-handler"><primary sortas="TpSvcMediaSessionHandler::new-stream-handler">TpSvcMediaSessionHandler::new-stream-handler</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcMediaSessionHandler">TpSvcMediaSessionHandler</link> *arg_Stream_Handler,
                                                        <link linkend="DBusGObjectPath">DBusGObjectPath</link>          *arg_ID,
                                                        <link linkend="guint">guint</link>                     arg_Media_Type,
                                                        <link linkend="guint">guint</link>                     arg_Direction,
                                                        <link linkend="guint">guint</link>                     arg4,
                                                        <link linkend="gpointer">gpointer</link>                  user_data)               : Run Last / Has Details</programlisting>
<para>
The NewStreamHandler D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>arg_Stream_Handler</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_ID</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Media_Type</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Direction</parameter>&#160;:</term>
<listitem><simpara> guint  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpSvcMediaStreamHandler-add-remote-candidate" role="signal"><title>The <literal>&quot;add-remote-candidate&quot;</literal> signal</title>
<indexterm zone="TpSvcMediaStreamHandler-add-remote-candidate"><primary sortas="TpSvcMediaStreamHandler::add-remote-candidate">TpSvcMediaStreamHandler::add-remote-candidate</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *arg_Candidate_ID,
                                                        <link linkend="gchar">gchar</link>                   *arg_Transports,
                                                        <link linkend="gpointer">gpointer</link>                 user_data)             : Run Last / Has Details</programlisting>
<para>
The AddRemoteCandidate D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>arg_Candidate_ID</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Transports</parameter>&#160;:</term>
<listitem><simpara> const GPtrArray * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpSvcMediaStreamHandler-close" role="signal"><title>The <literal>&quot;close&quot;</literal> signal</title>
<indexterm zone="TpSvcMediaStreamHandler-close"><primary sortas="TpSvcMediaStreamHandler::close">TpSvcMediaStreamHandler::close</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *arg0,
                                                        <link linkend="gpointer">gpointer</link>                 user_data)      : Run Last / Has Details</programlisting>
<para>
The Close D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpSvcMediaStreamHandler-remove-remote-candidate" role="signal"><title>The <literal>&quot;remove-remote-candidate&quot;</literal> signal</title>
<indexterm zone="TpSvcMediaStreamHandler-remove-remote-candidate"><primary sortas="TpSvcMediaStreamHandler::remove-remote-candidate">TpSvcMediaStreamHandler::remove-remote-candidate</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *arg_Candidate_ID,
                                                        <link linkend="gchar">gchar</link>                   *arg1,
                                                        <link linkend="gpointer">gpointer</link>                 user_data)             : Run Last / Has Details</programlisting>
<para>
The RemoveRemoteCandidate D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>arg_Candidate_ID</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpSvcMediaStreamHandler-set-active-candidate-pair" role="signal"><title>The <literal>&quot;set-active-candidate-pair&quot;</literal> signal</title>
<indexterm zone="TpSvcMediaStreamHandler-set-active-candidate-pair"><primary sortas="TpSvcMediaStreamHandler::set-active-candidate-pair">TpSvcMediaStreamHandler::set-active-candidate-pair</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *arg_Native_Candidate_ID,
                                                        <link linkend="gchar">gchar</link>                   *arg_Remote_Candidate_ID,
                                                        <link linkend="gchar">gchar</link>                   *arg2,
                                                        <link linkend="gpointer">gpointer</link>                 user_data)                    : Run Last / Has Details</programlisting>
<para>
The SetActiveCandidatePair D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>arg_Native_Candidate_ID</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Remote_Candidate_ID</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpSvcMediaStreamHandler-set-remote-candidate-list" role="signal"><title>The <literal>&quot;set-remote-candidate-list&quot;</literal> signal</title>
<indexterm zone="TpSvcMediaStreamHandler-set-remote-candidate-list"><primary sortas="TpSvcMediaStreamHandler::set-remote-candidate-list">TpSvcMediaStreamHandler::set-remote-candidate-list</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *arg_Remote_Candidates,
                                                        <link linkend="gpointer">gpointer</link>                 user_data)                  : Run Last / Has Details</programlisting>
<para>
The SetRemoteCandidateList D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>arg_Remote_Candidates</parameter>&#160;:</term>
<listitem><simpara> const GPtrArray * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpSvcMediaStreamHandler-set-remote-codecs" role="signal"><title>The <literal>&quot;set-remote-codecs&quot;</literal> signal</title>
<indexterm zone="TpSvcMediaStreamHandler-set-remote-codecs"><primary sortas="TpSvcMediaStreamHandler::set-remote-codecs">TpSvcMediaStreamHandler::set-remote-codecs</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *arg_Codecs,
                                                        <link linkend="gpointer">gpointer</link>                 user_data)       : Run Last / Has Details</programlisting>
<para>
The SetRemoteCodecs D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>arg_Codecs</parameter>&#160;:</term>
<listitem><simpara> const GPtrArray * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpSvcMediaStreamHandler-set-stream-held" role="signal"><title>The <literal>&quot;set-stream-held&quot;</literal> signal</title>
<indexterm zone="TpSvcMediaStreamHandler-set-stream-held"><primary sortas="TpSvcMediaStreamHandler::set-stream-held">TpSvcMediaStreamHandler::set-stream-held</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *arg_Held,
                                                        <link linkend="gboolean">gboolean</link>                 arg1,
                                                        <link linkend="gpointer">gpointer</link>                 user_data)      : Run Last / Has Details</programlisting>
<para>
The SetStreamHeld D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>arg_Held</parameter>&#160;:</term>
<listitem><simpara> gboolean  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpSvcMediaStreamHandler-set-stream-playing" role="signal"><title>The <literal>&quot;set-stream-playing&quot;</literal> signal</title>
<indexterm zone="TpSvcMediaStreamHandler-set-stream-playing"><primary sortas="TpSvcMediaStreamHandler::set-stream-playing">TpSvcMediaStreamHandler::set-stream-playing</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *arg_Playing,
                                                        <link linkend="gboolean">gboolean</link>                 arg1,
                                                        <link linkend="gpointer">gpointer</link>                 user_data)        : Run Last / Has Details</programlisting>
<para>
The SetStreamPlaying D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>arg_Playing</parameter>&#160;:</term>
<listitem><simpara> gboolean  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpSvcMediaStreamHandler-set-stream-sending" role="signal"><title>The <literal>&quot;set-stream-sending&quot;</literal> signal</title>
<indexterm zone="TpSvcMediaStreamHandler-set-stream-sending"><primary sortas="TpSvcMediaStreamHandler::set-stream-sending">TpSvcMediaStreamHandler::set-stream-sending</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *arg_Sending,
                                                        <link linkend="gboolean">gboolean</link>                 arg1,
                                                        <link linkend="gpointer">gpointer</link>                 user_data)        : Run Last / Has Details</programlisting>
<para>
The SetStreamSending D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>arg_Sending</parameter>&#160;:</term>
<listitem><simpara> gboolean  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpSvcMediaStreamHandler-start-telephony-event" role="signal"><title>The <literal>&quot;start-telephony-event&quot;</literal> signal</title>
<indexterm zone="TpSvcMediaStreamHandler-start-telephony-event"><primary sortas="TpSvcMediaStreamHandler::start-telephony-event">TpSvcMediaStreamHandler::start-telephony-event</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *arg_Event,
                                                        <link linkend="guchar">guchar</link>                   arg1,
                                                        <link linkend="gpointer">gpointer</link>                 user_data)      : Run Last / Has Details</programlisting>
<para>
The StartTelephonyEvent D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>arg_Event</parameter>&#160;:</term>
<listitem><simpara> guchar  (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpSvcMediaStreamHandler-stop-telephony-event" role="signal"><title>The <literal>&quot;stop-telephony-event&quot;</literal> signal</title>
<indexterm zone="TpSvcMediaStreamHandler-stop-telephony-event"><primary sortas="TpSvcMediaStreamHandler::stop-telephony-event">TpSvcMediaStreamHandler::stop-telephony-event</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcMediaStreamHandler">TpSvcMediaStreamHandler</link> *arg0,
                                                        <link linkend="gpointer">gpointer</link>                 user_data)      : Run Last / Has Details</programlisting>
<para>
The StopTelephonyEvent D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>


<refsect1 id="telepathy-glib-svc-media-interfaces.see-also">
<title>See Also</title>
#TpSvcChannelTypeStreamedMedia
</refsect1>

</refentry>
