<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-channel-dispatcher">
<refmeta>
<refentrytitle role="top_of_page" id="telepathy-glib-channel-dispatcher.top_of_page">TpChannelDispatcher</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>TpChannelDispatcher</refname>
<refpurpose>proxy object for the Telepathy channel dispatcher</refpurpose>
</refnamediv>

<refsynopsisdiv id="telepathy-glib-channel-dispatcher.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>
<anchor id="TpChannelDispatcher"/>
<synopsis>

#include &lt;telepathy-glib/channel-dispatcher.h&gt;

                    <link linkend="TpChannelDispatcher-struct">TpChannelDispatcher</link>;
                    <link linkend="TpChannelDispatcherClass">TpChannelDispatcherClass</link>;
<link linkend="TpChannelDispatcher">TpChannelDispatcher</link> * <link linkend="tp-channel-dispatcher-new">tp_channel_dispatcher_new</link>         (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *bus_daemon);
<link linkend="void">void</link>                <link linkend="tp-channel-dispatcher-init-known-interfaces">tp_channel_dispatcher_init_known_interfaces</link>
                                                        (void);

<link linkend="void">void</link>                (<link linkend="tp-cli-channel-dispatcher-callback-for-create-channel">*tp_cli_channel_dispatcher_callback_for_create_channel</link>)
                                                        (<link linkend="TpChannelDispatcher">TpChannelDispatcher</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *out_Request,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-channel-dispatcher-call-create-channel">tp_cli_channel_dispatcher_call_create_channel</link>
                                                        (<link linkend="TpChannelDispatcher">TpChannelDispatcher</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_Account,
                                                         <link linkend="GHashTable">GHashTable</link> *in_Requested_Properties,
                                                         <link linkend="gint64">gint64</link> in_User_Action_Time,
                                                         const <link linkend="gchar">gchar</link> *in_Preferred_Handler,
                                                         <link linkend="tp-cli-channel-dispatcher-callback-for-create-channel">tp_cli_channel_dispatcher_callback_for_create_channel</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-dispatcher-callback-for-ensure-channel">*tp_cli_channel_dispatcher_callback_for_ensure_channel</link>)
                                                        (<link linkend="TpChannelDispatcher">TpChannelDispatcher</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *out_Request,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-channel-dispatcher-call-ensure-channel">tp_cli_channel_dispatcher_call_ensure_channel</link>
                                                        (<link linkend="TpChannelDispatcher">TpChannelDispatcher</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_Account,
                                                         <link linkend="GHashTable">GHashTable</link> *in_Requested_Properties,
                                                         <link linkend="gint64">gint64</link> in_User_Action_Time,
                                                         const <link linkend="gchar">gchar</link> *in_Preferred_Handler,
                                                         <link linkend="tp-cli-channel-dispatcher-callback-for-ensure-channel">tp_cli_channel_dispatcher_callback_for_ensure_channel</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);

<link linkend="void">void</link>                (<link linkend="tp-cli-channel-dispatcher-interface-operation-list-signal-callback-dispatch-operation-finished">*tp_cli_channel_dispatcher_interface_operation_list_signal_callback_dispatch_operation_finished</link>)
                                                        (<link linkend="TpChannelDispatcher">TpChannelDispatcher</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg_Dispatch_Operation,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-channel-dispatcher-interface-operation-list-connect-to-dispatch-operation-finished">tp_cli_channel_dispatcher_interface_operation_list_connect_to_dispatch_operation_finished</link>
                                                        (<link linkend="TpChannelDispatcher">TpChannelDispatcher</link> *proxy,
                                                         <link linkend="tp-cli-channel-dispatcher-interface-operation-list-signal-callback-dispatch-operation-finished">tp_cli_channel_dispatcher_interface_operation_list_signal_callback_dispatch_operation_finished</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-dispatcher-interface-operation-list-signal-callback-new-dispatch-operation">*tp_cli_channel_dispatcher_interface_operation_list_signal_callback_new_dispatch_operation</link>)
                                                        (<link linkend="TpChannelDispatcher">TpChannelDispatcher</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg_Dispatch_Operation,
                                                         <link linkend="GHashTable">GHashTable</link> *arg_Properties,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-channel-dispatcher-interface-operation-list-connect-to-new-dispatch-operation">tp_cli_channel_dispatcher_interface_operation_list_connect_to_new_dispatch_operation</link>
                                                        (<link linkend="TpChannelDispatcher">TpChannelDispatcher</link> *proxy,
                                                         <link linkend="tp-cli-channel-dispatcher-interface-operation-list-signal-callback-new-dispatch-operation">tp_cli_channel_dispatcher_interface_operation_list_signal_callback_new_dispatch_operation</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
</synopsis>
</refsynopsisdiv>

<refsect1 id="telepathy-glib-channel-dispatcher.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="TpProxy">TpProxy</link>
         +----TpChannelDispatcher
</synopsis>
</refsect1>








<refsect1 id="telepathy-glib-channel-dispatcher.description" role="desc">
<title role="desc.title">Description</title>
<para>
The <link linkend="TpChannelDispatcher"><type>TpChannelDispatcher</type></link> object can be used to communicate with any
implementation of the Telepathy ChannelDispatcher service to request
new channels.</para>
<para>
</para>
</refsect1>

<refsect1 id="telepathy-glib-channel-dispatcher.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="TpChannelDispatcher-struct" role="struct">
<title>TpChannelDispatcher</title>
<indexterm zone="TpChannelDispatcher-struct" role="0.7.UNRELEASED"><primary sortas="TpChannelDispatcher">TpChannelDispatcher</primary></indexterm><programlisting>typedef struct _TpChannelDispatcher TpChannelDispatcher;</programlisting>
<para>
The Channel Dispatcher's main D-Bus API is used to request channels,
which is done by calling <link linkend="tp-cli-channel-dispatcher-call-create-channel"><function>tp_cli_channel_dispatcher_call_create_channel()</function></link> or
<link linkend="tp-cli-channel-dispatcher-call-ensure-channel"><function>tp_cli_channel_dispatcher_call_ensure_channel()</function></link> as appropriate.
</para>
<para>
The Telepathy Channel Dispatcher is also responsible for responding to new
channels and launching client processes to handle them. However, clients
that can work with incoming channels do not have to call methods
on the channel dispatcher: instead, they must register with the channel
dispatcher passively, by taking a bus name starting with
<link linkend="TP-CLIENT-BUS-NAME-BASE--CAPS"><literal>TP_CLIENT_BUS_NAME_BASE</literal></link> and implementing the <link linkend="TpSvcClient"><type>TpSvcClient</type></link> interface.
See the Telepathy D-Bus Interface Specification for details.
</para>
<para>
This proxy is usable but incomplete: convenience methods will be added in
a later version of telepathy-glib, along with a mechanism similar to
<link linkend="tp-connection-call-when-ready"><function>tp_connection_call_when_ready()</function></link>.</para>
<para>
</para><para role="since">Since 0.7.UNRELEASED</para></refsect2>
<refsect2 id="TpChannelDispatcherClass" role="struct">
<title>TpChannelDispatcherClass</title>
<indexterm zone="TpChannelDispatcherClass"><primary sortas="TpChannelDispatcherClass">TpChannelDispatcherClass</primary></indexterm><programlisting>typedef struct {
} TpChannelDispatcherClass;
</programlisting>
<para>
The class of a <link linkend="TpChannelDispatcher"><type>TpChannelDispatcher</type></link>.</para>
<para>
</para></refsect2>
<refsect2 id="tp-channel-dispatcher-new" role="function">
<title>tp_channel_dispatcher_new ()</title>
<indexterm zone="tp-channel-dispatcher-new"><primary sortas="tp_channel_dispatcher_new">tp_channel_dispatcher_new</primary></indexterm><programlisting><link linkend="TpChannelDispatcher">TpChannelDispatcher</link> * tp_channel_dispatcher_new         (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *bus_daemon);</programlisting>
<para>
Convenience function to create a new channel dispatcher proxy.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bus_daemon</parameter>&#160;:</term>
<listitem><simpara> Proxy for the D-Bus daemon
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a new reference to a channel dispatcher proxy
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-channel-dispatcher-init-known-interfaces" role="function" condition="since:0.7.UNRELEASED">
<title>tp_channel_dispatcher_init_known_interfaces ()</title>
<indexterm zone="tp-channel-dispatcher-init-known-interfaces" role="0.7.UNRELEASED"><primary sortas="tp_channel_dispatcher_init_known_interfaces">tp_channel_dispatcher_init_known_interfaces</primary></indexterm><programlisting><link linkend="void">void</link>                tp_channel_dispatcher_init_known_interfaces
                                                        (void);</programlisting>
<para>
Ensure that the known interfaces for TpChannelDispatcher have been set up.
This is done automatically when necessary, but for correct
overriding of library interfaces by local extensions, you should
call this function before calling
<link linkend="tp-proxy-or-subclass-hook-on-interface-add"><function>tp_proxy_or_subclass_hook_on_interface_add()</function></link> with first argument
<link linkend="TP-TYPE-CHANNEL-DISPATCHER--CAPS"><literal>TP_TYPE_CHANNEL_DISPATCHER</literal></link>.</para>
<para>
</para><para role="since">Since 0.7.UNRELEASED</para></refsect2>
<refsect2 id="tp-cli-channel-dispatcher-callback-for-create-channel" role="function">
<title>tp_cli_channel_dispatcher_callback_for_create_channel ()</title>
<indexterm zone="tp-cli-channel-dispatcher-callback-for-create-channel"><primary sortas="tp_cli_channel_dispatcher_callback_for_create_channel">tp_cli_channel_dispatcher_callback_for_create_channel</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_dispatcher_callback_for_create_channel)
                                                        (<link linkend="TpChannelDispatcher">TpChannelDispatcher</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *out_Request,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a CreateChannel method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Request</parameter>&#160;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>: A           &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy&quot;&gt;ChannelRequest&lt;/tp:dbus-ref&gt;           object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-dispatcher-call-create-channel" role="function">
<title>tp_cli_channel_dispatcher_call_create_channel ()</title>
<indexterm zone="tp-cli-channel-dispatcher-call-create-channel"><primary sortas="tp_cli_channel_dispatcher_call_create_channel">tp_cli_channel_dispatcher_call_create_channel</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_channel_dispatcher_call_create_channel
                                                        (<link linkend="TpChannelDispatcher">TpChannelDispatcher</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_Account,
                                                         <link linkend="GHashTable">GHashTable</link> *in_Requested_Properties,
                                                         <link linkend="gint64">gint64</link> in_User_Action_Time,
                                                         const <link linkend="gchar">gchar</link> *in_Preferred_Handler,
                                                         <link linkend="tp-cli-channel-dispatcher-callback-for-create-channel">tp_cli_channel_dispatcher_callback_for_create_channel</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a CreateChannel method call.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;Start a request to create a channel. This initially just creates a           &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy&quot;&gt;ChannelRequest&lt;/tp:dbus-ref&gt;           object, which can be used to continue the request and track its           success or failure.&lt;/p&gt;          &lt;tp:rationale&gt;           &lt;p&gt;The request can take a long time - in the worst case, the             channel dispatcher has to ask the account manager to put the             account online, the account manager has to ask the operating             system to obtain an Internet connection, and the operating             system has to ask the user whether to activate an Internet             connection using an on-demand mechanism like dialup.&lt;/p&gt;            &lt;p&gt;This means that using a single D-Bus method call and response             to represent the whole request will tend to lead to that call             timing out, which is not the behaviour we want.&lt;/p&gt;         &lt;/tp:rationale&gt;          &lt;p&gt;If this method is called for an Account that is disabled, invalid           or otherwise unusable, no error is signalled until           &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy&quot;&gt;ChannelRequest.Proceed&lt;/tp:dbus-ref&gt;           is called, at which point           &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy&quot;&gt;ChannelRequest.Failed&lt;/tp:dbus-ref&gt;           is emitted with an appropriate error.&lt;/p&gt;          &lt;tp:rationale&gt;           &lt;p&gt;This means there&apos;s only one code path for errors, apart from             InvalidArgument for &amp;quot;that request makes no sense&amp;quot;.&lt;/p&gt;            &lt;p&gt;It also means that the request will proceed if the account is             enabled after calling CreateChannel, but before calling             Proceed.&lt;/p&gt;         &lt;/tp:rationale&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Account</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: The             &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy&quot;&gt;Account&lt;/tp:dbus-ref&gt;           for which the new channel is to be created.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Requested_Properties</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           &lt;p&gt;A dictionary containing desirable properties. This has the same             semantics as the corresponding parameter to             &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy&quot;&gt;Connection.Interface.Requests.CreateChannel&lt;/tp:dbus-ref&gt;.           &lt;/p&gt;            &lt;p&gt;Certain properties will not necessarily make sense in this             dictionary: for instance,             &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.Channel&quot;&gt;TargetHandle&lt;/tp:dbus-ref&gt;             can only be given if the requester is able to interact with a             &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy&quot;&gt;Connection&lt;/tp:dbus-ref&gt;             to the desired account.&lt;/p&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_User_Action_Time</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           &lt;p&gt;The time at which user action occurred, or 0 if this channel             request is for some reason not involving user action.             The &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.ChannelRequest&quot;&gt;UserActionTime&lt;/tp:dbus-ref&gt;             property will be set to this value, and it will eventually be             passed as the &lt;code&gt;User_Action_Time&lt;/code&gt; parameter of &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.Client.Handler&quot;&gt;HandleChannels&lt;/tp:dbus-ref&gt;.&lt;/p&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Preferred_Handler</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           &lt;p&gt;Either the well-known bus name (starting with             &lt;code&gt;org.freedesktop.Telepathy.Client.&lt;/code&gt;)             of the preferred handler for this             channel, or an empty string to indicate that any handler would be             acceptable. The channel dispatcher SHOULD dispatch as many as             possible of the resulting channels (ideally, all of them)             to that handler, and SHOULD remember the preferred handler             so it can try to dispatch subsequent channels in the same bundle             to the same handler.&lt;/p&gt;            &lt;tp:rationale&gt;             &lt;p&gt;This must be the well-known bus name, not the unique name,               to ensure that all handlers do indeed have the Client API,               and the Client object on the handler can be located easily.&lt;/p&gt;              &lt;p&gt;This is partly so the channel dispatcher can call               &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.Client.Handler&quot;&gt;HandleChannels&lt;/tp:dbus-ref&gt;               on it, and partly so the channel dispatcher               can recover state if it crashes and is restarted.&lt;/p&gt;           &lt;/tp:rationale&gt;            &lt;p&gt;If this is a well-known bus name and the handler has the             Requests interface, the channel dispatcher SHOULD             call &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.Client.Interface.Requests&quot;&gt;AddRequest&lt;/tp:dbus-ref&gt;             on that Handler after this method has returned.&lt;/p&gt;            &lt;tp:rationale&gt;             &lt;p&gt;This ordering allows a Handler which calls CreateChannel with               itself as the preferred handler to associate the call to               AddRequest with that call.&lt;/p&gt;           &lt;/tp:rationale&gt;            &lt;p&gt;This is copied to the ChannelRequest that is returned,             as the &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.ChannelRequest&quot;&gt;PreferredHandler&lt;/tp:dbus-ref&gt;             property.&lt;/p&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-dispatcher-callback-for-ensure-channel" role="function">
<title>tp_cli_channel_dispatcher_callback_for_ensure_channel ()</title>
<indexterm zone="tp-cli-channel-dispatcher-callback-for-ensure-channel"><primary sortas="tp_cli_channel_dispatcher_callback_for_ensure_channel">tp_cli_channel_dispatcher_callback_for_ensure_channel</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_dispatcher_callback_for_ensure_channel)
                                                        (<link linkend="TpChannelDispatcher">TpChannelDispatcher</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *out_Request,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a EnsureChannel method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Request</parameter>&#160;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>: A           &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy&quot;&gt;ChannelRequest&lt;/tp:dbus-ref&gt;           object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-dispatcher-call-ensure-channel" role="function">
<title>tp_cli_channel_dispatcher_call_ensure_channel ()</title>
<indexterm zone="tp-cli-channel-dispatcher-call-ensure-channel"><primary sortas="tp_cli_channel_dispatcher_call_ensure_channel">tp_cli_channel_dispatcher_call_ensure_channel</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_channel_dispatcher_call_ensure_channel
                                                        (<link linkend="TpChannelDispatcher">TpChannelDispatcher</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_Account,
                                                         <link linkend="GHashTable">GHashTable</link> *in_Requested_Properties,
                                                         <link linkend="gint64">gint64</link> in_User_Action_Time,
                                                         const <link linkend="gchar">gchar</link> *in_Preferred_Handler,
                                                         <link linkend="tp-cli-channel-dispatcher-callback-for-ensure-channel">tp_cli_channel_dispatcher_callback_for_ensure_channel</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a EnsureChannel method call.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;Start a request to ensure that a channel exists, creating it if           necessary.  This initially just creates a &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy&quot;&gt;ChannelRequest&lt;/tp:dbus-ref&gt;           object, which can be used to continue the request and track its           success or failure.&lt;/p&gt;          &lt;p&gt;If this method is called for an Account that is disabled, invalid           or otherwise unusable, no error is signalled until           &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy&quot;&gt;ChannelRequest.Proceed&lt;/tp:dbus-ref&gt;           is called, at which point           &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy&quot;&gt;ChannelRequest.Failed&lt;/tp:dbus-ref&gt;           is emitted with an appropriate error.&lt;/p&gt;          &lt;tp:rationale&gt;           &lt;p&gt;The rationale is as for &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.ChannelDispatcher&quot;&gt;CreateChannel&lt;/tp:dbus-ref&gt;.&lt;/p&gt;         &lt;/tp:rationale&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Account</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: The             &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy&quot;&gt;Account&lt;/tp:dbus-ref&gt;           for which the new channel is to be created.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Requested_Properties</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           &lt;p&gt;A dictionary containing desirable properties. This has the same             semantics as the corresponding parameter to             &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy&quot;&gt;Connection.Interface.Requests.EnsureChannel&lt;/tp:dbus-ref&gt;.           &lt;/p&gt;            &lt;p&gt;Certain properties will not necessarily make sense in this             dictionary: for instance,             &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.Channel&quot;&gt;TargetHandle&lt;/tp:dbus-ref&gt;             can only be given if the requester is able to interact with a             &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy&quot;&gt;Connection&lt;/tp:dbus-ref&gt;             to the desired account.&lt;/p&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_User_Action_Time</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           &lt;p&gt;The time at which user action occurred, or 0 if this channel             request is for some reason not involving user action.&lt;/p&gt;            &lt;p&gt;This parameter is used in the same way as the corresponding             parameter to &lt;tp:member-ref&gt;CreateChannel&lt;/tp:member-ref&gt;.&lt;/p&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Preferred_Handler</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           &lt;p&gt;Either the well-known bus name (starting with             &lt;code&gt;org.freedesktop.Telepathy.Client.&lt;/code&gt;)             of the preferred handler for this             channel, or an empty string to indicate that any handler would be             acceptable. The behaviour and rationale are the same as for the             corresponding parameter to             &lt;tp:member-ref&gt;CreateChannel&lt;/tp:member-ref&gt;, except as noted             here.&lt;/p&gt;            &lt;p&gt;If any new channels are created in response to this             request, the channel dispatcher SHOULD dispatch as many as             possible of the resulting channels (ideally, all of them)             to that handler, and SHOULD remember the preferred handler             so it can try to dispatch subsequent channels in the same bundle             to the same handler. If the requested channel already exists (that             is, &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy&quot;&gt;Connection.Interface.Requests.EnsureChannel&lt;/tp:dbus-ref&gt;             returns &lt;code&gt;Yours=False&lt;/code&gt;) then the channel dispatcher             SHOULD re-dispatch the channel to its existing handler, and MUST             NOT dispatch it to this client (unless it is the existing handler);             the request is still deemed to have succeeded in this case.&lt;/p&gt;            &lt;tp:rationale&gt;             &lt;p&gt;An address book application, for example, might call &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.ChannelDispatcher&quot;&gt;EnsureChannel&lt;/tp:dbus-ref&gt;               to ensure that a text channel with a particular contact is               displayed to the user; it does not care whether a new channel was               made. An IM client might call &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.ChannelDispatcher&quot;&gt;EnsureChannel&lt;/tp:dbus-ref&gt;               in response to the user double-clicking an entry in the contact               list, with itself as the &lt;code&gt;Preferred_Handler&lt;/code&gt;; if the               user already has a conversation with that contact in another               application, they would expect the existing window to be               presented, rather than their double-click leading to an error               message.  So the request should succeed, even if its               &lt;code&gt;Preferred_Handler&lt;/code&gt; is not used.&lt;/p&gt;           &lt;/tp:rationale&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-dispatcher-interface-operation-list-signal-callback-dispatch-operation-finished" role="function">
<title>tp_cli_channel_dispatcher_interface_operation_list_signal_callback_dispatch_operation_finished ()</title>
<indexterm zone="tp-cli-channel-dispatcher-interface-operation-list-signal-callback-dispatch-operation-finished"><primary sortas="tp_cli_channel_dispatcher_interface_operation_list_signal_callback_dispatch_operation_finished">tp_cli_channel_dispatcher_interface_operation_list_signal_callback_dispatch_operation_finished</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_dispatcher_interface_operation_list_signal_callback_dispatch_operation_finished)
                                                        (<link linkend="TpChannelDispatcher">TpChannelDispatcher</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg_Dispatch_Operation,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal DispatchOperationFinished.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-channel-dispatcher-interface-operation-list-connect-to-dispatch-operation-finished"><function>tp_cli_channel_dispatcher_interface_operation_list_connect_to_dispatch_operation_finished()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Dispatch_Operation</parameter>&#160;:</term>
<listitem><simpara> The dispatch operation that was closed.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-dispatcher-interface-operation-list-connect-to-dispatch-operation-finished" role="function">
<title>tp_cli_channel_dispatcher_interface_operation_list_connect_to_dispatch_operation_finished ()</title>
<indexterm zone="tp-cli-channel-dispatcher-interface-operation-list-connect-to-dispatch-operation-finished"><primary sortas="tp_cli_channel_dispatcher_interface_operation_list_connect_to_dispatch_operation_finished">tp_cli_channel_dispatcher_interface_operation_list_connect_to_dispatch_operation_finished</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_channel_dispatcher_interface_operation_list_connect_to_dispatch_operation_finished
                                                        (<link linkend="TpChannelDispatcher">TpChannelDispatcher</link> *proxy,
                                                         <link linkend="tp-cli-channel-dispatcher-interface-operation-list-signal-callback-dispatch-operation-finished">tp_cli_channel_dispatcher_interface_operation_list_signal_callback_dispatch_operation_finished</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal DispatchOperationFinished.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         Emitted when a dispatch operation finishes (i.e. exactly once per         emission of &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy&quot;&gt;ChannelDispatchOperation.Finished&lt;/tp:dbus-ref&gt;).          &lt;tp:rationale&gt;           Strictly speaking this is redundant with           ChannelDispatchOperation.Finished, but it provides full           change-notification for the           &lt;tp:member-ref&gt;DispatchOperations&lt;/tp:member-ref&gt; property.         &lt;/tp:rationale&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpChannelDispatcher"><type>TpChannelDispatcher</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-dispatcher-interface-operation-list-signal-callback-new-dispatch-operation" role="function">
<title>tp_cli_channel_dispatcher_interface_operation_list_signal_callback_new_dispatch_operation ()</title>
<indexterm zone="tp-cli-channel-dispatcher-interface-operation-list-signal-callback-new-dispatch-operation"><primary sortas="tp_cli_channel_dispatcher_interface_operation_list_signal_callback_new_dispatch_operation">tp_cli_channel_dispatcher_interface_operation_list_signal_callback_new_dispatch_operation</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_dispatcher_interface_operation_list_signal_callback_new_dispatch_operation)
                                                        (<link linkend="TpChannelDispatcher">TpChannelDispatcher</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg_Dispatch_Operation,
                                                         <link linkend="GHashTable">GHashTable</link> *arg_Properties,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal NewDispatchOperation.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-channel-dispatcher-interface-operation-list-connect-to-new-dispatch-operation"><function>tp_cli_channel_dispatcher_interface_operation_list_connect_to_new_dispatch_operation()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Dispatch_Operation</parameter>&#160;:</term>
<listitem><simpara> The dispatch operation that was created.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Properties</parameter>&#160;:</term>
<listitem><simpara> The same properties that would appear in the Properties member of           &lt;tp:type-ref&gt;Dispatch_Operation_Details&lt;/tp:type-ref&gt;.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-dispatcher-interface-operation-list-connect-to-new-dispatch-operation" role="function">
<title>tp_cli_channel_dispatcher_interface_operation_list_connect_to_new_dispatch_operation ()</title>
<indexterm zone="tp-cli-channel-dispatcher-interface-operation-list-connect-to-new-dispatch-operation"><primary sortas="tp_cli_channel_dispatcher_interface_operation_list_connect_to_new_dispatch_operation">tp_cli_channel_dispatcher_interface_operation_list_connect_to_new_dispatch_operation</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_channel_dispatcher_interface_operation_list_connect_to_new_dispatch_operation
                                                        (<link linkend="TpChannelDispatcher">TpChannelDispatcher</link> *proxy,
                                                         <link linkend="tp-cli-channel-dispatcher-interface-operation-list-signal-callback-new-dispatch-operation">tp_cli_channel_dispatcher_interface_operation_list_signal_callback_new_dispatch_operation</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal NewDispatchOperation.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;Emitted when a dispatch operation is added to           &lt;tp:member-ref&gt;DispatchOperations&lt;/tp:member-ref&gt;.&lt;/p&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpChannelDispatcher"><type>TpChannelDispatcher</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1 id="telepathy-glib-channel-dispatcher.see-also">
<title>See Also</title>
#TpChannelDispatchOperation, <link linkend="TpChannelRequest"><type>TpChannelRequest</type></link>
</refsect1>

</refentry>
