<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-connection-requests">
<refmeta>
<refentrytitle role="top_of_page" id="telepathy-glib-connection-requests.top_of_page">Connection Requests interface</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Connection Requests interface</refname>
<refpurpose>client-side wrappers for the Requests interface</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv id="telepathy-glib-connection-requests.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;telepathy-glib/connection.h&gt;

<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-connection-interface-requests-call-create-channel">tp_cli_connection_interface_requests_call_create_channel</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GHashTable">GHashTable</link> *in_Request,
                                                         <link linkend="tp-cli-connection-interface-requests-callback-for-create-channel">tp_cli_connection_interface_requests_callback_for_create_channel</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-connection-interface-requests-callback-for-create-channel">*tp_cli_connection_interface_requests_callback_for_create_channel</link>)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *out_Channel,
                                                         <link linkend="GHashTable">GHashTable</link> *out_Properties,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link>* <link linkend="tp-cli-connection-interface-requests-connect-to-channel-closed">tp_cli_connection_interface_requests_connect_to_channel_closed</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="tp-cli-connection-interface-requests-signal-callback-channel-closed">tp_cli_connection_interface_requests_signal_callback_channel_closed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link>* <link linkend="tp-cli-connection-interface-requests-connect-to-new-channels">tp_cli_connection_interface_requests_connect_to_new_channels</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="tp-cli-connection-interface-requests-signal-callback-new-channels">tp_cli_connection_interface_requests_signal_callback_new_channels</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-connection-interface-requests-run-create-channel">tp_cli_connection_interface_requests_run_create_channel</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GHashTable">GHashTable</link> *in_Request,
                                                         <link linkend="gchar">gchar</link> **out_Channel,
                                                         <link linkend="GHashTable">GHashTable</link> **out_Properties,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="void">void</link>                (<link linkend="tp-cli-connection-interface-requests-signal-callback-channel-closed">*tp_cli_connection_interface_requests_signal_callback_channel_closed</link>)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg_Removed,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-connection-interface-requests-signal-callback-new-channels">*tp_cli_connection_interface_requests_signal_callback_new_channels</link>)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *arg_Channels,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
</synopsis>
</refsynopsisdiv>









<refsect1 id="telepathy-glib-connection-requests.description" role="desc">
<title role="desc.title">Description</title>
<para>
This interface allows a client to request new channels from a connection,
and to listen to signals indicating that channels have been created and
closed.
</para>
<para>
This section documents the auto-generated C wrappers for the Requests
interface, used with <link linkend="TpConnection"><type>TpConnection</type></link> objects.</para>
<para>

</para>
</refsect1>

<refsect1 id="telepathy-glib-connection-requests.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="tp-cli-connection-interface-requests-call-create-channel" role="function">
<title>tp_cli_connection_interface_requests_call_create_channel ()</title>
<indexterm zone="tp-cli-connection-interface-requests-call-create-channel"><primary>tp_cli_connection_interface_requests_call_create_channel</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_connection_interface_requests_call_create_channel
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GHashTable">GHashTable</link> *in_Request,
                                                         <link linkend="tp-cli-connection-interface-requests-callback-for-create-channel">tp_cli_connection_interface_requests_callback_for_create_channel</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a CreateChannel method call.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;Request that an entirely new channel is created.&lt;/p&gt;          &lt;tp:rationale&gt;           &lt;p&gt;There is deliberately no flag corresponding to the             suppress_handler argument to             &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy&quot;&gt;Connection.RequestChannel&lt;/tp:dbus-ref&gt;,             because passing a FALSE value for that argument is deprecated.             Requests made using this interface always behave as though             suppress_handler was TRUE.&lt;/p&gt;         &lt;/tp:rationale&gt;</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Request</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           &lt;p&gt;A dictionary containing desirable properties. Some properties             are defined such that only an exact match makes sense, and             connection managers MUST NOT satisfy a request with a channel             where that property does not match; some properties are defined             such that the connection manager MAY treat the request as merely             a hint, and make a best-effort attempt to satisfy it. This is             documented separately for each property.&lt;/p&gt;            &lt;p&gt;If this dictionary contains a property whose semantics             are not known to the connection manager, this method MUST fail             without side-effects (in particular it must not create a new             channel).&lt;/p&gt;            &lt;tp:rationale&gt;             &lt;p&gt;This is necessary if we want to be able to invent properties               in future that, when used in a request, are hard requirements               rather than just hints. A connection manager that did not know               the semantics of those properties could incorrectly return a               new channel that did not satisfy the requirements.&lt;/p&gt;           &lt;/tp:rationale&gt;            &lt;p&gt;The connection manager MUST NOT respond successfully,             and SHOULD NOT create a new channel or cause any other             side-effects, unless it can create a new channel that satisfies             the client&apos;s requirements.&lt;/p&gt;            &lt;p&gt;Properties that will be set by this argument need not have write             access after the channel has been created - indeed, it is             expected that most will be read-only.&lt;/p&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL:CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-interface-requests-callback-for-create-channel" role="function">
<title>tp_cli_connection_interface_requests_callback_for_create_channel ()</title>
<indexterm zone="tp-cli-connection-interface-requests-callback-for-create-channel"><primary>tp_cli_connection_interface_requests_callback_for_create_channel</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_connection_interface_requests_callback_for_create_channel)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *out_Channel,
                                                         <link linkend="GHashTable">GHashTable</link> *out_Properties,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a CreateChannel method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Channel</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>: The Channel object, which MUST already have been signalled with           &lt;tp:member-ref&gt;NewChannels&lt;/tp:member-ref&gt; by the time this method           returns.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Properties</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>: &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           &lt;p&gt;Properties of the channel that was produced, equivalent to             the properties in &lt;tp:type&gt;Channel_Details&lt;/tp:type&gt;.             Connection managers MUST NOT include properties here whose             values can change, for the same reasons as in             &lt;tp:type&gt;Channel_Details&lt;/tp:type&gt;.&lt;/p&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-interface-requests-connect-to-channel-closed" role="function">
<title>tp_cli_connection_interface_requests_connect_to_channel_closed ()</title>
<indexterm zone="tp-cli-connection-interface-requests-connect-to-channel-closed"><primary>tp_cli_connection_interface_requests_connect_to_channel_closed</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link>* tp_cli_connection_interface_requests_connect_to_channel_closed
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="tp-cli-connection-interface-requests-signal-callback-channel-closed">tp_cli_connection_interface_requests_signal_callback_channel_closed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal ChannelClosed.
</para>
<para>
Emitted when a channel is closed and hence disappears from the         Channels property.          &lt;tp:rationale&gt;           This is redundant with the Close signal on the channel itself, but           it does provide full change notification for the Channels property.         &lt;/tp:rationale&gt;</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpConnection"><type>TpConnection</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL:CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL:CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-interface-requests-connect-to-new-channels" role="function">
<title>tp_cli_connection_interface_requests_connect_to_new_channels ()</title>
<indexterm zone="tp-cli-connection-interface-requests-connect-to-new-channels"><primary>tp_cli_connection_interface_requests_connect_to_new_channels</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link>* tp_cli_connection_interface_requests_connect_to_new_channels
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="tp-cli-connection-interface-requests-signal-callback-new-channels">tp_cli_connection_interface_requests_signal_callback_new_channels</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal NewChannels.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;New channels have been created. The connection manager SHOULD emit           a single signal for any group of closely related channels that are           created at the same time, so that the channel dispatcher can try to           dispatch them to a handler as a unit.&lt;/p&gt;          &lt;p&gt;In particular, if additional channels are created as a side-effect           of a call to &lt;tp:member-ref&gt;CreateChannel&lt;/tp:member-ref&gt;,           these channels SHOULD appear in the same NewChannels signal as           the channel that satisfies the request.&lt;/p&gt;          &lt;tp:rationale&gt;           &lt;p&gt;Joining a MUC Tube in XMPP requires joining the corresponding             MUC (chatroom), so a Text channel can be created as a             side-effect.&lt;/p&gt;         &lt;/tp:rationale&gt;</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpConnection"><type>TpConnection</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL:CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL:CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-interface-requests-run-create-channel" role="function">
<title>tp_cli_connection_interface_requests_run_create_channel ()</title>
<indexterm zone="tp-cli-connection-interface-requests-run-create-channel"><primary>tp_cli_connection_interface_requests_run_create_channel</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_connection_interface_requests_run_create_channel
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GHashTable">GHashTable</link> *in_Request,
                                                         <link linkend="gchar">gchar</link> **out_Channel,
                                                         <link linkend="GHashTable">GHashTable</link> **out_Properties,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method CreateChannel and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;Request that an entirely new channel is created.&lt;/p&gt;          &lt;tp:rationale&gt;           &lt;p&gt;There is deliberately no flag corresponding to the             suppress_handler argument to             &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy&quot;&gt;Connection.RequestChannel&lt;/tp:dbus-ref&gt;,             because passing a FALSE value for that argument is deprecated.             Requests made using this interface always behave as though             suppress_handler was TRUE.&lt;/p&gt;         &lt;/tp:rationale&gt;</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpConnection"><type>TpConnection</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Request</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           &lt;p&gt;A dictionary containing desirable properties. Some properties             are defined such that only an exact match makes sense, and             connection managers MUST NOT satisfy a request with a channel             where that property does not match; some properties are defined             such that the connection manager MAY treat the request as merely             a hint, and make a best-effort attempt to satisfy it. This is             documented separately for each property.&lt;/p&gt;            &lt;p&gt;If this dictionary contains a property whose semantics             are not known to the connection manager, this method MUST fail             without side-effects (in particular it must not create a new             channel).&lt;/p&gt;            &lt;tp:rationale&gt;             &lt;p&gt;This is necessary if we want to be able to invent properties               in future that, when used in a request, are hard requirements               rather than just hints. A connection manager that did not know               the semantics of those properties could incorrectly return a               new channel that did not satisfy the requirements.&lt;/p&gt;           &lt;/tp:rationale&gt;            &lt;p&gt;The connection manager MUST NOT respond successfully,             and SHOULD NOT create a new channel or cause any other             side-effects, unless it can create a new channel that satisfies             the client&apos;s requirements.&lt;/p&gt;            &lt;p&gt;Properties that will be set by this argument need not have write             access after the channel has been created - indeed, it is             expected that most will be read-only.&lt;/p&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Channel</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned: The Channel object, which MUST already have been signalled with           &lt;tp:member-ref&gt;NewChannels&lt;/tp:member-ref&gt; by the time this method           returns.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Properties</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned: &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           &lt;p&gt;Properties of the channel that was produced, equivalent to             the properties in &lt;tp:type&gt;Channel_Details&lt;/tp:type&gt;.             Connection managers MUST NOT include properties here whose             values can change, for the same reasons as in             &lt;tp:type&gt;Channel_Details&lt;/tp:type&gt;.&lt;/p&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-interface-requests-signal-callback-channel-closed" role="function">
<title>tp_cli_connection_interface_requests_signal_callback_channel_closed ()</title>
<indexterm zone="tp-cli-connection-interface-requests-signal-callback-channel-closed"><primary>tp_cli_connection_interface_requests_signal_callback_channel_closed</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_connection_interface_requests_signal_callback_channel_closed)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg_Removed,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal ChannelClosed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-connection-interface-requests-connect-to-channel-closed"><function>tp_cli_connection_interface_requests_connect_to_channel_closed()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Removed</parameter>&nbsp;:</term>
<listitem><simpara> The channel which has been removed from the Channels property
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-interface-requests-signal-callback-new-channels" role="function">
<title>tp_cli_connection_interface_requests_signal_callback_new_channels ()</title>
<indexterm zone="tp-cli-connection-interface-requests-signal-callback-new-channels"><primary>tp_cli_connection_interface_requests_signal_callback_new_channels</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_connection_interface_requests_signal_callback_new_channels)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *arg_Channels,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal NewChannels.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-connection-interface-requests-connect-to-new-channels"><function>tp_cli_connection_interface_requests_connect_to_new_channels()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Channels</parameter>&nbsp;:</term>
<listitem><simpara> The channels and their details. All channels that are signalled           together like this MUST have the same           &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.Channel.FUTURE&quot;&gt;Bundle&lt;/tp:dbus-ref&gt;           property, which may           either refer to an existing bundle, or establish a new bundle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1 id="telepathy-glib-connection-requests.see-also">
<title>See Also</title>
<link linkend="TpConnection"><type>TpConnection</type></link>
</refsect1>

</refentry>
