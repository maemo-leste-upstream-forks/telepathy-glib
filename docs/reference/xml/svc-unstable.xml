<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-svc-unstable">
<refmeta>
<refentrytitle role="top_of_page">Interfaces in libtelepathy-glib-unstable</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Interfaces in libtelepathy-glib-unstable</refname>
<refpurpose>Unstable or obsolete interfaces and channel types</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;telepathy-glib/svc-unstable.h&gt;



#define             <link linkend="TP-IFACE-CONNECTION-INTERFACE-CONTACT-INFO:CAPS">TP_IFACE_CONNECTION_INTERFACE_CONTACT_INFO</link>
#define             <link linkend="TP-IFACE-CONNECTION-INTERFACE-FORWARDING:CAPS">TP_IFACE_CONNECTION_INTERFACE_FORWARDING</link>
#define             <link linkend="TP-IFACE-CONNECTION-INTERFACE-PRIVACY:CAPS">TP_IFACE_CONNECTION_INTERFACE_PRIVACY</link>
#define             <link linkend="TP-IFACE-CONNECTION-INTERFACE-RENAMING:CAPS">TP_IFACE_CONNECTION_INTERFACE_RENAMING</link>
#define             <link linkend="TP-IFACE-CHANNEL-TYPE-CONTACT-SEARCH:CAPS">TP_IFACE_CHANNEL_TYPE_CONTACT_SEARCH</link>
#define             <link linkend="TP-IFACE-CHANNEL-INTERFACE-HOLD:CAPS">TP_IFACE_CHANNEL_INTERFACE_HOLD</link>
#define             <link linkend="TP-IFACE-CHANNEL-INTERFACE-TRANSFER:CAPS">TP_IFACE_CHANNEL_INTERFACE_TRANSFER</link>

enum                <link linkend="TpChannelContactSearchState">TpChannelContactSearchState</link>;
#define             <link linkend="NUM-TP-CHANNEL-CONTACT-SEARCH-STATES:CAPS">NUM_TP_CHANNEL_CONTACT_SEARCH_STATES</link>
enum                <link linkend="TpChannelHoldState">TpChannelHoldState</link>;
#define             <link linkend="NUM-TP-CHANNEL-HOLD-STATES:CAPS">NUM_TP_CHANNEL_HOLD_STATES</link>
enum                <link linkend="TpTubeState">TpTubeState</link>;
#define             <link linkend="NUM-TP-TUBE-STATES:CAPS">NUM_TP_TUBE_STATES</link>
enum                <link linkend="TpTubeType">TpTubeType</link>;
#define             <link linkend="NUM-TP-TUBE-TYPES:CAPS">NUM_TP_TUBE_TYPES</link>

                    <link linkend="TpSvcChannelTypeContactSearch">TpSvcChannelTypeContactSearch</link>;
                    <link linkend="TpSvcChannelTypeContactSearchClass">TpSvcChannelTypeContactSearchClass</link>;
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-type-contact-search-get-search-keys-impl">*tp_svc_channel_type_contact_search_get_search_keys_impl</link>)
                                                        (<link linkend="TpSvcChannelTypeContactSearch">TpSvcChannelTypeContactSearch</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-contact-search-implement-get-search-keys">tp_svc_channel_type_contact_search_implement_get_search_keys</link>
                                                        (<link linkend="TpSvcChannelTypeContactSearchClass">TpSvcChannelTypeContactSearchClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-contact-search-get-search-keys-impl">tp_svc_channel_type_contact_search_get_search_keys_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-contact-search-return-from-get-search-keys">tp_svc_channel_type_contact_search_return_from_get_search_keys</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context,
                                                         const <link linkend="gchar">gchar</link> *ret,
                                                         <link linkend="GHashTable">GHashTable</link> *ret1);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-type-contact-search-get-search-state-impl">*tp_svc_channel_type_contact_search_get_search_state_impl</link>)
                                                        (<link linkend="TpSvcChannelTypeContactSearch">TpSvcChannelTypeContactSearch</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-contact-search-implement-get-search-state">tp_svc_channel_type_contact_search_implement_get_search_state</link>
                                                        (<link linkend="TpSvcChannelTypeContactSearchClass">TpSvcChannelTypeContactSearchClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-contact-search-get-search-state-impl">tp_svc_channel_type_contact_search_get_search_state_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-contact-search-return-from-get-search-state">tp_svc_channel_type_contact_search_return_from_get_search_state</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context,
                                                         <link linkend="guint">guint</link> ret);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-type-contact-search-search-impl">*tp_svc_channel_type_contact_search_search_impl</link>)
                                                        (<link linkend="TpSvcChannelTypeContactSearch">TpSvcChannelTypeContactSearch</link> *self,
                                                         <link linkend="GHashTable">GHashTable</link> *terms,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-contact-search-implement-search">tp_svc_channel_type_contact_search_implement_search</link>
                                                        (<link linkend="TpSvcChannelTypeContactSearchClass">TpSvcChannelTypeContactSearchClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-contact-search-search-impl">tp_svc_channel_type_contact_search_search_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-contact-search-return-from-search">tp_svc_channel_type_contact_search_return_from_search</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-contact-search-emit-search-result-received">tp_svc_channel_type_contact_search_emit_search_result_received</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="guint">guint</link> contact,
                                                         const <link linkend="GHashTable">GHashTable</link> *values);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-contact-search-emit-search-state-changed">tp_svc_channel_type_contact_search_emit_search_state_changed</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="guint">guint</link> state);


                    <link linkend="TpSvcChannelTypeTubes">TpSvcChannelTypeTubes</link>;
                    <link linkend="TpSvcChannelTypeTubesClass">TpSvcChannelTypeTubesClass</link>;
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-type-tubes-accept-tube-impl">*tp_svc_channel_type_tubes_accept_tube_impl</link>)
                                                        (<link linkend="TpSvcChannelTypeTubes">TpSvcChannelTypeTubes</link> *self,
                                                         <link linkend="guint">guint</link> id,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-type-tubes-close-tube-impl">*tp_svc_channel_type_tubes_close_tube_impl</link>)
                                                        (<link linkend="TpSvcChannelTypeTubes">TpSvcChannelTypeTubes</link> *self,
                                                         <link linkend="guint">guint</link> id,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-tubes-emit-d-bus-names-changed">tp_svc_channel_type_tubes_emit_d_bus_names_changed</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="guint">guint</link> id,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *added,
                                                         const <link linkend="GArray">GArray</link> *removed);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-tubes-emit-new-tube">tp_svc_channel_type_tubes_emit_new_tube</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="guint">guint</link> id,
                                                         const <link linkend="guint">guint</link> initiator,
                                                         const <link linkend="guint">guint</link> type,
                                                         const <link linkend="gchar">gchar</link> *service,
                                                         const <link linkend="GHashTable">GHashTable</link> *parameters,
                                                         const <link linkend="guint">guint</link> state);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-tubes-emit-tube-closed">tp_svc_channel_type_tubes_emit_tube_closed</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="guint">guint</link> id);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-tubes-emit-tube-state-changed">tp_svc_channel_type_tubes_emit_tube_state_changed</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="guint">guint</link> id,
                                                         const <link linkend="guint">guint</link> state);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-type-tubes-get-available-tube-types-impl">*tp_svc_channel_type_tubes_get_available_tube_types_impl</link>)
                                                        (<link linkend="TpSvcChannelTypeTubes">TpSvcChannelTypeTubes</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-type-tubes-get-d-bus-names-impl">*tp_svc_channel_type_tubes_get_d_bus_names_impl</link>)
                                                        (<link linkend="TpSvcChannelTypeTubes">TpSvcChannelTypeTubes</link> *self,
                                                         <link linkend="guint">guint</link> id,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-type-tubes-get-d-bus-server-address-impl">*tp_svc_channel_type_tubes_get_d_bus_server_address_impl</link>)
                                                        (<link linkend="TpSvcChannelTypeTubes">TpSvcChannelTypeTubes</link> *self,
                                                         <link linkend="guint">guint</link> id,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-tubes-implement-accept-tube">tp_svc_channel_type_tubes_implement_accept_tube</link>
                                                        (<link linkend="TpSvcChannelTypeTubesClass">TpSvcChannelTypeTubesClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-tubes-accept-tube-impl">tp_svc_channel_type_tubes_accept_tube_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-tubes-implement-close-tube">tp_svc_channel_type_tubes_implement_close_tube</link>
                                                        (<link linkend="TpSvcChannelTypeTubesClass">TpSvcChannelTypeTubesClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-tubes-close-tube-impl">tp_svc_channel_type_tubes_close_tube_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-tubes-implement-get-available-tube-types">tp_svc_channel_type_tubes_implement_get_available_tube_types</link>
                                                        (<link linkend="TpSvcChannelTypeTubesClass">TpSvcChannelTypeTubesClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-tubes-get-available-tube-types-impl">tp_svc_channel_type_tubes_get_available_tube_types_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-tubes-implement-get-d-bus-names">tp_svc_channel_type_tubes_implement_get_d_bus_names</link>
                                                        (<link linkend="TpSvcChannelTypeTubesClass">TpSvcChannelTypeTubesClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-tubes-get-d-bus-names-impl">tp_svc_channel_type_tubes_get_d_bus_names_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-tubes-implement-get-d-bus-server-address">tp_svc_channel_type_tubes_implement_get_d_bus_server_address</link>
                                                        (<link linkend="TpSvcChannelTypeTubesClass">TpSvcChannelTypeTubesClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-tubes-get-d-bus-server-address-impl">tp_svc_channel_type_tubes_get_d_bus_server_address_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-tubes-implement-list-tubes">tp_svc_channel_type_tubes_implement_list_tubes</link>
                                                        (<link linkend="TpSvcChannelTypeTubesClass">TpSvcChannelTypeTubesClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-tubes-list-tubes-impl">tp_svc_channel_type_tubes_list_tubes_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-tubes-implement-offer-tube">tp_svc_channel_type_tubes_implement_offer_tube</link>
                                                        (<link linkend="TpSvcChannelTypeTubesClass">TpSvcChannelTypeTubesClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-tubes-offer-tube-impl">tp_svc_channel_type_tubes_offer_tube_impl</link> impl);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-type-tubes-list-tubes-impl">*tp_svc_channel_type_tubes_list_tubes_impl</link>)
                                                        (<link linkend="TpSvcChannelTypeTubes">TpSvcChannelTypeTubes</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-type-tubes-offer-tube-impl">*tp_svc_channel_type_tubes_offer_tube_impl</link>)
                                                        (<link linkend="TpSvcChannelTypeTubes">TpSvcChannelTypeTubes</link> *self,
                                                         <link linkend="guint">guint</link> type,
                                                         const <link linkend="gchar">gchar</link> *service,
                                                         <link linkend="GHashTable">GHashTable</link> *parameters,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-tubes-return-from-accept-tube">tp_svc_channel_type_tubes_return_from_accept_tube</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-tubes-return-from-close-tube">tp_svc_channel_type_tubes_return_from_close_tube</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-tubes-return-from-get-available-tube-types">tp_svc_channel_type_tubes_return_from_get_available_tube_types</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context,
                                                         const <link linkend="GArray">GArray</link> *ret);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-tubes-return-from-get-d-bus-names">tp_svc_channel_type_tubes_return_from_get_d_bus_names</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *ret);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-tubes-return-from-get-d-bus-server-address">tp_svc_channel_type_tubes_return_from_get_d_bus_server_address</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context,
                                                         const <link linkend="gchar">gchar</link> *ret);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-tubes-return-from-list-tubes">tp_svc_channel_type_tubes_return_from_list_tubes</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *ret);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-type-tubes-return-from-offer-tube">tp_svc_channel_type_tubes_return_from_offer_tube</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context,
                                                         <link linkend="guint">guint</link> ret);


                    <link linkend="TpSvcChannelInterfaceTransfer">TpSvcChannelInterfaceTransfer</link>;
                    <link linkend="TpSvcChannelInterfaceTransferClass">TpSvcChannelInterfaceTransferClass</link>;
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-interface-transfer-transfer-impl">*tp_svc_channel_interface_transfer_transfer_impl</link>)
                                                        (<link linkend="TpSvcChannelInterfaceTransfer">TpSvcChannelInterfaceTransfer</link> *self,
                                                         <link linkend="guint">guint</link> member,
                                                         <link linkend="guint">guint</link> destination,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-transfer-implement-transfer">tp_svc_channel_interface_transfer_implement_transfer</link>
                                                        (<link linkend="TpSvcChannelInterfaceTransferClass">TpSvcChannelInterfaceTransferClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-transfer-transfer-impl">tp_svc_channel_interface_transfer_transfer_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-transfer-return-from-transfer">tp_svc_channel_interface_transfer_return_from_transfer</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context);


                    <link linkend="TpSvcChannelInterfaceHold">TpSvcChannelInterfaceHold</link>;
                    <link linkend="TpSvcChannelInterfaceHoldClass">TpSvcChannelInterfaceHoldClass</link>;
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-interface-hold-get-hold-state-impl">*tp_svc_channel_interface_hold_get_hold_state_impl</link>)
                                                        (<link linkend="TpSvcChannelInterfaceHold">TpSvcChannelInterfaceHold</link> *self,
                                                         <link linkend="guint">guint</link> member,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-hold-implement-get-hold-state">tp_svc_channel_interface_hold_implement_get_hold_state</link>
                                                        (<link linkend="TpSvcChannelInterfaceHoldClass">TpSvcChannelInterfaceHoldClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-hold-get-hold-state-impl">tp_svc_channel_interface_hold_get_hold_state_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-hold-return-from-get-hold-state">tp_svc_channel_interface_hold_return_from_get_hold_state</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context,
                                                         <link linkend="guint">guint</link> ret);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-interface-hold-request-hold-impl">*tp_svc_channel_interface_hold_request_hold_impl</link>)
                                                        (<link linkend="TpSvcChannelInterfaceHold">TpSvcChannelInterfaceHold</link> *self,
                                                         <link linkend="guint">guint</link> member,
                                                         <link linkend="gboolean">gboolean</link> hold,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-hold-implement-request-hold">tp_svc_channel_interface_hold_implement_request_hold</link>
                                                        (<link linkend="TpSvcChannelInterfaceHoldClass">TpSvcChannelInterfaceHoldClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-hold-request-hold-impl">tp_svc_channel_interface_hold_request_hold_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-hold-return-from-request-hold">tp_svc_channel_interface_hold_return_from_request_hold</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-interface-hold-emit-hold-state-changed">tp_svc_channel_interface_hold_emit_hold_state_changed</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="guint">guint</link> member,
                                                         const <link linkend="guint">guint</link> state);


                    <link linkend="TpSvcConnectionInterfaceRenaming">TpSvcConnectionInterfaceRenaming</link>;
                    <link linkend="TpSvcConnectionInterfaceRenamingClass">TpSvcConnectionInterfaceRenamingClass</link>;
<link linkend="void">void</link>                (<link linkend="tp-svc-connection-interface-renaming-request-rename-impl">*tp_svc_connection_interface_renaming_request_rename_impl</link>)
                                                        (<link linkend="TpSvcConnectionInterfaceRenaming">TpSvcConnectionInterfaceRenaming</link> *self,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-connection-interface-renaming-implement-request-rename">tp_svc_connection_interface_renaming_implement_request_rename</link>
                                                        (<link linkend="TpSvcConnectionInterfaceRenamingClass">TpSvcConnectionInterfaceRenamingClass</link> *klass,
                                                         <link linkend="tp-svc-connection-interface-renaming-request-rename-impl">tp_svc_connection_interface_renaming_request_rename_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-connection-interface-renaming-return-from-request-rename">tp_svc_connection_interface_renaming_return_from_request_rename</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context);
<link linkend="void">void</link>                <link linkend="tp-svc-connection-interface-renaming-emit-renamed">tp_svc_connection_interface_renaming_emit_renamed</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="guint">guint</link> original,
                                                         const <link linkend="guint">guint</link> new);


                    <link linkend="TpSvcConnectionInterfacePrivacy">TpSvcConnectionInterfacePrivacy</link>;
                    <link linkend="TpSvcConnectionInterfacePrivacyClass">TpSvcConnectionInterfacePrivacyClass</link>;
<link linkend="void">void</link>                (<link linkend="tp-svc-connection-interface-privacy-get-privacy-mode-impl">*tp_svc_connection_interface_privacy_get_privacy_mode_impl</link>)
                                                        (<link linkend="TpSvcConnectionInterfacePrivacy">TpSvcConnectionInterfacePrivacy</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-connection-interface-privacy-implement-get-privacy-mode">tp_svc_connection_interface_privacy_implement_get_privacy_mode</link>
                                                        (<link linkend="TpSvcConnectionInterfacePrivacyClass">TpSvcConnectionInterfacePrivacyClass</link> *klass,
                                                         <link linkend="tp-svc-connection-interface-privacy-get-privacy-mode-impl">tp_svc_connection_interface_privacy_get_privacy_mode_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-connection-interface-privacy-return-from-get-privacy-mode">tp_svc_connection_interface_privacy_return_from_get_privacy_mode</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context,
                                                         const <link linkend="gchar">gchar</link> *ret);
<link linkend="void">void</link>                (<link linkend="tp-svc-connection-interface-privacy-get-privacy-modes-impl">*tp_svc_connection_interface_privacy_get_privacy_modes_impl</link>)
                                                        (<link linkend="TpSvcConnectionInterfacePrivacy">TpSvcConnectionInterfacePrivacy</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-connection-interface-privacy-implement-get-privacy-modes">tp_svc_connection_interface_privacy_implement_get_privacy_modes</link>
                                                        (<link linkend="TpSvcConnectionInterfacePrivacyClass">TpSvcConnectionInterfacePrivacyClass</link> *klass,
                                                         <link linkend="tp-svc-connection-interface-privacy-get-privacy-modes-impl">tp_svc_connection_interface_privacy_get_privacy_modes_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-connection-interface-privacy-return-from-get-privacy-modes">tp_svc_connection_interface_privacy_return_from_get_privacy_modes</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context,
                                                         const <link linkend="gchar">gchar</link> **ret);
<link linkend="void">void</link>                (<link linkend="tp-svc-connection-interface-privacy-set-privacy-mode-impl">*tp_svc_connection_interface_privacy_set_privacy_mode_impl</link>)
                                                        (<link linkend="TpSvcConnectionInterfacePrivacy">TpSvcConnectionInterfacePrivacy</link> *self,
                                                         const <link linkend="gchar">gchar</link> *mode,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-connection-interface-privacy-implement-set-privacy-mode">tp_svc_connection_interface_privacy_implement_set_privacy_mode</link>
                                                        (<link linkend="TpSvcConnectionInterfacePrivacyClass">TpSvcConnectionInterfacePrivacyClass</link> *klass,
                                                         <link linkend="tp-svc-connection-interface-privacy-set-privacy-mode-impl">tp_svc_connection_interface_privacy_set_privacy_mode_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-connection-interface-privacy-return-from-set-privacy-mode">tp_svc_connection_interface_privacy_return_from_set_privacy_mode</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context);
<link linkend="void">void</link>                <link linkend="tp-svc-connection-interface-privacy-emit-privacy-mode-changed">tp_svc_connection_interface_privacy_emit_privacy_mode_changed</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="gchar">gchar</link> *mode);


                    <link linkend="TpSvcConnectionInterfaceContactInfo">TpSvcConnectionInterfaceContactInfo</link>;
                    <link linkend="TpSvcConnectionInterfaceContactInfoClass">TpSvcConnectionInterfaceContactInfoClass</link>;
<link linkend="void">void</link>                (<link linkend="tp-svc-connection-interface-contact-info-request-contact-info-impl">*tp_svc_connection_interface_contact_info_request_contact_info_impl</link>)
                                                        (<link linkend="TpSvcConnectionInterfaceContactInfo">TpSvcConnectionInterfaceContactInfo</link> *self,
                                                         <link linkend="guint">guint</link> contact,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-connection-interface-contact-info-implement-request-contact-info">tp_svc_connection_interface_contact_info_implement_request_contact_info</link>
                                                        (<link linkend="TpSvcConnectionInterfaceContactInfoClass">TpSvcConnectionInterfaceContactInfoClass</link> *klass,
                                                         <link linkend="tp-svc-connection-interface-contact-info-request-contact-info-impl">tp_svc_connection_interface_contact_info_request_contact_info_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-connection-interface-contact-info-return-from-request-contact-info">tp_svc_connection_interface_contact_info_return_from_request_contact_info</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context);
<link linkend="void">void</link>                <link linkend="tp-svc-connection-interface-contact-info-emit-got-contact-info">tp_svc_connection_interface_contact_info_emit_got_contact_info</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="guint">guint</link> contact,
                                                         const <link linkend="gchar">gchar</link> *vcard);


                    <link linkend="TpSvcConnectionInterfaceForwarding">TpSvcConnectionInterfaceForwarding</link>;
                    <link linkend="TpSvcConnectionInterfaceForwardingClass">TpSvcConnectionInterfaceForwardingClass</link>;
<link linkend="void">void</link>                (<link linkend="tp-svc-connection-interface-forwarding-get-forwarding-handle-impl">*tp_svc_connection_interface_forwarding_get_forwarding_handle_impl</link>)
                                                        (<link linkend="TpSvcConnectionInterfaceForwarding">TpSvcConnectionInterfaceForwarding</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-connection-interface-forwarding-implement-get-forwarding-handle">tp_svc_connection_interface_forwarding_implement_get_forwarding_handle</link>
                                                        (<link linkend="TpSvcConnectionInterfaceForwardingClass">TpSvcConnectionInterfaceForwardingClass</link> *klass,
                                                         <link linkend="tp-svc-connection-interface-forwarding-get-forwarding-handle-impl">tp_svc_connection_interface_forwarding_get_forwarding_handle_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-connection-interface-forwarding-return-from-get-forwarding-handle">tp_svc_connection_interface_forwarding_return_from_get_forwarding_handle</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context,
                                                         <link linkend="guint">guint</link> ret);
<link linkend="void">void</link>                (<link linkend="tp-svc-connection-interface-forwarding-set-forwarding-handle-impl">*tp_svc_connection_interface_forwarding_set_forwarding_handle_impl</link>)
                                                        (<link linkend="TpSvcConnectionInterfaceForwarding">TpSvcConnectionInterfaceForwarding</link> *self,
                                                         <link linkend="guint">guint</link> forward_to,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-connection-interface-forwarding-implement-set-forwarding-handle">tp_svc_connection_interface_forwarding_implement_set_forwarding_handle</link>
                                                        (<link linkend="TpSvcConnectionInterfaceForwardingClass">TpSvcConnectionInterfaceForwardingClass</link> *klass,
                                                         <link linkend="tp-svc-connection-interface-forwarding-set-forwarding-handle-impl">tp_svc_connection_interface_forwarding_set_forwarding_handle_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-connection-interface-forwarding-return-from-set-forwarding-handle">tp_svc_connection_interface_forwarding_return_from_set_forwarding_handle</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context);
<link linkend="void">void</link>                <link linkend="tp-svc-connection-interface-forwarding-emit-forwarding-changed">tp_svc_connection_interface_forwarding_emit_forwarding_changed</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="guint">guint</link> forward_to);

</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
The static library telepathy-glib-unstable exists to support interfaces
in the Telepathy specification which do not yet have a stable API,
in order to avoid changing the API and ABI of telepathy-glib too often.
</para>
<para>
To use these interfaces you must use the pkg-config module
'telepathy-glib-unstable', or link against -ltelepathy-glib-unstable
and add /usr/include/telepathy-unstable to your header search path.</para>
<para>

</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="TP-IFACE-CONNECTION-INTERFACE-CONTACT-INFO:CAPS" role="macro"/>TP_IFACE_CONNECTION_INTERFACE_CONTACT_INFO</title>
<indexterm><primary>TP_IFACE_CONNECTION_INTERFACE_CONTACT_INFO</primary></indexterm><programlisting>#define             TP_IFACE_CONNECTION_INTERFACE_CONTACT_INFO</programlisting>
<para>
The Telepathy interface name "org.freedesktop.Telepathy.Connection.Interface.ContactInfo"</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="TP-IFACE-CONNECTION-INTERFACE-FORWARDING:CAPS" role="macro"/>TP_IFACE_CONNECTION_INTERFACE_FORWARDING</title>
<indexterm><primary>TP_IFACE_CONNECTION_INTERFACE_FORWARDING</primary></indexterm><programlisting>#define             TP_IFACE_CONNECTION_INTERFACE_FORWARDING</programlisting>
<para>
The Telepathy interface name "org.freedesktop.Telepathy.Connection.Interface.Forwarding"</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="TP-IFACE-CONNECTION-INTERFACE-PRIVACY:CAPS" role="macro"/>TP_IFACE_CONNECTION_INTERFACE_PRIVACY</title>
<indexterm><primary>TP_IFACE_CONNECTION_INTERFACE_PRIVACY</primary></indexterm><programlisting>#define             TP_IFACE_CONNECTION_INTERFACE_PRIVACY</programlisting>
<para>
The Telepathy interface name "org.freedesktop.Telepathy.Connection.Interface.Privacy"</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="TP-IFACE-CONNECTION-INTERFACE-RENAMING:CAPS" role="macro"/>TP_IFACE_CONNECTION_INTERFACE_RENAMING</title>
<indexterm><primary>TP_IFACE_CONNECTION_INTERFACE_RENAMING</primary></indexterm><programlisting>#define             TP_IFACE_CONNECTION_INTERFACE_RENAMING</programlisting>
<para>
The Telepathy interface name "org.freedesktop.Telepathy.Connection.Interface.Renaming"</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="TP-IFACE-CHANNEL-TYPE-CONTACT-SEARCH:CAPS" role="macro"/>TP_IFACE_CHANNEL_TYPE_CONTACT_SEARCH</title>
<indexterm><primary>TP_IFACE_CHANNEL_TYPE_CONTACT_SEARCH</primary></indexterm><programlisting>#define             TP_IFACE_CHANNEL_TYPE_CONTACT_SEARCH</programlisting>
<para>
The Telepathy interface name "org.freedesktop.Telepathy.Channel.Type.ContactSearch"</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="TP-IFACE-CHANNEL-INTERFACE-HOLD:CAPS" role="macro"/>TP_IFACE_CHANNEL_INTERFACE_HOLD</title>
<indexterm><primary>TP_IFACE_CHANNEL_INTERFACE_HOLD</primary></indexterm><programlisting>#define             TP_IFACE_CHANNEL_INTERFACE_HOLD</programlisting>
<para>
The Telepathy interface name "org.freedesktop.Telepathy.Channel.Interface.Hold"</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="TP-IFACE-CHANNEL-INTERFACE-TRANSFER:CAPS" role="macro"/>TP_IFACE_CHANNEL_INTERFACE_TRANSFER</title>
<indexterm><primary>TP_IFACE_CHANNEL_INTERFACE_TRANSFER</primary></indexterm><programlisting>#define             TP_IFACE_CHANNEL_INTERFACE_TRANSFER</programlisting>
<para>
The Telepathy interface name "org.freedesktop.Telepathy.Channel.Interface.Transfer"</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="TpChannelContactSearchState" role="enum"/>enum TpChannelContactSearchState</title>
<indexterm><primary>TpChannelContactSearchState</primary></indexterm><programlisting>typedef enum {
    TP_CHANNEL_CONTACT_SEARCH_STATE_BEFORE = 0,
    TP_CHANNEL_CONTACT_SEARCH_STATE_DURING = 1,
    TP_CHANNEL_CONTACT_SEARCH_STATE_AFTER = 2,
} TpChannelContactSearchState;
</programlisting>
<para>
Enumeration generated from the Telepathy specification.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="TP-CHANNEL-CONTACT-SEARCH-STATE-BEFORE:CAPS" role="constant"/><literal>TP_CHANNEL_CONTACT_SEARCH_STATE_BEFORE</literal></term>
<listitem><simpara> <![CDATA[The search has not started]]>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="TP-CHANNEL-CONTACT-SEARCH-STATE-DURING:CAPS" role="constant"/><literal>TP_CHANNEL_CONTACT_SEARCH_STATE_DURING</literal></term>
<listitem><simpara> <![CDATA[The search is in progress]]>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="TP-CHANNEL-CONTACT-SEARCH-STATE-AFTER:CAPS" role="constant"/><literal>TP_CHANNEL_CONTACT_SEARCH_STATE_AFTER</literal></term>
<listitem><simpara> <![CDATA[The search has been completed]]>
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="NUM-TP-CHANNEL-CONTACT-SEARCH-STATES:CAPS" role="macro"/>NUM_TP_CHANNEL_CONTACT_SEARCH_STATES</title>
<indexterm><primary>NUM_TP_CHANNEL_CONTACT_SEARCH_STATES</primary></indexterm><programlisting>#define             NUM_TP_CHANNEL_CONTACT_SEARCH_STATES</programlisting>
<para>
1 higher than the highest valid value of <link linkend="TpChannelContactSearchState"><type>TpChannelContactSearchState</type></link>.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="TpChannelHoldState" role="enum"/>enum TpChannelHoldState</title>
<indexterm><primary>TpChannelHoldState</primary></indexterm><programlisting>typedef enum {
    TP_CHANNEL_HOLD_STATE_NONE = 0,
    TP_CHANNEL_HOLD_STATE_SEND_ONLY = 1,
    TP_CHANNEL_HOLD_STATE_RECV_ONLY = 2,
    TP_CHANNEL_HOLD_STATE_BOTH = 3,
} TpChannelHoldState;
</programlisting>
<para>
Enumeration generated from the Telepathy specification.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="TP-CHANNEL-HOLD-STATE-NONE:CAPS" role="constant"/><literal>TP_CHANNEL_HOLD_STATE_NONE</literal></term>
<listitem><simpara> <![CDATA[             Neither the local user and the remote member are on hold, and media             is being sent bidirectionally.       ]]>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="TP-CHANNEL-HOLD-STATE-SEND-ONLY:CAPS" role="constant"/><literal>TP_CHANNEL_HOLD_STATE_SEND_ONLY</literal></term>
<listitem><simpara> <![CDATA[             The local user has put the remote member on hold, so is sending             media but has arranged not to receive any media streams.       ]]>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="TP-CHANNEL-HOLD-STATE-RECV-ONLY:CAPS" role="constant"/><literal>TP_CHANNEL_HOLD_STATE_RECV_ONLY</literal></term>
<listitem><simpara> <![CDATA[             The user has been put on hold by the remote member, so is receiving             media but has arranged not to send any media streams.       ]]>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="TP-CHANNEL-HOLD-STATE-BOTH:CAPS" role="constant"/><literal>TP_CHANNEL_HOLD_STATE_BOTH</literal></term>
<listitem><simpara> <![CDATA[             Both the local user and the remote member have agreed not to send             any media streams to each other.       ]]>
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="NUM-TP-CHANNEL-HOLD-STATES:CAPS" role="macro"/>NUM_TP_CHANNEL_HOLD_STATES</title>
<indexterm><primary>NUM_TP_CHANNEL_HOLD_STATES</primary></indexterm><programlisting>#define             NUM_TP_CHANNEL_HOLD_STATES</programlisting>
<para>
1 higher than the highest valid value of <link linkend="TpChannelHoldState"><type>TpChannelHoldState</type></link>.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="TpTubeState" role="enum"/>enum TpTubeState</title>
<indexterm><primary>TpTubeState</primary></indexterm><programlisting>typedef enum {
    TP_TUBE_STATE_LOCAL_PENDING = 0,
    TP_TUBE_STATE_REMOTE_PENDING = 1,
    TP_TUBE_STATE_OPEN = 2,
} TpTubeState;
</programlisting>
<para>
Enumeration generated from the Telepathy specification.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="TP-TUBE-STATE-LOCAL-PENDING:CAPS" role="constant"/><literal>TP_TUBE_STATE_LOCAL_PENDING</literal></term>
<listitem><simpara> <![CDATA[           The tube is waiting to be accepted/closed locally.         ]]>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="TP-TUBE-STATE-REMOTE-PENDING:CAPS" role="constant"/><literal>TP_TUBE_STATE_REMOTE_PENDING</literal></term>
<listitem><simpara> <![CDATA[           The tube is waiting to be accepted/closed remotely.         ]]>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="TP-TUBE-STATE-OPEN:CAPS" role="constant"/><literal>TP_TUBE_STATE_OPEN</literal></term>
<listitem><simpara> <![CDATA[           The tube is open for traffic.         ]]>
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="NUM-TP-TUBE-STATES:CAPS" role="macro"/>NUM_TP_TUBE_STATES</title>
<indexterm><primary>NUM_TP_TUBE_STATES</primary></indexterm><programlisting>#define             NUM_TP_TUBE_STATES</programlisting>
<para>
1 higher than the highest valid value of <link linkend="TpTubeState"><type>TpTubeState</type></link>.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="TpTubeType" role="enum"/>enum TpTubeType</title>
<indexterm><primary>TpTubeType</primary></indexterm><programlisting>typedef enum {
    TP_TUBE_TYPE_DBUS = 0,
} TpTubeType;
</programlisting>
<para>
Enumeration generated from the Telepathy specification.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="TP-TUBE-TYPE-DBUS:CAPS" role="constant"/><literal>TP_TUBE_TYPE_DBUS</literal></term>
<listitem><simpara> <![CDATA[           An ordered reliable transport, for transporting D-Bus traffic.            For each D-Bus tube, the connection manager listens on a D-Bus           server address, as detailed in the D-Bus specification. On this           address, it emulates a bus upon which each tube participant appears           as an endpoint. The service name of a D-Bus tube should be a           well-known D-Bus service name, of the form com.example.ServiceName.            The objects and interfaces which are expected to exist on the           emulated bus depend on the well-known name; typically, either the           participant who initiated the tube is expected to export the same           objects/interfaces that would be exported by a service of that name           on a bus, or all participants are expected to export those           objects/interfaces.         ]]>
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="NUM-TP-TUBE-TYPES:CAPS" role="macro"/>NUM_TP_TUBE_TYPES</title>
<indexterm><primary>NUM_TP_TUBE_TYPES</primary></indexterm><programlisting>#define             NUM_TP_TUBE_TYPES</programlisting>
<para>
1 higher than the highest valid value of <link linkend="TpTubeType"><type>TpTubeType</type></link>.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="TpSvcChannelTypeContactSearch" role="struct"/>TpSvcChannelTypeContactSearch</title>
<indexterm><primary>TpSvcChannelTypeContactSearch</primary></indexterm><programlisting>typedef struct _TpSvcChannelTypeContactSearch TpSvcChannelTypeContactSearch;</programlisting>
<para>
Dummy typedef representing any implementation of this interface.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="TpSvcChannelTypeContactSearchClass" role="struct"/>TpSvcChannelTypeContactSearchClass</title>
<indexterm><primary>TpSvcChannelTypeContactSearchClass</primary></indexterm><programlisting>typedef struct _TpSvcChannelTypeContactSearchClass TpSvcChannelTypeContactSearchClass;</programlisting>
<para>
The class of TpSvcChannelTypeContactSearch.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-contact-search-get-search-keys-impl" role="function"/>tp_svc_channel_type_contact_search_get_search_keys_impl ()</title>
<indexterm><primary>tp_svc_channel_type_contact_search_get_search_keys_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_type_contact_search_get_search_keys_impl)
                                                        (<link linkend="TpSvcChannelTypeContactSearch">TpSvcChannelTypeContactSearch</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Signature of an implementation of D-Bus method GetSearchKeys
on interface org.freedesktop.Telepathy.Channel.Type.ContactSearch</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus invocation context to use to return values
          or throw an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-contact-search-implement-get-search-keys" role="function"/>tp_svc_channel_type_contact_search_implement_get_search_keys ()</title>
<indexterm><primary>tp_svc_channel_type_contact_search_implement_get_search_keys</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_contact_search_implement_get_search_keys
                                                        (<link linkend="TpSvcChannelTypeContactSearchClass">TpSvcChannelTypeContactSearchClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-contact-search-get-search-keys-impl">tp_svc_channel_type_contact_search_get_search_keys_impl</link> impl);</programlisting>
<para>
Register an implementation for the GetSearchKeys method in the vtable of an
implementation of this interface. To be called from the interface
init function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> A callback used to implement the GetSearchKeys method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-contact-search-return-from-get-search-keys" role="function"/>tp_svc_channel_type_contact_search_return_from_get_search_keys ()</title>
<indexterm><primary>tp_svc_channel_type_contact_search_return_from_get_search_keys</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_contact_search_return_from_get_search_keys
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context,
                                                         const <link linkend="gchar">gchar</link> *ret,
                                                         <link linkend="GHashTable">GHashTable</link> *ret1);</programlisting>
<para>
Return successfully by calling dbus_g_method_return (<parameter>dbus_context</parameter>,
...). This inline function is just a type-safe wrapper for
dbus_g_method_return.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dbus_context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret1</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-contact-search-get-search-state-impl" role="function"/>tp_svc_channel_type_contact_search_get_search_state_impl ()</title>
<indexterm><primary>tp_svc_channel_type_contact_search_get_search_state_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_type_contact_search_get_search_state_impl)
                                                        (<link linkend="TpSvcChannelTypeContactSearch">TpSvcChannelTypeContactSearch</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Signature of an implementation of D-Bus method GetSearchState
on interface org.freedesktop.Telepathy.Channel.Type.ContactSearch</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus invocation context to use to return values
          or throw an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-contact-search-implement-get-search-state" role="function"/>tp_svc_channel_type_contact_search_implement_get_search_state ()</title>
<indexterm><primary>tp_svc_channel_type_contact_search_implement_get_search_state</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_contact_search_implement_get_search_state
                                                        (<link linkend="TpSvcChannelTypeContactSearchClass">TpSvcChannelTypeContactSearchClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-contact-search-get-search-state-impl">tp_svc_channel_type_contact_search_get_search_state_impl</link> impl);</programlisting>
<para>
Register an implementation for the GetSearchState method in the vtable of an
implementation of this interface. To be called from the interface
init function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> A callback used to implement the GetSearchState method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-contact-search-return-from-get-search-state" role="function"/>tp_svc_channel_type_contact_search_return_from_get_search_state ()</title>
<indexterm><primary>tp_svc_channel_type_contact_search_return_from_get_search_state</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_contact_search_return_from_get_search_state
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context,
                                                         <link linkend="guint">guint</link> ret);</programlisting>
<para>
Return successfully by calling dbus_g_method_return (<parameter>dbus_context</parameter>,
...). This inline function is just a type-safe wrapper for
dbus_g_method_return.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dbus_context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-contact-search-search-impl" role="function"/>tp_svc_channel_type_contact_search_search_impl ()</title>
<indexterm><primary>tp_svc_channel_type_contact_search_search_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_type_contact_search_search_impl)
                                                        (<link linkend="TpSvcChannelTypeContactSearch">TpSvcChannelTypeContactSearch</link> *self,
                                                         <link linkend="GHashTable">GHashTable</link> *terms,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Signature of an implementation of D-Bus method Search
on interface org.freedesktop.Telepathy.Channel.Type.ContactSearch</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>terms</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus invocation context to use to return values
          or throw an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-contact-search-implement-search" role="function"/>tp_svc_channel_type_contact_search_implement_search ()</title>
<indexterm><primary>tp_svc_channel_type_contact_search_implement_search</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_contact_search_implement_search
                                                        (<link linkend="TpSvcChannelTypeContactSearchClass">TpSvcChannelTypeContactSearchClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-contact-search-search-impl">tp_svc_channel_type_contact_search_search_impl</link> impl);</programlisting>
<para>
Register an implementation for the Search method in the vtable of an
implementation of this interface. To be called from the interface
init function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> A callback used to implement the Search method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-contact-search-return-from-search" role="function"/>tp_svc_channel_type_contact_search_return_from_search ()</title>
<indexterm><primary>tp_svc_channel_type_contact_search_return_from_search</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_contact_search_return_from_search
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context);</programlisting>
<para>
Return successfully by calling dbus_g_method_return (<parameter>dbus_context</parameter>,
...). This inline function is just a type-safe wrapper for
dbus_g_method_return.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dbus_context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-contact-search-emit-search-result-received" role="function"/>tp_svc_channel_type_contact_search_emit_search_result_received ()</title>
<indexterm><primary>tp_svc_channel_type_contact_search_emit_search_result_received</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_contact_search_emit_search_result_received
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="guint">guint</link> contact,
                                                         const <link linkend="GHashTable">GHashTable</link> *values);</programlisting>
<para>
Emit the SearchResultReceived D-Bus signal from <parameter>instance</parameter> with the given arguments.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>contact</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>values</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-contact-search-emit-search-state-changed" role="function"/>tp_svc_channel_type_contact_search_emit_search_state_changed ()</title>
<indexterm><primary>tp_svc_channel_type_contact_search_emit_search_state_changed</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_contact_search_emit_search_state_changed
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="guint">guint</link> state);</programlisting>
<para>
Emit the SearchStateChanged D-Bus signal from <parameter>instance</parameter> with the given arguments.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="TpSvcChannelTypeTubes" role="struct"/>TpSvcChannelTypeTubes</title>
<indexterm><primary>TpSvcChannelTypeTubes</primary></indexterm><programlisting>typedef struct _TpSvcChannelTypeTubes TpSvcChannelTypeTubes;</programlisting>
<para>
Dummy typedef representing any implementation of this interface.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="TpSvcChannelTypeTubesClass" role="struct"/>TpSvcChannelTypeTubesClass</title>
<indexterm><primary>TpSvcChannelTypeTubesClass</primary></indexterm><programlisting>typedef struct _TpSvcChannelTypeTubesClass TpSvcChannelTypeTubesClass;</programlisting>
<para>
The class of TpSvcChannelTypeTubes.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-tubes-accept-tube-impl" role="function"/>tp_svc_channel_type_tubes_accept_tube_impl ()</title>
<indexterm><primary>tp_svc_channel_type_tubes_accept_tube_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_type_tubes_accept_tube_impl)
                                                        (<link linkend="TpSvcChannelTypeTubes">TpSvcChannelTypeTubes</link> *self,
                                                         <link linkend="guint">guint</link> id,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Signature of an implementation of D-Bus method AcceptTube
on interface org.freedesktop.Telepathy.Channel.Type.Tubes</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus invocation context to use to return values
          or throw an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-tubes-close-tube-impl" role="function"/>tp_svc_channel_type_tubes_close_tube_impl ()</title>
<indexterm><primary>tp_svc_channel_type_tubes_close_tube_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_type_tubes_close_tube_impl)
                                                        (<link linkend="TpSvcChannelTypeTubes">TpSvcChannelTypeTubes</link> *self,
                                                         <link linkend="guint">guint</link> id,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Signature of an implementation of D-Bus method CloseTube
on interface org.freedesktop.Telepathy.Channel.Type.Tubes</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus invocation context to use to return values
          or throw an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-tubes-emit-d-bus-names-changed" role="function"/>tp_svc_channel_type_tubes_emit_d_bus_names_changed ()</title>
<indexterm><primary>tp_svc_channel_type_tubes_emit_d_bus_names_changed</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_tubes_emit_d_bus_names_changed
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="guint">guint</link> id,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *added,
                                                         const <link linkend="GArray">GArray</link> *removed);</programlisting>
<para>
Emit the DBusNamesChanged D-Bus signal from <parameter>instance</parameter> with the given arguments.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>added</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>removed</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-tubes-emit-new-tube" role="function"/>tp_svc_channel_type_tubes_emit_new_tube ()</title>
<indexterm><primary>tp_svc_channel_type_tubes_emit_new_tube</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_tubes_emit_new_tube
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="guint">guint</link> id,
                                                         const <link linkend="guint">guint</link> initiator,
                                                         const <link linkend="guint">guint</link> type,
                                                         const <link linkend="gchar">gchar</link> *service,
                                                         const <link linkend="GHashTable">GHashTable</link> *parameters,
                                                         const <link linkend="guint">guint</link> state);</programlisting>
<para>
Emit the NewTube D-Bus signal from <parameter>instance</parameter> with the given arguments.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>initiator</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>service</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parameters</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-tubes-emit-tube-closed" role="function"/>tp_svc_channel_type_tubes_emit_tube_closed ()</title>
<indexterm><primary>tp_svc_channel_type_tubes_emit_tube_closed</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_tubes_emit_tube_closed
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="guint">guint</link> id);</programlisting>
<para>
Emit the TubeClosed D-Bus signal from <parameter>instance</parameter> with the given arguments.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-tubes-emit-tube-state-changed" role="function"/>tp_svc_channel_type_tubes_emit_tube_state_changed ()</title>
<indexterm><primary>tp_svc_channel_type_tubes_emit_tube_state_changed</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_tubes_emit_tube_state_changed
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="guint">guint</link> id,
                                                         const <link linkend="guint">guint</link> state);</programlisting>
<para>
Emit the TubeStateChanged D-Bus signal from <parameter>instance</parameter> with the given arguments.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-tubes-get-available-tube-types-impl" role="function"/>tp_svc_channel_type_tubes_get_available_tube_types_impl ()</title>
<indexterm><primary>tp_svc_channel_type_tubes_get_available_tube_types_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_type_tubes_get_available_tube_types_impl)
                                                        (<link linkend="TpSvcChannelTypeTubes">TpSvcChannelTypeTubes</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Signature of an implementation of D-Bus method GetAvailableTubeTypes
on interface org.freedesktop.Telepathy.Channel.Type.Tubes</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus invocation context to use to return values
          or throw an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-tubes-get-d-bus-names-impl" role="function"/>tp_svc_channel_type_tubes_get_d_bus_names_impl ()</title>
<indexterm><primary>tp_svc_channel_type_tubes_get_d_bus_names_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_type_tubes_get_d_bus_names_impl)
                                                        (<link linkend="TpSvcChannelTypeTubes">TpSvcChannelTypeTubes</link> *self,
                                                         <link linkend="guint">guint</link> id,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Signature of an implementation of D-Bus method GetDBusNames
on interface org.freedesktop.Telepathy.Channel.Type.Tubes</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus invocation context to use to return values
          or throw an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-tubes-get-d-bus-server-address-impl" role="function"/>tp_svc_channel_type_tubes_get_d_bus_server_address_impl ()</title>
<indexterm><primary>tp_svc_channel_type_tubes_get_d_bus_server_address_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_type_tubes_get_d_bus_server_address_impl)
                                                        (<link linkend="TpSvcChannelTypeTubes">TpSvcChannelTypeTubes</link> *self,
                                                         <link linkend="guint">guint</link> id,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Signature of an implementation of D-Bus method GetDBusServerAddress
on interface org.freedesktop.Telepathy.Channel.Type.Tubes</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus invocation context to use to return values
          or throw an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-tubes-implement-accept-tube" role="function"/>tp_svc_channel_type_tubes_implement_accept_tube ()</title>
<indexterm><primary>tp_svc_channel_type_tubes_implement_accept_tube</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_tubes_implement_accept_tube
                                                        (<link linkend="TpSvcChannelTypeTubesClass">TpSvcChannelTypeTubesClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-tubes-accept-tube-impl">tp_svc_channel_type_tubes_accept_tube_impl</link> impl);</programlisting>
<para>
Register an implementation for the AcceptTube method in the vtable of an
implementation of this interface. To be called from the interface
init function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> A callback used to implement the AcceptTube method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-tubes-implement-close-tube" role="function"/>tp_svc_channel_type_tubes_implement_close_tube ()</title>
<indexterm><primary>tp_svc_channel_type_tubes_implement_close_tube</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_tubes_implement_close_tube
                                                        (<link linkend="TpSvcChannelTypeTubesClass">TpSvcChannelTypeTubesClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-tubes-close-tube-impl">tp_svc_channel_type_tubes_close_tube_impl</link> impl);</programlisting>
<para>
Register an implementation for the CloseTube method in the vtable of an
implementation of this interface. To be called from the interface
init function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> A callback used to implement the CloseTube method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-tubes-implement-get-available-tube-types" role="function"/>tp_svc_channel_type_tubes_implement_get_available_tube_types ()</title>
<indexterm><primary>tp_svc_channel_type_tubes_implement_get_available_tube_types</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_tubes_implement_get_available_tube_types
                                                        (<link linkend="TpSvcChannelTypeTubesClass">TpSvcChannelTypeTubesClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-tubes-get-available-tube-types-impl">tp_svc_channel_type_tubes_get_available_tube_types_impl</link> impl);</programlisting>
<para>
Register an implementation for the GetAvailableTubeTypes method in the vtable of an
implementation of this interface. To be called from the interface
init function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> A callback used to implement the GetAvailableTubeTypes method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-tubes-implement-get-d-bus-names" role="function"/>tp_svc_channel_type_tubes_implement_get_d_bus_names ()</title>
<indexterm><primary>tp_svc_channel_type_tubes_implement_get_d_bus_names</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_tubes_implement_get_d_bus_names
                                                        (<link linkend="TpSvcChannelTypeTubesClass">TpSvcChannelTypeTubesClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-tubes-get-d-bus-names-impl">tp_svc_channel_type_tubes_get_d_bus_names_impl</link> impl);</programlisting>
<para>
Register an implementation for the GetDBusNames method in the vtable of an
implementation of this interface. To be called from the interface
init function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> A callback used to implement the GetDBusNames method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-tubes-implement-get-d-bus-server-address" role="function"/>tp_svc_channel_type_tubes_implement_get_d_bus_server_address ()</title>
<indexterm><primary>tp_svc_channel_type_tubes_implement_get_d_bus_server_address</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_tubes_implement_get_d_bus_server_address
                                                        (<link linkend="TpSvcChannelTypeTubesClass">TpSvcChannelTypeTubesClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-tubes-get-d-bus-server-address-impl">tp_svc_channel_type_tubes_get_d_bus_server_address_impl</link> impl);</programlisting>
<para>
Register an implementation for the GetDBusServerAddress method in the vtable of an
implementation of this interface. To be called from the interface
init function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> A callback used to implement the GetDBusServerAddress method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-tubes-implement-list-tubes" role="function"/>tp_svc_channel_type_tubes_implement_list_tubes ()</title>
<indexterm><primary>tp_svc_channel_type_tubes_implement_list_tubes</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_tubes_implement_list_tubes
                                                        (<link linkend="TpSvcChannelTypeTubesClass">TpSvcChannelTypeTubesClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-tubes-list-tubes-impl">tp_svc_channel_type_tubes_list_tubes_impl</link> impl);</programlisting>
<para>
Register an implementation for the ListTubes method in the vtable of an
implementation of this interface. To be called from the interface
init function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> A callback used to implement the ListTubes method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-tubes-implement-offer-tube" role="function"/>tp_svc_channel_type_tubes_implement_offer_tube ()</title>
<indexterm><primary>tp_svc_channel_type_tubes_implement_offer_tube</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_tubes_implement_offer_tube
                                                        (<link linkend="TpSvcChannelTypeTubesClass">TpSvcChannelTypeTubesClass</link> *klass,
                                                         <link linkend="tp-svc-channel-type-tubes-offer-tube-impl">tp_svc_channel_type_tubes_offer_tube_impl</link> impl);</programlisting>
<para>
Register an implementation for the OfferTube method in the vtable of an
implementation of this interface. To be called from the interface
init function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> A callback used to implement the OfferTube method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-tubes-list-tubes-impl" role="function"/>tp_svc_channel_type_tubes_list_tubes_impl ()</title>
<indexterm><primary>tp_svc_channel_type_tubes_list_tubes_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_type_tubes_list_tubes_impl)
                                                        (<link linkend="TpSvcChannelTypeTubes">TpSvcChannelTypeTubes</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Signature of an implementation of D-Bus method ListTubes
on interface org.freedesktop.Telepathy.Channel.Type.Tubes</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus invocation context to use to return values
          or throw an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-tubes-offer-tube-impl" role="function"/>tp_svc_channel_type_tubes_offer_tube_impl ()</title>
<indexterm><primary>tp_svc_channel_type_tubes_offer_tube_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_type_tubes_offer_tube_impl)
                                                        (<link linkend="TpSvcChannelTypeTubes">TpSvcChannelTypeTubes</link> *self,
                                                         <link linkend="guint">guint</link> type,
                                                         const <link linkend="gchar">gchar</link> *service,
                                                         <link linkend="GHashTable">GHashTable</link> *parameters,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Signature of an implementation of D-Bus method OfferTube
on interface org.freedesktop.Telepathy.Channel.Type.Tubes</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>service</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parameters</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus invocation context to use to return values
          or throw an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-tubes-return-from-accept-tube" role="function"/>tp_svc_channel_type_tubes_return_from_accept_tube ()</title>
<indexterm><primary>tp_svc_channel_type_tubes_return_from_accept_tube</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_tubes_return_from_accept_tube
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context);</programlisting>
<para>
Return successfully by calling dbus_g_method_return (<parameter>dbus_context</parameter>,
...). This inline function is just a type-safe wrapper for
dbus_g_method_return.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dbus_context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-tubes-return-from-close-tube" role="function"/>tp_svc_channel_type_tubes_return_from_close_tube ()</title>
<indexterm><primary>tp_svc_channel_type_tubes_return_from_close_tube</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_tubes_return_from_close_tube
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context);</programlisting>
<para>
Return successfully by calling dbus_g_method_return (<parameter>dbus_context</parameter>,
...). This inline function is just a type-safe wrapper for
dbus_g_method_return.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dbus_context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-tubes-return-from-get-available-tube-types" role="function"/>tp_svc_channel_type_tubes_return_from_get_available_tube_types ()</title>
<indexterm><primary>tp_svc_channel_type_tubes_return_from_get_available_tube_types</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_tubes_return_from_get_available_tube_types
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context,
                                                         const <link linkend="GArray">GArray</link> *ret);</programlisting>
<para>
Return successfully by calling dbus_g_method_return (<parameter>dbus_context</parameter>,
...). This inline function is just a type-safe wrapper for
dbus_g_method_return.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dbus_context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-tubes-return-from-get-d-bus-names" role="function"/>tp_svc_channel_type_tubes_return_from_get_d_bus_names ()</title>
<indexterm><primary>tp_svc_channel_type_tubes_return_from_get_d_bus_names</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_tubes_return_from_get_d_bus_names
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *ret);</programlisting>
<para>
Return successfully by calling dbus_g_method_return (<parameter>dbus_context</parameter>,
...). This inline function is just a type-safe wrapper for
dbus_g_method_return.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dbus_context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-tubes-return-from-get-d-bus-server-address" role="function"/>tp_svc_channel_type_tubes_return_from_get_d_bus_server_address ()</title>
<indexterm><primary>tp_svc_channel_type_tubes_return_from_get_d_bus_server_address</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_tubes_return_from_get_d_bus_server_address
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context,
                                                         const <link linkend="gchar">gchar</link> *ret);</programlisting>
<para>
Return successfully by calling dbus_g_method_return (<parameter>dbus_context</parameter>,
...). This inline function is just a type-safe wrapper for
dbus_g_method_return.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dbus_context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-tubes-return-from-list-tubes" role="function"/>tp_svc_channel_type_tubes_return_from_list_tubes ()</title>
<indexterm><primary>tp_svc_channel_type_tubes_return_from_list_tubes</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_tubes_return_from_list_tubes
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *ret);</programlisting>
<para>
Return successfully by calling dbus_g_method_return (<parameter>dbus_context</parameter>,
...). This inline function is just a type-safe wrapper for
dbus_g_method_return.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dbus_context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-type-tubes-return-from-offer-tube" role="function"/>tp_svc_channel_type_tubes_return_from_offer_tube ()</title>
<indexterm><primary>tp_svc_channel_type_tubes_return_from_offer_tube</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_type_tubes_return_from_offer_tube
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context,
                                                         <link linkend="guint">guint</link> ret);</programlisting>
<para>
Return successfully by calling dbus_g_method_return (<parameter>dbus_context</parameter>,
...). This inline function is just a type-safe wrapper for
dbus_g_method_return.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dbus_context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="TpSvcChannelInterfaceTransfer" role="struct"/>TpSvcChannelInterfaceTransfer</title>
<indexterm><primary>TpSvcChannelInterfaceTransfer</primary></indexterm><programlisting>typedef struct _TpSvcChannelInterfaceTransfer TpSvcChannelInterfaceTransfer;</programlisting>
<para>
Dummy typedef representing any implementation of this interface.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="TpSvcChannelInterfaceTransferClass" role="struct"/>TpSvcChannelInterfaceTransferClass</title>
<indexterm><primary>TpSvcChannelInterfaceTransferClass</primary></indexterm><programlisting>typedef struct _TpSvcChannelInterfaceTransferClass TpSvcChannelInterfaceTransferClass;</programlisting>
<para>
The class of TpSvcChannelInterfaceTransfer.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-interface-transfer-transfer-impl" role="function"/>tp_svc_channel_interface_transfer_transfer_impl ()</title>
<indexterm><primary>tp_svc_channel_interface_transfer_transfer_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_interface_transfer_transfer_impl)
                                                        (<link linkend="TpSvcChannelInterfaceTransfer">TpSvcChannelInterfaceTransfer</link> *self,
                                                         <link linkend="guint">guint</link> member,
                                                         <link linkend="guint">guint</link> destination,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Signature of an implementation of D-Bus method Transfer
on interface org.freedesktop.Telepathy.Channel.Interface.Transfer</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>member</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destination</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus invocation context to use to return values
          or throw an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-interface-transfer-implement-transfer" role="function"/>tp_svc_channel_interface_transfer_implement_transfer ()</title>
<indexterm><primary>tp_svc_channel_interface_transfer_implement_transfer</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_transfer_implement_transfer
                                                        (<link linkend="TpSvcChannelInterfaceTransferClass">TpSvcChannelInterfaceTransferClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-transfer-transfer-impl">tp_svc_channel_interface_transfer_transfer_impl</link> impl);</programlisting>
<para>
Register an implementation for the Transfer method in the vtable of an
implementation of this interface. To be called from the interface
init function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> A callback used to implement the Transfer method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-interface-transfer-return-from-transfer" role="function"/>tp_svc_channel_interface_transfer_return_from_transfer ()</title>
<indexterm><primary>tp_svc_channel_interface_transfer_return_from_transfer</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_transfer_return_from_transfer
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context);</programlisting>
<para>
Return successfully by calling dbus_g_method_return (<parameter>dbus_context</parameter>,
...). This inline function is just a type-safe wrapper for
dbus_g_method_return.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dbus_context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="TpSvcChannelInterfaceHold" role="struct"/>TpSvcChannelInterfaceHold</title>
<indexterm><primary>TpSvcChannelInterfaceHold</primary></indexterm><programlisting>typedef struct _TpSvcChannelInterfaceHold TpSvcChannelInterfaceHold;</programlisting>
<para>
Dummy typedef representing any implementation of this interface.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="TpSvcChannelInterfaceHoldClass" role="struct"/>TpSvcChannelInterfaceHoldClass</title>
<indexterm><primary>TpSvcChannelInterfaceHoldClass</primary></indexterm><programlisting>typedef struct _TpSvcChannelInterfaceHoldClass TpSvcChannelInterfaceHoldClass;</programlisting>
<para>
The class of TpSvcChannelInterfaceHold.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-interface-hold-get-hold-state-impl" role="function"/>tp_svc_channel_interface_hold_get_hold_state_impl ()</title>
<indexterm><primary>tp_svc_channel_interface_hold_get_hold_state_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_interface_hold_get_hold_state_impl)
                                                        (<link linkend="TpSvcChannelInterfaceHold">TpSvcChannelInterfaceHold</link> *self,
                                                         <link linkend="guint">guint</link> member,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Signature of an implementation of D-Bus method GetHoldState
on interface org.freedesktop.Telepathy.Channel.Interface.Hold</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>member</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus invocation context to use to return values
          or throw an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-interface-hold-implement-get-hold-state" role="function"/>tp_svc_channel_interface_hold_implement_get_hold_state ()</title>
<indexterm><primary>tp_svc_channel_interface_hold_implement_get_hold_state</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_hold_implement_get_hold_state
                                                        (<link linkend="TpSvcChannelInterfaceHoldClass">TpSvcChannelInterfaceHoldClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-hold-get-hold-state-impl">tp_svc_channel_interface_hold_get_hold_state_impl</link> impl);</programlisting>
<para>
Register an implementation for the GetHoldState method in the vtable of an
implementation of this interface. To be called from the interface
init function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> A callback used to implement the GetHoldState method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-interface-hold-return-from-get-hold-state" role="function"/>tp_svc_channel_interface_hold_return_from_get_hold_state ()</title>
<indexterm><primary>tp_svc_channel_interface_hold_return_from_get_hold_state</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_hold_return_from_get_hold_state
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context,
                                                         <link linkend="guint">guint</link> ret);</programlisting>
<para>
Return successfully by calling dbus_g_method_return (<parameter>dbus_context</parameter>,
...). This inline function is just a type-safe wrapper for
dbus_g_method_return.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dbus_context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-interface-hold-request-hold-impl" role="function"/>tp_svc_channel_interface_hold_request_hold_impl ()</title>
<indexterm><primary>tp_svc_channel_interface_hold_request_hold_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_interface_hold_request_hold_impl)
                                                        (<link linkend="TpSvcChannelInterfaceHold">TpSvcChannelInterfaceHold</link> *self,
                                                         <link linkend="guint">guint</link> member,
                                                         <link linkend="gboolean">gboolean</link> hold,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Signature of an implementation of D-Bus method RequestHold
on interface org.freedesktop.Telepathy.Channel.Interface.Hold</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>member</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hold</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus invocation context to use to return values
          or throw an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-interface-hold-implement-request-hold" role="function"/>tp_svc_channel_interface_hold_implement_request_hold ()</title>
<indexterm><primary>tp_svc_channel_interface_hold_implement_request_hold</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_hold_implement_request_hold
                                                        (<link linkend="TpSvcChannelInterfaceHoldClass">TpSvcChannelInterfaceHoldClass</link> *klass,
                                                         <link linkend="tp-svc-channel-interface-hold-request-hold-impl">tp_svc_channel_interface_hold_request_hold_impl</link> impl);</programlisting>
<para>
Register an implementation for the RequestHold method in the vtable of an
implementation of this interface. To be called from the interface
init function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> A callback used to implement the RequestHold method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-interface-hold-return-from-request-hold" role="function"/>tp_svc_channel_interface_hold_return_from_request_hold ()</title>
<indexterm><primary>tp_svc_channel_interface_hold_return_from_request_hold</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_hold_return_from_request_hold
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context);</programlisting>
<para>
Return successfully by calling dbus_g_method_return (<parameter>dbus_context</parameter>,
...). This inline function is just a type-safe wrapper for
dbus_g_method_return.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dbus_context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-channel-interface-hold-emit-hold-state-changed" role="function"/>tp_svc_channel_interface_hold_emit_hold_state_changed ()</title>
<indexterm><primary>tp_svc_channel_interface_hold_emit_hold_state_changed</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_interface_hold_emit_hold_state_changed
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="guint">guint</link> member,
                                                         const <link linkend="guint">guint</link> state);</programlisting>
<para>
Emit the HoldStateChanged D-Bus signal from <parameter>instance</parameter> with the given arguments.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>member</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="TpSvcConnectionInterfaceRenaming" role="struct"/>TpSvcConnectionInterfaceRenaming</title>
<indexterm><primary>TpSvcConnectionInterfaceRenaming</primary></indexterm><programlisting>typedef struct _TpSvcConnectionInterfaceRenaming TpSvcConnectionInterfaceRenaming;</programlisting>
<para>
Dummy typedef representing any implementation of this interface.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="TpSvcConnectionInterfaceRenamingClass" role="struct"/>TpSvcConnectionInterfaceRenamingClass</title>
<indexterm><primary>TpSvcConnectionInterfaceRenamingClass</primary></indexterm><programlisting>typedef struct _TpSvcConnectionInterfaceRenamingClass TpSvcConnectionInterfaceRenamingClass;</programlisting>
<para>
The class of TpSvcConnectionInterfaceRenaming.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="tp-svc-connection-interface-renaming-request-rename-impl" role="function"/>tp_svc_connection_interface_renaming_request_rename_impl ()</title>
<indexterm><primary>tp_svc_connection_interface_renaming_request_rename_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_connection_interface_renaming_request_rename_impl)
                                                        (<link linkend="TpSvcConnectionInterfaceRenaming">TpSvcConnectionInterfaceRenaming</link> *self,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Signature of an implementation of D-Bus method RequestRename
on interface org.freedesktop.Telepathy.Connection.Interface.Renaming</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus invocation context to use to return values
          or throw an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-connection-interface-renaming-implement-request-rename" role="function"/>tp_svc_connection_interface_renaming_implement_request_rename ()</title>
<indexterm><primary>tp_svc_connection_interface_renaming_implement_request_rename</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_connection_interface_renaming_implement_request_rename
                                                        (<link linkend="TpSvcConnectionInterfaceRenamingClass">TpSvcConnectionInterfaceRenamingClass</link> *klass,
                                                         <link linkend="tp-svc-connection-interface-renaming-request-rename-impl">tp_svc_connection_interface_renaming_request_rename_impl</link> impl);</programlisting>
<para>
Register an implementation for the RequestRename method in the vtable of an
implementation of this interface. To be called from the interface
init function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> A callback used to implement the RequestRename method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-connection-interface-renaming-return-from-request-rename" role="function"/>tp_svc_connection_interface_renaming_return_from_request_rename ()</title>
<indexterm><primary>tp_svc_connection_interface_renaming_return_from_request_rename</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_connection_interface_renaming_return_from_request_rename
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context);</programlisting>
<para>
Return successfully by calling dbus_g_method_return (<parameter>dbus_context</parameter>,
...). This inline function is just a type-safe wrapper for
dbus_g_method_return.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dbus_context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-connection-interface-renaming-emit-renamed" role="function"/>tp_svc_connection_interface_renaming_emit_renamed ()</title>
<indexterm><primary>tp_svc_connection_interface_renaming_emit_renamed</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_connection_interface_renaming_emit_renamed
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="guint">guint</link> original,
                                                         const <link linkend="guint">guint</link> new);</programlisting>
<para>
Emit the Renamed D-Bus signal from <parameter>instance</parameter> with the given arguments.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>original</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="TpSvcConnectionInterfacePrivacy" role="struct"/>TpSvcConnectionInterfacePrivacy</title>
<indexterm><primary>TpSvcConnectionInterfacePrivacy</primary></indexterm><programlisting>typedef struct _TpSvcConnectionInterfacePrivacy TpSvcConnectionInterfacePrivacy;</programlisting>
<para>
Dummy typedef representing any implementation of this interface.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="TpSvcConnectionInterfacePrivacyClass" role="struct"/>TpSvcConnectionInterfacePrivacyClass</title>
<indexterm><primary>TpSvcConnectionInterfacePrivacyClass</primary></indexterm><programlisting>typedef struct _TpSvcConnectionInterfacePrivacyClass TpSvcConnectionInterfacePrivacyClass;</programlisting>
<para>
The class of TpSvcConnectionInterfacePrivacy.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="tp-svc-connection-interface-privacy-get-privacy-mode-impl" role="function"/>tp_svc_connection_interface_privacy_get_privacy_mode_impl ()</title>
<indexterm><primary>tp_svc_connection_interface_privacy_get_privacy_mode_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_connection_interface_privacy_get_privacy_mode_impl)
                                                        (<link linkend="TpSvcConnectionInterfacePrivacy">TpSvcConnectionInterfacePrivacy</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Signature of an implementation of D-Bus method GetPrivacyMode
on interface org.freedesktop.Telepathy.Connection.Interface.Privacy</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus invocation context to use to return values
          or throw an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-connection-interface-privacy-implement-get-privacy-mode" role="function"/>tp_svc_connection_interface_privacy_implement_get_privacy_mode ()</title>
<indexterm><primary>tp_svc_connection_interface_privacy_implement_get_privacy_mode</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_connection_interface_privacy_implement_get_privacy_mode
                                                        (<link linkend="TpSvcConnectionInterfacePrivacyClass">TpSvcConnectionInterfacePrivacyClass</link> *klass,
                                                         <link linkend="tp-svc-connection-interface-privacy-get-privacy-mode-impl">tp_svc_connection_interface_privacy_get_privacy_mode_impl</link> impl);</programlisting>
<para>
Register an implementation for the GetPrivacyMode method in the vtable of an
implementation of this interface. To be called from the interface
init function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> A callback used to implement the GetPrivacyMode method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-connection-interface-privacy-return-from-get-privacy-mode" role="function"/>tp_svc_connection_interface_privacy_return_from_get_privacy_mode ()</title>
<indexterm><primary>tp_svc_connection_interface_privacy_return_from_get_privacy_mode</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_connection_interface_privacy_return_from_get_privacy_mode
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context,
                                                         const <link linkend="gchar">gchar</link> *ret);</programlisting>
<para>
Return successfully by calling dbus_g_method_return (<parameter>dbus_context</parameter>,
...). This inline function is just a type-safe wrapper for
dbus_g_method_return.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dbus_context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-connection-interface-privacy-get-privacy-modes-impl" role="function"/>tp_svc_connection_interface_privacy_get_privacy_modes_impl ()</title>
<indexterm><primary>tp_svc_connection_interface_privacy_get_privacy_modes_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_connection_interface_privacy_get_privacy_modes_impl)
                                                        (<link linkend="TpSvcConnectionInterfacePrivacy">TpSvcConnectionInterfacePrivacy</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Signature of an implementation of D-Bus method GetPrivacyModes
on interface org.freedesktop.Telepathy.Connection.Interface.Privacy</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus invocation context to use to return values
          or throw an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-connection-interface-privacy-implement-get-privacy-modes" role="function"/>tp_svc_connection_interface_privacy_implement_get_privacy_modes ()</title>
<indexterm><primary>tp_svc_connection_interface_privacy_implement_get_privacy_modes</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_connection_interface_privacy_implement_get_privacy_modes
                                                        (<link linkend="TpSvcConnectionInterfacePrivacyClass">TpSvcConnectionInterfacePrivacyClass</link> *klass,
                                                         <link linkend="tp-svc-connection-interface-privacy-get-privacy-modes-impl">tp_svc_connection_interface_privacy_get_privacy_modes_impl</link> impl);</programlisting>
<para>
Register an implementation for the GetPrivacyModes method in the vtable of an
implementation of this interface. To be called from the interface
init function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> A callback used to implement the GetPrivacyModes method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-connection-interface-privacy-return-from-get-privacy-modes" role="function"/>tp_svc_connection_interface_privacy_return_from_get_privacy_modes ()</title>
<indexterm><primary>tp_svc_connection_interface_privacy_return_from_get_privacy_modes</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_connection_interface_privacy_return_from_get_privacy_modes
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context,
                                                         const <link linkend="gchar">gchar</link> **ret);</programlisting>
<para>
Return successfully by calling dbus_g_method_return (<parameter>dbus_context</parameter>,
...). This inline function is just a type-safe wrapper for
dbus_g_method_return.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dbus_context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-connection-interface-privacy-set-privacy-mode-impl" role="function"/>tp_svc_connection_interface_privacy_set_privacy_mode_impl ()</title>
<indexterm><primary>tp_svc_connection_interface_privacy_set_privacy_mode_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_connection_interface_privacy_set_privacy_mode_impl)
                                                        (<link linkend="TpSvcConnectionInterfacePrivacy">TpSvcConnectionInterfacePrivacy</link> *self,
                                                         const <link linkend="gchar">gchar</link> *mode,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Signature of an implementation of D-Bus method SetPrivacyMode
on interface org.freedesktop.Telepathy.Connection.Interface.Privacy</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mode</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus invocation context to use to return values
          or throw an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-connection-interface-privacy-implement-set-privacy-mode" role="function"/>tp_svc_connection_interface_privacy_implement_set_privacy_mode ()</title>
<indexterm><primary>tp_svc_connection_interface_privacy_implement_set_privacy_mode</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_connection_interface_privacy_implement_set_privacy_mode
                                                        (<link linkend="TpSvcConnectionInterfacePrivacyClass">TpSvcConnectionInterfacePrivacyClass</link> *klass,
                                                         <link linkend="tp-svc-connection-interface-privacy-set-privacy-mode-impl">tp_svc_connection_interface_privacy_set_privacy_mode_impl</link> impl);</programlisting>
<para>
Register an implementation for the SetPrivacyMode method in the vtable of an
implementation of this interface. To be called from the interface
init function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> A callback used to implement the SetPrivacyMode method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-connection-interface-privacy-return-from-set-privacy-mode" role="function"/>tp_svc_connection_interface_privacy_return_from_set_privacy_mode ()</title>
<indexterm><primary>tp_svc_connection_interface_privacy_return_from_set_privacy_mode</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_connection_interface_privacy_return_from_set_privacy_mode
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context);</programlisting>
<para>
Return successfully by calling dbus_g_method_return (<parameter>dbus_context</parameter>,
...). This inline function is just a type-safe wrapper for
dbus_g_method_return.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dbus_context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-connection-interface-privacy-emit-privacy-mode-changed" role="function"/>tp_svc_connection_interface_privacy_emit_privacy_mode_changed ()</title>
<indexterm><primary>tp_svc_connection_interface_privacy_emit_privacy_mode_changed</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_connection_interface_privacy_emit_privacy_mode_changed
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="gchar">gchar</link> *mode);</programlisting>
<para>
Emit the PrivacyModeChanged D-Bus signal from <parameter>instance</parameter> with the given arguments.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mode</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="TpSvcConnectionInterfaceContactInfo" role="struct"/>TpSvcConnectionInterfaceContactInfo</title>
<indexterm><primary>TpSvcConnectionInterfaceContactInfo</primary></indexterm><programlisting>typedef struct _TpSvcConnectionInterfaceContactInfo TpSvcConnectionInterfaceContactInfo;</programlisting>
<para>
Dummy typedef representing any implementation of this interface.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="TpSvcConnectionInterfaceContactInfoClass" role="struct"/>TpSvcConnectionInterfaceContactInfoClass</title>
<indexterm><primary>TpSvcConnectionInterfaceContactInfoClass</primary></indexterm><programlisting>typedef struct _TpSvcConnectionInterfaceContactInfoClass TpSvcConnectionInterfaceContactInfoClass;</programlisting>
<para>
The class of TpSvcConnectionInterfaceContactInfo.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="tp-svc-connection-interface-contact-info-request-contact-info-impl" role="function"/>tp_svc_connection_interface_contact_info_request_contact_info_impl ()</title>
<indexterm><primary>tp_svc_connection_interface_contact_info_request_contact_info_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_connection_interface_contact_info_request_contact_info_impl)
                                                        (<link linkend="TpSvcConnectionInterfaceContactInfo">TpSvcConnectionInterfaceContactInfo</link> *self,
                                                         <link linkend="guint">guint</link> contact,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Signature of an implementation of D-Bus method RequestContactInfo
on interface org.freedesktop.Telepathy.Connection.Interface.ContactInfo</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>contact</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus invocation context to use to return values
          or throw an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-connection-interface-contact-info-implement-request-contact-info" role="function"/>tp_svc_connection_interface_contact_info_implement_request_contact_info ()</title>
<indexterm><primary>tp_svc_connection_interface_contact_info_implement_request_contact_info</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_connection_interface_contact_info_implement_request_contact_info
                                                        (<link linkend="TpSvcConnectionInterfaceContactInfoClass">TpSvcConnectionInterfaceContactInfoClass</link> *klass,
                                                         <link linkend="tp-svc-connection-interface-contact-info-request-contact-info-impl">tp_svc_connection_interface_contact_info_request_contact_info_impl</link> impl);</programlisting>
<para>
Register an implementation for the RequestContactInfo method in the vtable of an
implementation of this interface. To be called from the interface
init function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> A callback used to implement the RequestContactInfo method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-connection-interface-contact-info-return-from-request-contact-info" role="function"/>tp_svc_connection_interface_contact_info_return_from_request_contact_info ()</title>
<indexterm><primary>tp_svc_connection_interface_contact_info_return_from_request_contact_info</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_connection_interface_contact_info_return_from_request_contact_info
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context);</programlisting>
<para>
Return successfully by calling dbus_g_method_return (<parameter>dbus_context</parameter>,
...). This inline function is just a type-safe wrapper for
dbus_g_method_return.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dbus_context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-connection-interface-contact-info-emit-got-contact-info" role="function"/>tp_svc_connection_interface_contact_info_emit_got_contact_info ()</title>
<indexterm><primary>tp_svc_connection_interface_contact_info_emit_got_contact_info</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_connection_interface_contact_info_emit_got_contact_info
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="guint">guint</link> contact,
                                                         const <link linkend="gchar">gchar</link> *vcard);</programlisting>
<para>
Emit the GotContactInfo D-Bus signal from <parameter>instance</parameter> with the given arguments.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>contact</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>vcard</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="TpSvcConnectionInterfaceForwarding" role="struct"/>TpSvcConnectionInterfaceForwarding</title>
<indexterm><primary>TpSvcConnectionInterfaceForwarding</primary></indexterm><programlisting>typedef struct _TpSvcConnectionInterfaceForwarding TpSvcConnectionInterfaceForwarding;</programlisting>
<para>
Dummy typedef representing any implementation of this interface.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="TpSvcConnectionInterfaceForwardingClass" role="struct"/>TpSvcConnectionInterfaceForwardingClass</title>
<indexterm><primary>TpSvcConnectionInterfaceForwardingClass</primary></indexterm><programlisting>typedef struct _TpSvcConnectionInterfaceForwardingClass TpSvcConnectionInterfaceForwardingClass;</programlisting>
<para>
The class of TpSvcConnectionInterfaceForwarding.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="tp-svc-connection-interface-forwarding-get-forwarding-handle-impl" role="function"/>tp_svc_connection_interface_forwarding_get_forwarding_handle_impl ()</title>
<indexterm><primary>tp_svc_connection_interface_forwarding_get_forwarding_handle_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_connection_interface_forwarding_get_forwarding_handle_impl)
                                                        (<link linkend="TpSvcConnectionInterfaceForwarding">TpSvcConnectionInterfaceForwarding</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Signature of an implementation of D-Bus method GetForwardingHandle
on interface org.freedesktop.Telepathy.Connection.Interface.Forwarding</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus invocation context to use to return values
          or throw an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-connection-interface-forwarding-implement-get-forwarding-handle" role="function"/>tp_svc_connection_interface_forwarding_implement_get_forwarding_handle ()</title>
<indexterm><primary>tp_svc_connection_interface_forwarding_implement_get_forwarding_handle</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_connection_interface_forwarding_implement_get_forwarding_handle
                                                        (<link linkend="TpSvcConnectionInterfaceForwardingClass">TpSvcConnectionInterfaceForwardingClass</link> *klass,
                                                         <link linkend="tp-svc-connection-interface-forwarding-get-forwarding-handle-impl">tp_svc_connection_interface_forwarding_get_forwarding_handle_impl</link> impl);</programlisting>
<para>
Register an implementation for the GetForwardingHandle method in the vtable of an
implementation of this interface. To be called from the interface
init function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> A callback used to implement the GetForwardingHandle method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-connection-interface-forwarding-return-from-get-forwarding-handle" role="function"/>tp_svc_connection_interface_forwarding_return_from_get_forwarding_handle ()</title>
<indexterm><primary>tp_svc_connection_interface_forwarding_return_from_get_forwarding_handle</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_connection_interface_forwarding_return_from_get_forwarding_handle
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context,
                                                         <link linkend="guint">guint</link> ret);</programlisting>
<para>
Return successfully by calling dbus_g_method_return (<parameter>dbus_context</parameter>,
...). This inline function is just a type-safe wrapper for
dbus_g_method_return.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dbus_context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-connection-interface-forwarding-set-forwarding-handle-impl" role="function"/>tp_svc_connection_interface_forwarding_set_forwarding_handle_impl ()</title>
<indexterm><primary>tp_svc_connection_interface_forwarding_set_forwarding_handle_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_connection_interface_forwarding_set_forwarding_handle_impl)
                                                        (<link linkend="TpSvcConnectionInterfaceForwarding">TpSvcConnectionInterfaceForwarding</link> *self,
                                                         <link linkend="guint">guint</link> forward_to,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Signature of an implementation of D-Bus method SetForwardingHandle
on interface org.freedesktop.Telepathy.Connection.Interface.Forwarding</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>forward_to</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus invocation context to use to return values
          or throw an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-connection-interface-forwarding-implement-set-forwarding-handle" role="function"/>tp_svc_connection_interface_forwarding_implement_set_forwarding_handle ()</title>
<indexterm><primary>tp_svc_connection_interface_forwarding_implement_set_forwarding_handle</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_connection_interface_forwarding_implement_set_forwarding_handle
                                                        (<link linkend="TpSvcConnectionInterfaceForwardingClass">TpSvcConnectionInterfaceForwardingClass</link> *klass,
                                                         <link linkend="tp-svc-connection-interface-forwarding-set-forwarding-handle-impl">tp_svc_connection_interface_forwarding_set_forwarding_handle_impl</link> impl);</programlisting>
<para>
Register an implementation for the SetForwardingHandle method in the vtable of an
implementation of this interface. To be called from the interface
init function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&nbsp;:</term>
<listitem><simpara> A callback used to implement the SetForwardingHandle method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-connection-interface-forwarding-return-from-set-forwarding-handle" role="function"/>tp_svc_connection_interface_forwarding_return_from_set_forwarding_handle ()</title>
<indexterm><primary>tp_svc_connection_interface_forwarding_return_from_set_forwarding_handle</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_connection_interface_forwarding_return_from_set_forwarding_handle
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *dbus_context);</programlisting>
<para>
Return successfully by calling dbus_g_method_return (<parameter>dbus_context</parameter>,
...). This inline function is just a type-safe wrapper for
dbus_g_method_return.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dbus_context</parameter>&nbsp;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-svc-connection-interface-forwarding-emit-forwarding-changed" role="function"/>tp_svc_connection_interface_forwarding_emit_forwarding_changed ()</title>
<indexterm><primary>tp_svc_connection_interface_forwarding_emit_forwarding_changed</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_connection_interface_forwarding_emit_forwarding_changed
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="guint">guint</link> forward_to);</programlisting>
<para>
Emit the ForwardingChanged D-Bus signal from <parameter>instance</parameter> with the given arguments.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>forward_to</parameter>&nbsp;:</term>
<listitem><simpara> FIXME: document args in genginterface
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
