<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-TpTextMixin">
<refmeta>
<refentrytitle role="top_of_page" id="telepathy-glib-TpTextMixin.top_of_page">TpTextMixin</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>TpTextMixin</refname>
<refpurpose>a mixin implementation of the text channel type</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv id="telepathy-glib-TpTextMixin.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;telepathy-glib/text-mixin.h&gt;

                    <link linkend="TpTextMixin">TpTextMixin</link>;
                    <link linkend="TpTextMixinClass">TpTextMixinClass</link>;
<link linkend="GQuark">GQuark</link>              <link linkend="tp-text-mixin-class-get-offset-quark">tp_text_mixin_class_get_offset_quark</link>
                                                        (void);
<link linkend="GQuark">GQuark</link>              <link linkend="tp-text-mixin-get-offset-quark">tp_text_mixin_get_offset_quark</link>      (void);
<link linkend="void">void</link>                <link linkend="tp-text-mixin-class-init">tp_text_mixin_class_init</link>            (<link linkend="GObjectClass">GObjectClass</link> *obj_cls,
                                                         <link linkend="glong">glong</link> offset);
<link linkend="void">void</link>                <link linkend="tp-text-mixin-init">tp_text_mixin_init</link>                  (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="glong">glong</link> offset,
                                                         <link linkend="TpHandleRepoIface">TpHandleRepoIface</link> *contacts_repo);
<link linkend="void">void</link>                <link linkend="tp-text-mixin-set-message-types">tp_text_mixin_set_message_types</link>     (<link linkend="GObject">GObject</link> *obj,
                                                         ...);
<link linkend="void">void</link>                <link linkend="tp-text-mixin-finalize">tp_text_mixin_finalize</link>              (<link linkend="GObject">GObject</link> *obj);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-text-mixin-receive">tp_text_mixin_receive</link>               (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="TpChannelTextMessageType">TpChannelTextMessageType</link> type,
                                                         <link linkend="TpHandle">TpHandle</link> sender,
                                                         <link linkend="time-t">time_t</link> timestamp,
                                                         const <link linkend="char">char</link> *text);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-text-mixin-acknowledge-pending-messages">tp_text_mixin_acknowledge_pending_messages</link>
                                                        (<link linkend="GObject">GObject</link> *obj,
                                                         const <link linkend="GArray">GArray</link> *ids,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-text-mixin-list-pending-messages">tp_text_mixin_list_pending_messages</link> (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="gboolean">gboolean</link> clear,
                                                         <link linkend="GPtrArray">GPtrArray</link> **ret,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-text-mixin-get-message-types">tp_text_mixin_get_message_types</link>     (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="GArray">GArray</link> **ret,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                <link linkend="tp-text-mixin-clear">tp_text_mixin_clear</link>                 (<link linkend="GObject">GObject</link> *obj);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-text-mixin-has-pending-messages">tp_text_mixin_has_pending_messages</link>  (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="TpHandle">TpHandle</link> *first_sender);
<link linkend="void">void</link>                <link linkend="tp-text-mixin-iface-init">tp_text_mixin_iface_init</link>            (<link linkend="gpointer">gpointer</link> g_iface,
                                                         <link linkend="gpointer">gpointer</link> iface_data);
</synopsis>
</refsynopsisdiv>









<refsect1 id="telepathy-glib-TpTextMixin.description" role="desc">
<title role="desc.title">Description</title>
<para>
This mixin can be added to a channel GObject class to implement the
text channel type in a general way. It implements the pending message
queue and GetMessageTypes, so the implementation should only need to
implement Send.
</para>
<para>
To use the text mixin, include a <link linkend="TpTextMixinClass"><type>TpTextMixinClass</type></link> somewhere in your
class structure and a <link linkend="TpTextMixin"><type>TpTextMixin</type></link> somewhere in your instance structure,
and call <link linkend="tp-text-mixin-class-init"><function>tp_text_mixin_class_init()</function></link> from your class_init function,
<link linkend="tp-text-mixin-init"><function>tp_text_mixin_init()</function></link> from your init function or constructor, and
<link linkend="tp-text-mixin-finalize"><function>tp_text_mixin_finalize()</function></link> from your dispose or finalize function.
</para>
<para>
To use the text mixin as the implementation of
<link linkend="TpSvcTextInterface"><type>TpSvcTextInterface</type></link>, in the function you pass to G_IMPLEMENT_INTERFACE,
you should first call <link linkend="tp-text-mixin-iface-init"><function>tp_text_mixin_iface_init()</function></link>, then call
<link linkend="tp-svc-channel-type-text-implement-send"><function>tp_svc_channel_type_text_implement_send()</function></link> to register your implementation
of the Send method.</para>
<para>

</para>
</refsect1>

<refsect1 id="telepathy-glib-TpTextMixin.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="TpTextMixin" role="struct">
<title>TpTextMixin</title>
<indexterm zone="TpTextMixin"><primary>TpTextMixin</primary></indexterm><programlisting>typedef struct {
} TpTextMixin;
</programlisting>
<para>
Structure to be included in the instance structure of objects that
use this mixin. Initialize it with <link linkend="tp-text-mixin-init"><function>tp_text_mixin_init()</function></link>.
</para>
<para>
There are no public fields.</para>
<para>

</para></refsect2>
<refsect2 id="TpTextMixinClass" role="struct">
<title>TpTextMixinClass</title>
<indexterm zone="TpTextMixinClass"><primary>TpTextMixinClass</primary></indexterm><programlisting>typedef struct {
} TpTextMixinClass;
</programlisting>
<para>
Structure to be included in the class structure of objects that
use this mixin. Initialize it with <link linkend="tp-text-mixin-class-init"><function>tp_text_mixin_class_init()</function></link>.
</para>
<para>
There are no public fields.</para>
<para>

</para></refsect2>
<refsect2 id="tp-text-mixin-class-get-offset-quark" role="function">
<title>tp_text_mixin_class_get_offset_quark ()</title>
<indexterm zone="tp-text-mixin-class-get-offset-quark"><primary>tp_text_mixin_class_get_offset_quark</primary></indexterm><programlisting><link linkend="GQuark">GQuark</link>              tp_text_mixin_class_get_offset_quark
                                                        (void);</programlisting>
<para>
<!--no documentation beyond Returns: needed--></para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the quark used for storing mixin offset on a GObjectClass
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-text-mixin-get-offset-quark" role="function">
<title>tp_text_mixin_get_offset_quark ()</title>
<indexterm zone="tp-text-mixin-get-offset-quark"><primary>tp_text_mixin_get_offset_quark</primary></indexterm><programlisting><link linkend="GQuark">GQuark</link>              tp_text_mixin_get_offset_quark      (void);</programlisting>
<para>
<!--no documentation beyond Returns: needed--></para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the quark used for storing mixin offset on a GObject
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-text-mixin-class-init" role="function">
<title>tp_text_mixin_class_init ()</title>
<indexterm zone="tp-text-mixin-class-init"><primary>tp_text_mixin_class_init</primary></indexterm><programlisting><link linkend="void">void</link>                tp_text_mixin_class_init            (<link linkend="GObjectClass">GObjectClass</link> *obj_cls,
                                                         <link linkend="glong">glong</link> offset);</programlisting>
<para>
Initialize the text mixin. Should be called from the implementation's
class_init function like so:
</para>
<para>
<informalexample><programlisting>
tp_text_mixin_class_init ((GObjectClass *)klass,
                          G_STRUCT_OFFSET (SomeObjectClass, text_mixin));
</programlisting></informalexample></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj_cls</parameter>&nbsp;:</term>
<listitem><simpara> The class of the implementation that uses this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara> The byte offset of the TpTextMixinClass within the class structure
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-text-mixin-init" role="function">
<title>tp_text_mixin_init ()</title>
<indexterm zone="tp-text-mixin-init"><primary>tp_text_mixin_init</primary></indexterm><programlisting><link linkend="void">void</link>                tp_text_mixin_init                  (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="glong">glong</link> offset,
                                                         <link linkend="TpHandleRepoIface">TpHandleRepoIface</link> *contacts_repo);</programlisting>
<para>
Initialize the text mixin. Should be called from the implementation's
instance init function like so:
</para>
<para>
<informalexample><programlisting>
tp_text_mixin_init ((GObject *)self,
                    G_STRUCT_OFFSET (SomeObject, text_mixin),
                    self->contact_repo);
</programlisting></informalexample></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An instance of the implementation that uses this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara> The byte offset of the TpTextMixin within the object structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>contacts_repo</parameter>&nbsp;:</term>
<listitem><simpara> The connection's <link linkend="TP-HANDLE-TYPE-CONTACT:CAPS"><literal>TP_HANDLE_TYPE_CONTACT</literal></link> repository
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-text-mixin-set-message-types" role="function">
<title>tp_text_mixin_set_message_types ()</title>
<indexterm zone="tp-text-mixin-set-message-types"><primary>tp_text_mixin_set_message_types</primary></indexterm><programlisting><link linkend="void">void</link>                tp_text_mixin_set_message_types     (<link linkend="GObject">GObject</link> *obj,
                                                         ...);</programlisting>
<para>
Set the supported message types.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object with this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara> guints representing members of <link linkend="TpChannelTextMessageType"><type>TpChannelTextMessageType</type></link>, terminated
 by <link linkend="G-MAXUINT:CAPS"><literal>G_MAXUINT</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-text-mixin-finalize" role="function">
<title>tp_text_mixin_finalize ()</title>
<indexterm zone="tp-text-mixin-finalize"><primary>tp_text_mixin_finalize</primary></indexterm><programlisting><link linkend="void">void</link>                tp_text_mixin_finalize              (<link linkend="GObject">GObject</link> *obj);</programlisting>
<para>
Free resources held by the text mixin.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object with this mixin.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-text-mixin-receive" role="function">
<title>tp_text_mixin_receive ()</title>
<indexterm zone="tp-text-mixin-receive"><primary>tp_text_mixin_receive</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_text_mixin_receive               (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="TpChannelTextMessageType">TpChannelTextMessageType</link> type,
                                                         <link linkend="TpHandle">TpHandle</link> sender,
                                                         <link linkend="time-t">time_t</link> timestamp,
                                                         const <link linkend="char">char</link> *text);</programlisting>
<para>
Add a message to the pending queue and emit Received.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object with the text mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> The type of message received from the underlying protocol
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sender</parameter>&nbsp;:</term>
<listitem><simpara> The handle of the message sender
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timestamp</parameter>&nbsp;:</term>
<listitem><simpara> The time the message was received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> The text of the message
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> on success; <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the message was lost due to the memory
limit.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-text-mixin-acknowledge-pending-messages" role="function">
<title>tp_text_mixin_acknowledge_pending_messages ()</title>
<indexterm zone="tp-text-mixin-acknowledge-pending-messages"><primary>tp_text_mixin_acknowledge_pending_messages</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_text_mixin_acknowledge_pending_messages
                                                        (<link linkend="GObject">GObject</link> *obj,
                                                         const <link linkend="GArray">GArray</link> *ids,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Implements D-Bus method AcknowledgePendingMessages
on interface org.freedesktop.Telepathy.Channel.Type.Text</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object with this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ids</parameter>&nbsp;:</term>
<listitem><simpara> An array of guint representing message IDs
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> Used to return a pointer to a GError detailing any error
        that occurred, D-Bus will throw the error only if this
        function returns false.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE if successful, FALSE if an error was thrown.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-text-mixin-list-pending-messages" role="function">
<title>tp_text_mixin_list_pending_messages ()</title>
<indexterm zone="tp-text-mixin-list-pending-messages"><primary>tp_text_mixin_list_pending_messages</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_text_mixin_list_pending_messages (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="gboolean">gboolean</link> clear,
                                                         <link linkend="GPtrArray">GPtrArray</link> **ret,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Implements D-Bus method ListPendingMessages
on interface org.freedesktop.Telepathy.Channel.Type.Text</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object with this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>clear</parameter>&nbsp;:</term>
<listitem><simpara> If <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, delete the pending messages from the queue
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&nbsp;:</term>
<listitem><simpara> Used to return a pointer to a new GPtrArray of D-Bus structures
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> Used to return a pointer to a GError detailing any error
        that occurred, D-Bus will throw the error only if this
        function returns false.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE if successful, FALSE if an error was thrown.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-text-mixin-get-message-types" role="function">
<title>tp_text_mixin_get_message_types ()</title>
<indexterm zone="tp-text-mixin-get-message-types"><primary>tp_text_mixin_get_message_types</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_text_mixin_get_message_types     (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="GArray">GArray</link> **ret,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Return a newly allocated GArray of guint, representing message types
taken from <link linkend="TpChannelTextMessageType"><type>TpChannelTextMessageType</type></link>, through <parameter>ret</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object with this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&nbsp;:</term>
<listitem><simpara> A pointer to where a GArray of guint will be placed on success
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> A pointer to where an error will be placed on failure
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> on success
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-text-mixin-clear" role="function">
<title>tp_text_mixin_clear ()</title>
<indexterm zone="tp-text-mixin-clear"><primary>tp_text_mixin_clear</primary></indexterm><programlisting><link linkend="void">void</link>                tp_text_mixin_clear                 (<link linkend="GObject">GObject</link> *obj);</programlisting>
<para>
Clear the pending message queue, deleting all messages.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object with this mixin
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-text-mixin-has-pending-messages" role="function">
<title>tp_text_mixin_has_pending_messages ()</title>
<indexterm zone="tp-text-mixin-has-pending-messages"><primary>tp_text_mixin_has_pending_messages</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_text_mixin_has_pending_messages  (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="TpHandle">TpHandle</link> *first_sender);</programlisting>
<para>
Return whether the channel <parameter>obj</parameter> has unacknowledged messages. If so, and
<parameter>first_sender</parameter> is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, the handle of the sender of the first message
is placed in it, without incrementing the handle's reference count.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> An object with this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_sender</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to store the sender of the oldest pending
 message
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if there are pending messages
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-text-mixin-iface-init" role="function">
<title>tp_text_mixin_iface_init ()</title>
<indexterm zone="tp-text-mixin-iface-init"><primary>tp_text_mixin_iface_init</primary></indexterm><programlisting><link linkend="void">void</link>                tp_text_mixin_iface_init            (<link linkend="gpointer">gpointer</link> g_iface,
                                                         <link linkend="gpointer">gpointer</link> iface_data);</programlisting>
<para>
Fill in this mixin's AcknowledgePendingMessages, GetMessageTypes and
ListPendingMessages implementations in the given interface vtable.
In addition to calling this function during interface initialization, the
implementor is expected to call <link linkend="tp-svc-channel-type-text-implement-send"><function>tp_svc_channel_type_text_implement_send()</function></link>,
providing a Send implementation.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>g_iface</parameter>&nbsp;:</term>
<listitem><simpara> A pointer to the <link linkend="TpSvcChannelTypeTextClass"><type>TpSvcChannelTypeTextClass</type></link> in an object class
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iface_data</parameter>&nbsp;:</term>
<listitem><simpara> Ignored
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1 id="telepathy-glib-TpTextMixin.see-also">
<title>See Also</title>
<link linkend="TpSvcChannelTypeText"><type>TpSvcChannelTypeText</type></link>
</refsect1>

</refentry>
