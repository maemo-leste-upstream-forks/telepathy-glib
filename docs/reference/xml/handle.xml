<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-handle">
<refmeta>
<refentrytitle role="top_of_page" id="telepathy-glib-handle.top_of_page">TpHandle</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>TpHandle</refname>
<refpurpose>type representing handles</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv id="telepathy-glib-handle.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;telepathy-glib/handle.h&gt;

typedef             <link linkend="TpHandle">TpHandle</link>;
#define             <link linkend="TP-TYPE-HANDLE:CAPS">TP_TYPE_HANDLE</link>
#define             <link linkend="TP-UNKNOWN-HANDLE-TYPE:CAPS">TP_UNKNOWN_HANDLE_TYPE</link>
<link linkend="gboolean">gboolean</link>            <link linkend="tp-handle-type-is-valid">tp_handle_type_is_valid</link>             (<link linkend="TpHandleType">TpHandleType</link> type,
                                                         <link linkend="GError">GError</link> **error);
const <link linkend="gchar">gchar</link>*        <link linkend="tp-handle-type-to-string">tp_handle_type_to_string</link>            (<link linkend="TpHandleType">TpHandleType</link> type);
</synopsis>
</refsynopsisdiv>









<refsect1 id="telepathy-glib-handle.description" role="desc">
<title role="desc.title">Description</title>
<para>
The TpHandle type represents a Telepathy handle.</para>
<para>

</para>
</refsect1>

<refsect1 id="telepathy-glib-handle.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="TpHandle" role="typedef">
<title>TpHandle</title>
<indexterm zone="TpHandle"><primary>TpHandle</primary></indexterm><programlisting>typedef guint TpHandle;
</programlisting>
<para>
Type representing Telepathy handles within telepathy-glib.
</para>
<para>
This is guint despite the wire protocol having 32-bit integers, because
dbus-glib expects GArrays of guint and so on. If the dbus-glib ABI changes
in future, telepathy-glib is likely to have a matching ABI change.</para>
<para>

</para></refsect2>
<refsect2 id="TP-TYPE-HANDLE:CAPS" role="macro">
<title>TP_TYPE_HANDLE</title>
<indexterm zone="TP-TYPE-HANDLE:CAPS"><primary>TP_TYPE_HANDLE</primary></indexterm><programlisting>#define TP_TYPE_HANDLE G_TYPE_UINT
</programlisting>
<para>
The GType of a TpHandle, currently G_TYPE_UINT.
</para>
<para>
This won't change unless in an ABI-incompatible version of telepathy-glib.</para>
<para>

</para></refsect2>
<refsect2 id="TP-UNKNOWN-HANDLE-TYPE:CAPS" role="macro" condition="since:0.7.0">
<title>TP_UNKNOWN_HANDLE_TYPE</title>
<indexterm zone="TP-UNKNOWN-HANDLE-TYPE:CAPS" role="0.7.0"><primary>TP_UNKNOWN_HANDLE_TYPE</primary></indexterm><programlisting>#define TP_UNKNOWN_HANDLE_TYPE ((TpHandleType) -1)
</programlisting>
<para>
An invalid handle type (-1 cast to TpHandleType) used to represent an
unknown handle type.</para>
<para>

</para><para role="since">Since  0.7.0
</para></refsect2>
<refsect2 id="tp-handle-type-is-valid" role="function">
<title>tp_handle_type_is_valid ()</title>
<indexterm zone="tp-handle-type-is-valid"><primary>tp_handle_type_is_valid</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_handle_type_is_valid             (<link linkend="TpHandleType">TpHandleType</link> type,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
If the given handle type is valid, return <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>. If not, set <parameter>error</parameter>
and return <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> A handle type, valid or not, to be checked
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> Set if the handle type is invalid
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the handle type is valid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-handle-type-to-string" role="function">
<title>tp_handle_type_to_string ()</title>
<indexterm zone="tp-handle-type-to-string"><primary>tp_handle_type_to_string</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link>*        tp_handle_type_to_string            (<link linkend="TpHandleType">TpHandleType</link> type);</programlisting>
<para>
<!----></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> A handle type, which need not be valid
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a human-readable string describing the handle type, e.g. "contact".
 For invalid handle types, returns "(no handle)" for 0 or
 "(invalid handle type)" for others.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1 id="telepathy-glib-handle.see-also">
<title>See Also</title>
TpHandleRepoIface
</refsect1>

</refentry>
