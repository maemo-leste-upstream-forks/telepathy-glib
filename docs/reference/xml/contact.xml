<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-contact">
<refmeta>
<refentrytitle role="top_of_page" id="telepathy-glib-contact.top_of_page">TpContact</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>TpContact</refname>
<refpurpose>object representing a contact</refpurpose>
</refnamediv>

<refsynopsisdiv id="telepathy-glib-contact.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>
<anchor id="TpContact"/>
<synopsis>

#include &lt;telepathy-glib/contact.h&gt;

                    <link linkend="TpContact-struct">TpContact</link>;
enum                <link linkend="TpContactFeature">TpContactFeature</link>;
<link linkend="void">void</link>                (<link linkend="TpConnectionContactsByHandleCb">*TpConnectionContactsByHandleCb</link>)   (<link linkend="TpConnection">TpConnection</link> *connection,
                                                         <link linkend="guint">guint</link> n_contacts,
                                                         <link linkend="TpContact">TpContact</link> * const *contacts,
                                                         <link linkend="guint">guint</link> n_failed,
                                                         const <link linkend="TpHandle">TpHandle</link> *failed,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                <link linkend="tp-connection-get-contacts-by-handle">tp_connection_get_contacts_by_handle</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *self,
                                                         <link linkend="guint">guint</link> n_handles,
                                                         const <link linkend="TpHandle">TpHandle</link> *handles,
                                                         <link linkend="guint">guint</link> n_features,
                                                         const <link linkend="TpContactFeature">TpContactFeature</link> *features,
                                                         <link linkend="TpConnectionContactsByHandleCb">TpConnectionContactsByHandleCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="TpConnectionContactsByIdCb">*TpConnectionContactsByIdCb</link>)       (<link linkend="TpConnection">TpConnection</link> *connection,
                                                         <link linkend="guint">guint</link> n_contacts,
                                                         <link linkend="TpContact">TpContact</link> * const *contacts,
                                                         const <link linkend="gchar">gchar</link> * const *requested_ids,
                                                         <link linkend="GHashTable">GHashTable</link> *failed_id_errors,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                <link linkend="tp-connection-get-contacts-by-id">tp_connection_get_contacts_by_id</link>    (<link linkend="TpConnection">TpConnection</link> *self,
                                                         <link linkend="guint">guint</link> n_ids,
                                                         const <link linkend="gchar">gchar</link> * const *ids,
                                                         <link linkend="guint">guint</link> n_features,
                                                         const <link linkend="TpContactFeature">TpContactFeature</link> *features,
                                                         <link linkend="TpConnectionContactsByIdCb">TpConnectionContactsByIdCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="TpConnectionUpgradeContactsCb">*TpConnectionUpgradeContactsCb</link>)    (<link linkend="TpConnection">TpConnection</link> *connection,
                                                         <link linkend="guint">guint</link> n_contacts,
                                                         <link linkend="TpContact">TpContact</link> * const *contacts,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                <link linkend="tp-connection-upgrade-contacts">tp_connection_upgrade_contacts</link>      (<link linkend="TpConnection">TpConnection</link> *self,
                                                         <link linkend="guint">guint</link> n_contacts,
                                                         <link linkend="TpContact">TpContact</link> * const *contacts,
                                                         <link linkend="guint">guint</link> n_features,
                                                         const <link linkend="TpContactFeature">TpContactFeature</link> *features,
                                                         <link linkend="TpConnectionUpgradeContactsCb">TpConnectionUpgradeContactsCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
const <link linkend="gchar">gchar</link> *       <link linkend="tp-contact-get-alias">tp_contact_get_alias</link>                (<link linkend="TpContact">TpContact</link> *self);
const <link linkend="gchar">gchar</link> *       <link linkend="tp-contact-get-avatar-token">tp_contact_get_avatar_token</link>         (<link linkend="TpContact">TpContact</link> *self);
<link linkend="TpConnection">TpConnection</link> *      <link linkend="tp-contact-get-connection">tp_contact_get_connection</link>           (<link linkend="TpContact">TpContact</link> *self);
<link linkend="TpHandle">TpHandle</link>            <link linkend="tp-contact-get-handle">tp_contact_get_handle</link>               (<link linkend="TpContact">TpContact</link> *self);
const <link linkend="gchar">gchar</link> *       <link linkend="tp-contact-get-identifier">tp_contact_get_identifier</link>           (<link linkend="TpContact">TpContact</link> *self);
const <link linkend="gchar">gchar</link> *       <link linkend="tp-contact-get-presence-message">tp_contact_get_presence_message</link>     (<link linkend="TpContact">TpContact</link> *self);
const <link linkend="gchar">gchar</link> *       <link linkend="tp-contact-get-presence-status">tp_contact_get_presence_status</link>      (<link linkend="TpContact">TpContact</link> *self);
<link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link>  <link linkend="tp-contact-get-presence-type">tp_contact_get_presence_type</link>  (<link linkend="TpContact">TpContact</link> *self);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-contact-has-feature">tp_contact_has_feature</link>              (<link linkend="TpContact">TpContact</link> *self,
                                                         <link linkend="TpContactFeature">TpContactFeature</link> feature);
</synopsis>
</refsynopsisdiv>

<refsect1 id="telepathy-glib-contact.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----TpContact
</synopsis>
</refsect1>





<refsect1 id="telepathy-glib-contact.properties" role="properties">
<title role="properties.title">Properties</title>
<synopsis>
  &quot;<link linkend="TpContact--alias">alias</link>&quot;                    <link linkend="gchar">gchar</link>*                : Read
  &quot;<link linkend="TpContact--avatar-token">avatar-token</link>&quot;             <link linkend="gchar">gchar</link>*                : Read
  &quot;<link linkend="TpContact--connection">connection</link>&quot;               <link linkend="TpConnection">TpConnection</link>*         : Read
  &quot;<link linkend="TpContact--handle">handle</link>&quot;                   <link linkend="guint">guint</link>                 : Read
  &quot;<link linkend="TpContact--identifier">identifier</link>&quot;               <link linkend="gchar">gchar</link>*                : Read
  &quot;<link linkend="TpContact--presence-message">presence-message</link>&quot;         <link linkend="gchar">gchar</link>*                : Read
  &quot;<link linkend="TpContact--presence-status">presence-status</link>&quot;          <link linkend="gchar">gchar</link>*                : Read
  &quot;<link linkend="TpContact--presence-type">presence-type</link>&quot;            <link linkend="guint">guint</link>                 : Read
</synopsis>
</refsect1>



<refsect1 id="telepathy-glib-contact.description" role="desc">
<title role="desc.title">Description</title>
<para>
<link linkend="TpContact"><type>TpContact</type></link> objects represent the contacts on a particular <link linkend="TpConnection"><type>TpConnection</type></link>.</para>
<para>
</para>
</refsect1>

<refsect1 id="telepathy-glib-contact.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="TpContact-struct" role="struct">
<title>TpContact</title>
<indexterm zone="TpContact-struct" role="0.7.18"><primary sortas="TpContact">TpContact</primary></indexterm><programlisting>typedef struct _TpContact TpContact;</programlisting>
<para>
An object representing a contact on a <link linkend="TpConnection"><type>TpConnection</type></link>.
</para>
<para>
Contact objects support tracking a number of attributes of contacts, as
described by the <link linkend="TpContactFeature"><type>TpContactFeature</type></link> flags. Features can be specified when
instantiating contact objects (with <link linkend="tp-connection-get-contacts-by-id"><function>tp_connection_get_contacts_by_id()</function></link> or
<link linkend="tp-connection-get-contacts-by-handle"><function>tp_connection_get_contacts_by_handle()</function></link>), or added to an existing contact
object with <link linkend="tp-connection-upgrade-contacts"><function>tp_connection_upgrade_contacts()</function></link>. For example, a client wishing
to keep track of a contact's alias would set <link linkend="TP-CONTACT-FEATURE-ALIAS--CAPS"><type>TP_CONTACT_FEATURE_ALIAS</type></link>, and
then listen for the "notify::alias" signal, emitted whenever the
<link linkend="TpContact--alias"><type>"alias"</type></link> property changes.
</para>
<para>
Note that releasing a <link linkend="TpContact"><type>TpContact</type></link> object might release handle references
held by calling <link linkend="tp-cli-connection-call-request-handles"><function>tp_cli_connection_call_request_handles()</function></link>,
<link linkend="tp-cli-connection-run-request-handles"><function>tp_cli_connection_run_request_handles()</function></link>,
<link linkend="tp-cli-connection-call-hold-handles"><function>tp_cli_connection_call_hold_handles()</function></link>,
<link linkend="tp-cli-connection-run-hold-handles"><function>tp_cli_connection_run_hold_handles()</function></link>,
<link linkend="tp-cli-connection-interface-contacts-call-get-contact-attributes"><function>tp_cli_connection_interface_contacts_call_get_contact_attributes()</function></link> or
<link linkend="tp-cli-connection-interface-contacts-run-get-contact-attributes"><function>tp_cli_connection_interface_contacts_run_get_contact_attributes()</function></link> directly.
Those functions should be avoided in favour of using <link linkend="TpContact"><type>TpContact</type></link>,
<link linkend="tp-connection-hold-handles"><function>tp_connection_hold_handles()</function></link>, <link linkend="tp-connection-request-handles"><function>tp_connection_request_handles()</function></link> and
<link linkend="tp-connection-get-contact-attributes"><function>tp_connection_get_contact_attributes()</function></link>.</para>
<para>
</para><para role="since">Since 0.7.18</para></refsect2>
<refsect2 id="TpContactFeature" role="enum" condition="since:0.7.18">
<title>enum TpContactFeature</title>
<indexterm zone="TpContactFeature" role="0.7.18"><primary sortas="TpContactFeature">TpContactFeature</primary></indexterm><programlisting>typedef enum {
    TP_CONTACT_FEATURE_ALIAS,
    TP_CONTACT_FEATURE_AVATAR_TOKEN,
    TP_CONTACT_FEATURE_PRESENCE,
    NUM_TP_CONTACT_FEATURES
} TpContactFeature;
</programlisting>
<para>
Enumeration representing the features a <link linkend="TpContact"><type>TpContact</type></link> can optionally support.
When requesting a <link linkend="TpContact"><type>TpContact</type></link>, library users specify the desired features;
the <link linkend="TpContact"><type>TpContact</type></link> code will only initialize state for those features, to
avoid unwanted D-Bus round-trips and signal connections.</para>
<para>
</para><variablelist role="enum">
<varlistentry id="TP-CONTACT-FEATURE-ALIAS--CAPS" role="constant">
<term><literal>TP_CONTACT_FEATURE_ALIAS</literal></term>
<listitem><simpara> <link linkend="TpContact--alias"><type>"alias"</type></link>
</simpara></listitem>
</varlistentry>
<varlistentry id="TP-CONTACT-FEATURE-AVATAR-TOKEN--CAPS" role="constant">
<term><literal>TP_CONTACT_FEATURE_AVATAR_TOKEN</literal></term>
<listitem><simpara> <link linkend="TpContact--avatar-token"><type>"avatar-token"</type></link>
</simpara></listitem>
</varlistentry>
<varlistentry id="TP-CONTACT-FEATURE-PRESENCE--CAPS" role="constant">
<term><literal>TP_CONTACT_FEATURE_PRESENCE</literal></term>
<listitem><simpara> <link linkend="TpContact--presence-type"><type>"presence-type"</type></link>,
 <link linkend="TpContact--presence-status"><type>"presence-status"</type></link> and <link linkend="TpContact--presence-message"><type>"presence-message"</type></link>
</simpara></listitem>
</varlistentry>
<varlistentry id="NUM-TP-CONTACT-FEATURES--CAPS" role="constant">
<term><literal>NUM_TP_CONTACT_FEATURES</literal></term>
<listitem><simpara> 1 higher than the highest TpContactFeature
 supported by this version of telepathy-glib
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since 0.7.18</para></refsect2>
<refsect2 id="TpConnectionContactsByHandleCb" role="function" condition="since:0.7.18">
<title>TpConnectionContactsByHandleCb ()</title>
<indexterm zone="TpConnectionContactsByHandleCb" role="0.7.18"><primary sortas="TpConnectionContactsByHandleCb">TpConnectionContactsByHandleCb</primary></indexterm><programlisting><link linkend="void">void</link>                (*TpConnectionContactsByHandleCb)   (<link linkend="TpConnection">TpConnection</link> *connection,
                                                         <link linkend="guint">guint</link> n_contacts,
                                                         <link linkend="TpContact">TpContact</link> * const *contacts,
                                                         <link linkend="guint">guint</link> n_failed,
                                                         const <link linkend="TpHandle">TpHandle</link> *failed,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of a callback used to receive the result of
<link linkend="tp-connection-get-contacts-by-handle"><function>tp_connection_get_contacts_by_handle()</function></link>.
</para>
<para>
If an unrecoverable error occurs (for instance, if <parameter>connection</parameter>
becomes disconnected) the whole operation fails, and no contacts or
invalid handles are returned.
</para>
<para>
If some or even all of the <parameter>handles</parameter> passed to
<link linkend="tp-connection-get-contacts-by-handle"><function>tp_connection_get_contacts_by_handle()</function></link> were not valid, this is not
considered to be a failure. <parameter>error</parameter> will be <link linkend="NULL--CAPS"><literal>NULL</literal></link> in this situation,
<parameter>contacts</parameter> will contain contact objects for those handles that were
valid (possibly none of them), and <parameter>invalid</parameter> will contain the handles
that were not valid.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>connection</parameter>&#160;:</term>
<listitem><simpara> The connection
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_contacts</parameter>&#160;:</term>
<listitem><simpara> The number of TpContact objects successfully created
 (one per valid handle), or 0 on unrecoverable errors
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>contacts</parameter>&#160;:</term>
<listitem><simpara> An array of <parameter>n_contacts</parameter> TpContact objects (this callback is
 not given a reference to any of these objects, and must call <link linkend="g-object-ref"><function>g_object_ref()</function></link>
 on any that it will keep), or <link linkend="NULL--CAPS"><literal>NULL</literal></link> on unrecoverable errors
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_failed</parameter>&#160;:</term>
<listitem><simpara> The number of invalid handles that were passed to
 <link linkend="tp-connection-get-contacts-by-handle"><function>tp_connection_get_contacts_by_handle()</function></link> (or on unrecoverable errors,
 the total number of handles that were given)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>failed</parameter>&#160;:</term>
<listitem><simpara> An array of <parameter>n_failed</parameter> handles that were passed to
 <link linkend="tp-connection-get-contacts-by-handle"><function>tp_connection_get_contacts_by_handle()</function></link> but turned out to be invalid
 (or on unrecoverable errors, all the handles that were given)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an unrecoverable error that caused everything
 to fail
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> the <parameter>user_data</parameter> that was passed to
 <link linkend="tp-connection-get-contacts-by-handle"><function>tp_connection_get_contacts_by_handle()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> the <parameter>weak_object</parameter> that was passed to
 <link linkend="tp-connection-get-contacts-by-handle"><function>tp_connection_get_contacts_by_handle()</function></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.18</para></refsect2>
<refsect2 id="tp-connection-get-contacts-by-handle" role="function" condition="since:0.7.18">
<title>tp_connection_get_contacts_by_handle ()</title>
<indexterm zone="tp-connection-get-contacts-by-handle" role="0.7.18"><primary sortas="tp_connection_get_contacts_by_handle">tp_connection_get_contacts_by_handle</primary></indexterm><programlisting><link linkend="void">void</link>                tp_connection_get_contacts_by_handle
                                                        (<link linkend="TpConnection">TpConnection</link> *self,
                                                         <link linkend="guint">guint</link> n_handles,
                                                         const <link linkend="TpHandle">TpHandle</link> *handles,
                                                         <link linkend="guint">guint</link> n_features,
                                                         const <link linkend="TpContactFeature">TpContactFeature</link> *features,
                                                         <link linkend="TpConnectionContactsByHandleCb">TpConnectionContactsByHandleCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Create a number of <link linkend="TpContact"><type>TpContact</type></link> objects and make asynchronous method calls
to hold their handles and ensure that all the features specified in
<parameter>features</parameter> are ready for use (if they are supported at all).
</para>
<para>
It is not an error to put features in <parameter>features</parameter> even if the connection
manager doesn't support them - users of this method should have a static
list of features they would like to use if possible, and use it for all
connection managers.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> A connection, which must be ready (<link linkend="TpConnection--connection-ready"><type>"connection-ready"</type></link>
 must be <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_handles</parameter>&#160;:</term>
<listitem><simpara> The number of handles in <parameter>handles</parameter> (must be at least 1)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handles</parameter>&#160;:</term>
<listitem><simpara> An array of handles of type <link linkend="TP-HANDLE-TYPE-CONTACT--CAPS"><literal>TP_HANDLE_TYPE_CONTACT</literal></link> representing
 the desired contacts
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_features</parameter>&#160;:</term>
<listitem><simpara> The number of features in <parameter>features</parameter> (may be 0)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>features</parameter>&#160;:</term>
<listitem><simpara> An array of features that must be ready for use (if supported)
 before the callback is called (may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>n_features</parameter> is 0)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> A user callback to call when the contacts are ready
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> Data to pass to the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Called to destroy <parameter>user_data</parameter> either after <parameter>callback</parameter> has been
 called, or if the operation is cancelled
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> An object to pass to the callback, which will be weakly
 referenced; if this object is destroyed, the operation will be cancelled
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.18</para></refsect2>
<refsect2 id="TpConnectionContactsByIdCb" role="function" condition="since:0.7.18">
<title>TpConnectionContactsByIdCb ()</title>
<indexterm zone="TpConnectionContactsByIdCb" role="0.7.18"><primary sortas="TpConnectionContactsByIdCb">TpConnectionContactsByIdCb</primary></indexterm><programlisting><link linkend="void">void</link>                (*TpConnectionContactsByIdCb)       (<link linkend="TpConnection">TpConnection</link> *connection,
                                                         <link linkend="guint">guint</link> n_contacts,
                                                         <link linkend="TpContact">TpContact</link> * const *contacts,
                                                         const <link linkend="gchar">gchar</link> * const *requested_ids,
                                                         <link linkend="GHashTable">GHashTable</link> *failed_id_errors,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of a callback used to receive the result of
<link linkend="tp-connection-get-contacts-by-id"><function>tp_connection_get_contacts_by_id()</function></link>.
</para>
<para>
<parameter>requested_ids</parameter> contains the IDs that were converted to handles successfully.
The normalized form of requested_ids[i] is
tp_contact_get_identifier (contacts[i]).
</para>
<para>
If some or even all of the <parameter>ids</parameter> passed to
<link linkend="tp-connection-get-contacts-by-id"><function>tp_connection_get_contacts_by_id()</function></link> were not valid, this is not
considered to be a fatal error. <parameter>error</parameter> will be <link linkend="NULL--CAPS"><literal>NULL</literal></link> in this situation,
<parameter>contacts</parameter> will contain contact objects for those IDs that were
valid (it may be empty), and <parameter>failed_id_errors</parameter> will map the IDs
that were not valid to a corresponding <link linkend="GError"><type>GError</type></link> (if the connection manager
complies with the Telepathy spec, it will have domain <link linkend="TP-ERRORS--CAPS"><literal>TP_ERRORS</literal></link> and code
<link linkend="TP-ERROR-INVALID-HANDLE--CAPS"><literal>TP_ERROR_INVALID_HANDLE</literal></link>).
</para>
<para>
If an unrecoverable error occurs (for instance, if <parameter>connection</parameter>
becomes disconnected) the whole operation fails, and no contacts
or requested IDs are returned. <parameter>failed_id_errors</parameter> will contain all the IDs
that were requested, mapped to a corresponding <link linkend="GError"><type>GError</type></link> (either one
indicating that the ID was invalid, if that was determined before the
fatal error occurred, or a copy of <parameter>error</parameter>).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>connection</parameter>&#160;:</term>
<listitem><simpara> The connection
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_contacts</parameter>&#160;:</term>
<listitem><simpara> The number of TpContact objects successfully created
 (one per valid ID), or 0 on unrecoverable errors
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>contacts</parameter>&#160;:</term>
<listitem><simpara> An array of <parameter>n_contacts</parameter> TpContact objects (this callback is
 not given a reference to any of these objects, and must call
 <link linkend="g-object-ref"><function>g_object_ref()</function></link> on any that it will keep), or <link linkend="NULL--CAPS"><literal>NULL</literal></link> on unrecoverable errors
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>requested_ids</parameter>&#160;:</term>
<listitem><simpara> An array of <parameter>n_contacts</parameter> valid IDs (JIDs, SIP URIs etc.)
 that were passed to <link linkend="tp-connection-get-contacts-by-id"><function>tp_connection_get_contacts_by_id()</function></link>, in an order
 corresponding to <parameter>contacts</parameter>, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> on unrecoverable errors
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>failed_id_errors</parameter>&#160;:</term>
<listitem><simpara> A hash table in which the keys are IDs
 and the values are errors (<link linkend="GError"><type>GError</type></link>)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an unrecoverable error that caused everything
 to fail
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> the <parameter>user_data</parameter> that was passed to
 <link linkend="tp-connection-get-contacts-by-id"><function>tp_connection_get_contacts_by_id()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> the <parameter>weak_object</parameter> that was passed to
 <link linkend="tp-connection-get-contacts-by-id"><function>tp_connection_get_contacts_by_id()</function></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.18</para></refsect2>
<refsect2 id="tp-connection-get-contacts-by-id" role="function" condition="since:0.7.18">
<title>tp_connection_get_contacts_by_id ()</title>
<indexterm zone="tp-connection-get-contacts-by-id" role="0.7.18"><primary sortas="tp_connection_get_contacts_by_id">tp_connection_get_contacts_by_id</primary></indexterm><programlisting><link linkend="void">void</link>                tp_connection_get_contacts_by_id    (<link linkend="TpConnection">TpConnection</link> *self,
                                                         <link linkend="guint">guint</link> n_ids,
                                                         const <link linkend="gchar">gchar</link> * const *ids,
                                                         <link linkend="guint">guint</link> n_features,
                                                         const <link linkend="TpContactFeature">TpContactFeature</link> *features,
                                                         <link linkend="TpConnectionContactsByIdCb">TpConnectionContactsByIdCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Create a number of <link linkend="TpContact"><type>TpContact</type></link> objects and make asynchronous method calls
to obtain their handles and ensure that all the features specified in
<parameter>features</parameter> are ready for use (if they are supported at all).
</para>
<para>
It is not an error to put features in <parameter>features</parameter> even if the connection
manager doesn't support them - users of this method should have a static
list of features they would like to use if possible, and use it for all
connection managers.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> A connection, which must be ready (<link linkend="TpConnection--connection-ready"><type>"connection-ready"</type></link>
 must be <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_ids</parameter>&#160;:</term>
<listitem><simpara> The number of IDs in <parameter>ids</parameter> (must be at least 1)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ids</parameter>&#160;:</term>
<listitem><simpara> An array of strings representing the desired contacts by their
 identifiers in the IM protocol (XMPP JIDs, SIP URIs, MSN Passports,
 AOL screen-names etc.)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_features</parameter>&#160;:</term>
<listitem><simpara> The number of features in <parameter>features</parameter> (may be 0)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>features</parameter>&#160;:</term>
<listitem><simpara> An array of features that must be ready for use (if supported)
 before the callback is called (may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>n_features</parameter> is 0)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> A user callback to call when the contacts are ready
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> Data to pass to the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Called to destroy <parameter>user_data</parameter> either after <parameter>callback</parameter> has been
 called, or if the operation is cancelled
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> An object to pass to the callback, which will be weakly
 referenced; if this object is destroyed, the operation will be cancelled
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.18</para></refsect2>
<refsect2 id="TpConnectionUpgradeContactsCb" role="function" condition="since:0.7.18">
<title>TpConnectionUpgradeContactsCb ()</title>
<indexterm zone="TpConnectionUpgradeContactsCb" role="0.7.18"><primary sortas="TpConnectionUpgradeContactsCb">TpConnectionUpgradeContactsCb</primary></indexterm><programlisting><link linkend="void">void</link>                (*TpConnectionUpgradeContactsCb)    (<link linkend="TpConnection">TpConnection</link> *connection,
                                                         <link linkend="guint">guint</link> n_contacts,
                                                         <link linkend="TpContact">TpContact</link> * const *contacts,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of a callback used to receive the result of
<link linkend="tp-connection-upgrade-contacts"><function>tp_connection_upgrade_contacts()</function></link>.
</para>
<para>
If an unrecoverable error occurs (for instance, if <parameter>connection</parameter> becomes
disconnected) it is indicated by <parameter>error</parameter>, but the contacts in <parameter>contacts</parameter>
are still provided.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>connection</parameter>&#160;:</term>
<listitem><simpara> The connection
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_contacts</parameter>&#160;:</term>
<listitem><simpara> The number of TpContact objects for which an upgrade was
 requested
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>contacts</parameter>&#160;:</term>
<listitem><simpara> An array of <parameter>n_contacts</parameter> TpContact objects (this callback is
 not given an extra reference to any of these objects, and must call
 <link linkend="g-object-ref"><function>g_object_ref()</function></link> on any that it will keep)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> An unrecoverable error, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if the connection remains valid
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> the <parameter>user_data</parameter> that was passed to
 <link linkend="tp-connection-upgrade-contacts"><function>tp_connection_upgrade_contacts()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> the <parameter>weak_object</parameter> that was passed to
 <link linkend="tp-connection-upgrade-contacts"><function>tp_connection_upgrade_contacts()</function></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.18</para></refsect2>
<refsect2 id="tp-connection-upgrade-contacts" role="function" condition="since:0.7.18">
<title>tp_connection_upgrade_contacts ()</title>
<indexterm zone="tp-connection-upgrade-contacts" role="0.7.18"><primary sortas="tp_connection_upgrade_contacts">tp_connection_upgrade_contacts</primary></indexterm><programlisting><link linkend="void">void</link>                tp_connection_upgrade_contacts      (<link linkend="TpConnection">TpConnection</link> *self,
                                                         <link linkend="guint">guint</link> n_contacts,
                                                         <link linkend="TpContact">TpContact</link> * const *contacts,
                                                         <link linkend="guint">guint</link> n_features,
                                                         const <link linkend="TpContactFeature">TpContactFeature</link> *features,
                                                         <link linkend="TpConnectionUpgradeContactsCb">TpConnectionUpgradeContactsCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Given several <link linkend="TpContact"><type>TpContact</type></link> objects, make asynchronous method calls
ensure that all the features specified in <parameter>features</parameter> are ready for use
(if they are supported at all).
</para>
<para>
It is not an error to put features in <parameter>features</parameter> even if the connection
manager doesn't support them - users of this method should have a static
list of features they would like to use if possible, and use it for all
connection managers.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> A connection, which must be ready (<link linkend="TpConnection--connection-ready"><type>"connection-ready"</type></link>
 must be <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_contacts</parameter>&#160;:</term>
<listitem><simpara> The number of contacts in <parameter>contacts</parameter> (must be at least 1)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>contacts</parameter>&#160;:</term>
<listitem><simpara> An array of <link linkend="TpContact"><type>TpContact</type></link> objects associated with <parameter>self</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_features</parameter>&#160;:</term>
<listitem><simpara> The number of features in <parameter>features</parameter> (must be at least 1)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>features</parameter>&#160;:</term>
<listitem><simpara> An array of features that must be ready for use (if supported)
 before the callback is called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> A user callback to call when the contacts are ready
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> Data to pass to the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Called to destroy <parameter>user_data</parameter> either after <parameter>callback</parameter> has been
 called, or if the operation is cancelled
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> An object to pass to the callback, which will be weakly
 referenced; if this object is destroyed, the operation will be cancelled
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.18</para></refsect2>
<refsect2 id="tp-contact-get-alias" role="function" condition="since:0.7.18">
<title>tp_contact_get_alias ()</title>
<indexterm zone="tp-contact-get-alias" role="0.7.18"><primary sortas="tp_contact_get_alias">tp_contact_get_alias</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       tp_contact_get_alias                (<link linkend="TpContact">TpContact</link> *self);</programlisting>
<para>
Return the contact's alias. This remains valid until the main loop
is re-entered; if the caller requires a string that will persist for
longer than that, it must be copied with <link linkend="g-strdup"><function>g_strdup()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a contact
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the same non-<link linkend="NULL--CAPS"><literal>NULL</literal></link> alias as the <link linkend="TpContact--alias"><type>"alias"</type></link>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.18</para></refsect2>
<refsect2 id="tp-contact-get-avatar-token" role="function" condition="since:0.7.18">
<title>tp_contact_get_avatar_token ()</title>
<indexterm zone="tp-contact-get-avatar-token" role="0.7.18"><primary sortas="tp_contact_get_avatar_token">tp_contact_get_avatar_token</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       tp_contact_get_avatar_token         (<link linkend="TpContact">TpContact</link> *self);</programlisting>
<para>
Return the contact's avatar token. This remains valid until the main loop
is re-entered; if the caller requires a string that will persist for
longer than that, it must be copied with <link linkend="g-strdup"><function>g_strdup()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a contact
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the same token as the <link linkend="TpContact--avatar-token"><type>"avatar-token"</type></link> property
 (possibly <link linkend="NULL--CAPS"><literal>NULL</literal></link>)

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.18</para></refsect2>
<refsect2 id="tp-contact-get-connection" role="function" condition="since:0.7.18">
<title>tp_contact_get_connection ()</title>
<indexterm zone="tp-contact-get-connection" role="0.7.18"><primary sortas="tp_contact_get_connection">tp_contact_get_connection</primary></indexterm><programlisting><link linkend="TpConnection">TpConnection</link> *      tp_contact_get_connection           (<link linkend="TpContact">TpContact</link> *self);</programlisting>
<para>
<!-- nothing more to say --></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a contact
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a borrowed reference to the <link linkend="TpContact--connection"><type>"connection"</type></link>
 (it must be referenced with g_object_ref if it must remain valid
 longer than the contact)

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.18</para></refsect2>
<refsect2 id="tp-contact-get-handle" role="function" condition="since:0.7.18">
<title>tp_contact_get_handle ()</title>
<indexterm zone="tp-contact-get-handle" role="0.7.18"><primary sortas="tp_contact_get_handle">tp_contact_get_handle</primary></indexterm><programlisting><link linkend="TpHandle">TpHandle</link>            tp_contact_get_handle               (<link linkend="TpContact">TpContact</link> *self);</programlisting>
<para>
Return the contact's handle, which is of type <link linkend="TP-HANDLE-TYPE-CONTACT--CAPS"><literal>TP_HANDLE_TYPE_CONTACT</literal></link>,
or 0 if the <link linkend="TpContact--connection"><type>"connection"</type></link> has become invalid.
</para>
<para>
This handle is referenced using the Telepathy D-Bus API and remains
referenced for as long as <parameter>self</parameter> exists and the
<link linkend="TpContact--connection"><type>"connection"</type></link> remains valid.
</para>
<para>
However, the caller of this function does not gain an additional reference
to the handle.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a contact
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the same handle as the <link linkend="TpContact--handle"><type>"handle"</type></link> property

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.18</para></refsect2>
<refsect2 id="tp-contact-get-identifier" role="function" condition="since:0.7.18">
<title>tp_contact_get_identifier ()</title>
<indexterm zone="tp-contact-get-identifier" role="0.7.18"><primary sortas="tp_contact_get_identifier">tp_contact_get_identifier</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       tp_contact_get_identifier           (<link linkend="TpContact">TpContact</link> *self);</programlisting>
<para>
Return the contact's identifier. This remains valid for as long as <parameter>self</parameter>
exists; if the caller requires a string that will persist for longer than
that, it must be copied with <link linkend="g-strdup"><function>g_strdup()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a contact
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the same non-<link linkend="NULL--CAPS"><literal>NULL</literal></link> identifier as the <link linkend="TpContact--identifier"><type>"identifier"</type></link> property

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.18</para></refsect2>
<refsect2 id="tp-contact-get-presence-message" role="function" condition="since:0.7.18">
<title>tp_contact_get_presence_message ()</title>
<indexterm zone="tp-contact-get-presence-message" role="0.7.18"><primary sortas="tp_contact_get_presence_message">tp_contact_get_presence_message</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       tp_contact_get_presence_message     (<link linkend="TpContact">TpContact</link> *self);</programlisting>
<para>
Return the contact's user-defined status message, or an empty string.
This remains valid until the main loop is re-entered; if the caller
requires a string that will persist for longer than that, it must be
copied with <link linkend="g-strdup"><function>g_strdup()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a contact
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the same non-<link linkend="NULL--CAPS"><literal>NULL</literal></link> message as the <link linkend="TpContact--presence-message"><type>"presence-message"</type></link>
 property

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.18</para></refsect2>
<refsect2 id="tp-contact-get-presence-status" role="function" condition="since:0.7.18">
<title>tp_contact_get_presence_status ()</title>
<indexterm zone="tp-contact-get-presence-status" role="0.7.18"><primary sortas="tp_contact_get_presence_status">tp_contact_get_presence_status</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       tp_contact_get_presence_status      (<link linkend="TpContact">TpContact</link> *self);</programlisting>
<para>
Return the name of the contact's presence status, or an empty string.
This remains valid until the main loop is re-entered; if the caller
requires a string that will persist for longer than that, it must be
copied with <link linkend="g-strdup"><function>g_strdup()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a contact
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the same non-<link linkend="NULL--CAPS"><literal>NULL</literal></link> status name as the <link linkend="TpContact--presence-status"><type>"presence-status"</type></link>
 property

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.18</para></refsect2>
<refsect2 id="tp-contact-get-presence-type" role="function" condition="since:0.7.18">
<title>tp_contact_get_presence_type ()</title>
<indexterm zone="tp-contact-get-presence-type" role="0.7.18"><primary sortas="tp_contact_get_presence_type">tp_contact_get_presence_type</primary></indexterm><programlisting><link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link>  tp_contact_get_presence_type  (<link linkend="TpContact">TpContact</link> *self);</programlisting>
<para>
If this object has been set up to track <link linkend="TP-CONTACT-FEATURE-PRESENCE--CAPS"><literal>TP_CONTACT_FEATURE_PRESENCE</literal></link>
and the underlying connection supports either the Presence or
SimplePresence interfaces, return the type of the contact's presence.
</para>
<para>
Otherwise, return <link linkend="TP-CONNECTION-PRESENCE-TYPE-UNSET--CAPS"><literal>TP_CONNECTION_PRESENCE_TYPE_UNSET</literal></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a contact
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the same presence type as the <link linkend="TpContact--presence-type"><type>"presence-type"</type></link> property

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.18</para></refsect2>
<refsect2 id="tp-contact-has-feature" role="function" condition="since:0.7.18">
<title>tp_contact_has_feature ()</title>
<indexterm zone="tp-contact-has-feature" role="0.7.18"><primary sortas="tp_contact_has_feature">tp_contact_has_feature</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_contact_has_feature              (<link linkend="TpContact">TpContact</link> *self,
                                                         <link linkend="TpContactFeature">TpContactFeature</link> feature);</programlisting>
<para>
<!-- --></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a contact
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>feature</parameter>&#160;:</term>
<listitem><simpara> a desired feature
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if <parameter>self</parameter> has been set up to track the feature <parameter>feature</parameter>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.18</para></refsect2>

</refsect1>
<refsect1 id="telepathy-glib-contact.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="TpContact--alias" role="property"><title>The <literal>&quot;alias&quot;</literal> property</title>
<indexterm zone="TpContact--alias"><primary sortas="TpContact:alias">TpContact:alias</primary></indexterm><programlisting>  &quot;alias&quot;                    <link linkend="gchar">gchar</link>*                : Read</programlisting>
<para>
The contact's alias if available, falling back to their
<link linkend="TpContact--identifier"><type>"identifier"</type></link> if no alias is available or if the <link linkend="TpContact"><type>TpContact</type></link> has
not been set up to track <link linkend="TP-CONTACT-FEATURE-ALIAS--CAPS"><literal>TP_CONTACT_FEATURE_ALIAS</literal></link>. This is never <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</para>
<para>
This alias may have been supplied by the contact themselves, or by the
local user, so it does not necessarily unambiguously identify the contact.
However, it is suitable for use as a main "display name" for the contact.</para>
<para>
</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="TpContact--avatar-token" role="property"><title>The <literal>&quot;avatar-token&quot;</literal> property</title>
<indexterm zone="TpContact--avatar-token"><primary sortas="TpContact:avatar-token">TpContact:avatar-token</primary></indexterm><programlisting>  &quot;avatar-token&quot;             <link linkend="gchar">gchar</link>*                : Read</programlisting>
<para>
An opaque string representing state of the contact's avatar (depending on
the protocol, this might be a hash, a timestamp or something else), or
an empty string if there is no avatar.
</para>
<para>
This may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if it is not known whether this contact has an avatar
or not (either for network protocol reasons, or because this <link linkend="TpContact"><type>TpContact</type></link>
has not been set up to track <link linkend="TP-CONTACT-FEATURE-AVATAR-TOKEN--CAPS"><literal>TP_CONTACT_FEATURE_AVATAR_TOKEN</literal></link>).</para>
<para>
</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="TpContact--connection" role="property"><title>The <literal>&quot;connection&quot;</literal> property</title>
<indexterm zone="TpContact--connection"><primary sortas="TpContact:connection">TpContact:connection</primary></indexterm><programlisting>  &quot;connection&quot;               <link linkend="TpConnection">TpConnection</link>*         : Read</programlisting>
<para>
The <link linkend="TpConnection"><type>TpConnection</type></link> to which this contact belongs.</para>
<para>
</para></refsect2>
<refsect2 id="TpContact--handle" role="property"><title>The <literal>&quot;handle&quot;</literal> property</title>
<indexterm zone="TpContact--handle"><primary sortas="TpContact:handle">TpContact:handle</primary></indexterm><programlisting>  &quot;handle&quot;                   <link linkend="guint">guint</link>                 : Read</programlisting>
<para>
The contact's handle in the Telepathy D-Bus API, a handle of type
<link linkend="TP-HANDLE-TYPE-CONTACT--CAPS"><literal>TP_HANDLE_TYPE_CONTACT</literal></link> representing the string
given by <link linkend="TpContact--identifier"><type>"identifier"</type></link>.
</para>
<para>
This handle is referenced using the Telepathy D-Bus API and remains
referenced for as long as the <link linkend="TpContact"><type>TpContact</type></link> exists and the
<link linkend="TpContact--connection"><type>"connection"</type></link> remains valid.
</para>
<para>
However, getting this property does not cause an additional reference
to the handle to be held.
</para>
<para>
If the <link linkend="TpContact--connection"><type>"connection"</type></link> becomes invalid, this property is no longer
meaningful and will be set to 0.</para>
<para>
</para><para>Default value: 0</para>
</refsect2>
<refsect2 id="TpContact--identifier" role="property"><title>The <literal>&quot;identifier&quot;</literal> property</title>
<indexterm zone="TpContact--identifier"><primary sortas="TpContact:identifier">TpContact:identifier</primary></indexterm><programlisting>  &quot;identifier&quot;               <link linkend="gchar">gchar</link>*                : Read</programlisting>
<para>
The contact's identifier in the instant messaging protocol (e.g.
XMPP JID, SIP URI, AOL screenname or IRC nick - whatever the underlying
protocol uses to identify a user). This is never <link linkend="NULL--CAPS"><literal>NULL</literal></link>.</para>
<para>
</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="TpContact--presence-message" role="property"><title>The <literal>&quot;presence-message&quot;</literal> property</title>
<indexterm zone="TpContact--presence-message"><primary sortas="TpContact:presence-message">TpContact:presence-message</primary></indexterm><programlisting>  &quot;presence-message&quot;         <link linkend="gchar">gchar</link>*                : Read</programlisting>
<para>
If this contact has set a user-defined status message, that message;
if not, an empty string (which user interfaces may replace with a
localized form of the <link linkend="TpContact--presence-status"><type>"presence-status"</type></link> or
<link linkend="TpContact--presence-type"><type>"presence-type"</type></link>).
</para>
<para>
This may be an empty string even if the contact has set a message,
if this <link linkend="TpContact"><type>TpContact</type></link> object has not been set up to track
<link linkend="TP-CONTACT-FEATURE-PRESENCE--CAPS"><literal>TP_CONTACT_FEATURE_PRESENCE</literal></link>. It is never <link linkend="NULL--CAPS"><literal>NULL</literal></link>.</para>
<para>
</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="TpContact--presence-status" role="property"><title>The <literal>&quot;presence-status&quot;</literal> property</title>
<indexterm zone="TpContact--presence-status"><primary sortas="TpContact:presence-status">TpContact:presence-status</primary></indexterm><programlisting>  &quot;presence-status&quot;          <link linkend="gchar">gchar</link>*                : Read</programlisting>
<para>
A string representing the presence status of this contact. This may be
a well-known string from the Telepathy specification, like "available",
or a connection-manager-specific string, like "out-to-lunch".
</para>
<para>
This may be an empty string if this <link linkend="TpContact"><type>TpContact</type></link> object has not been set up
to track <link linkend="TP-CONTACT-FEATURE-PRESENCE--CAPS"><literal>TP_CONTACT_FEATURE_PRESENCE</literal></link>. It is never <link linkend="NULL--CAPS"><literal>NULL</literal></link>.</para>
<para>
</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="TpContact--presence-type" role="property"><title>The <literal>&quot;presence-type&quot;</literal> property</title>
<indexterm zone="TpContact--presence-type"><primary sortas="TpContact:presence-type">TpContact:presence-type</primary></indexterm><programlisting>  &quot;presence-type&quot;            <link linkend="guint">guint</link>                 : Read</programlisting>
<para>
The <link linkend="TpConnectionPresenceType"><type>TpConnectionPresenceType</type></link> representing the type of presence status
for this contact.
</para>
<para>
This is provided so even unknown values for <link linkend="TpContact--presence-status"><type>"presence-status"</type></link>
can be classified into their fundamental types.
</para>
<para>
This may be <link linkend="TP-CONNECTION-PRESENCE-TYPE-UNSET--CAPS"><literal>TP_CONNECTION_PRESENCE_TYPE_UNSET</literal></link> if this <link linkend="TpContact"><type>TpContact</type></link>
has not been set up to track <link linkend="TP-CONTACT-FEATURE-PRESENCE--CAPS"><literal>TP_CONTACT_FEATURE_PRESENCE</literal></link>.</para>
<para>
</para><para>Default value: 0</para>
</refsect2>
</refsect1>



<refsect1 id="telepathy-glib-contact.see-also">
<title>See Also</title>
#TpConnection
</refsect1>

</refentry>
