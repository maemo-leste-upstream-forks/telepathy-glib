<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-connection-simple-presence">
<refmeta>
<refentrytitle role="top_of_page" id="telepathy-glib-connection-simple-presence.top_of_page">Connection SimplePresence interface</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Connection SimplePresence interface</refname>
<refpurpose>client-side wrappers for the SimplePresence interface</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv id="telepathy-glib-connection-simple-presence.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;telepathy-glib/connection.h&gt;

<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-connection-interface-simple-presence-run-get-presences">tp_cli_connection_interface_simple_presence_run_get_presences</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="GArray">GArray</link> *in_Contacts,
                                                         <link linkend="GHashTable">GHashTable</link> **out_Presence,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-connection-interface-simple-presence-run-set-presence">tp_cli_connection_interface_simple_presence_run_set_presence</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_Status,
                                                         const <link linkend="gchar">gchar</link> *in_Status_Message,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-connection-interface-simple-presence-call-get-presences">tp_cli_connection_interface_simple_presence_call_get_presences</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="GArray">GArray</link> *in_Contacts,
                                                         <link linkend="tp-cli-connection-interface-simple-presence-callback-for-get-presences">tp_cli_connection_interface_simple_presence_callback_for_get_presences</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* <link linkend="tp-cli-connection-interface-simple-presence-call-set-presence">tp_cli_connection_interface_simple_presence_call_set_presence</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_Status,
                                                         const <link linkend="gchar">gchar</link> *in_Status_Message,
                                                         <link linkend="tp-cli-connection-interface-simple-presence-callback-for-set-presence">tp_cli_connection_interface_simple_presence_callback_for_set_presence</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-connection-interface-simple-presence-callback-for-get-presences">*tp_cli_connection_interface_simple_presence_callback_for_get_presences</link>)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="GHashTable">GHashTable</link> *out_Presence,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-connection-interface-simple-presence-callback-for-set-presence">*tp_cli_connection_interface_simple_presence_callback_for_set_presence</link>)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link>* <link linkend="tp-cli-connection-interface-simple-presence-connect-to-presences-changed">tp_cli_connection_interface_simple_presence_connect_to_presences_changed</link>
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="tp-cli-connection-interface-simple-presence-signal-callback-presences-changed">tp_cli_connection_interface_simple_presence_signal_callback_presences_changed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                (<link linkend="tp-cli-connection-interface-simple-presence-signal-callback-presences-changed">*tp_cli_connection_interface_simple_presence_signal_callback_presences_changed</link>)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="GHashTable">GHashTable</link> *arg_Presence,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
</synopsis>
</refsynopsisdiv>









<refsect1 id="telepathy-glib-connection-simple-presence.description" role="desc">
<title role="desc.title">Description</title>
<para>
Most instant messaging protocols allow users to advertise their presence
status. In Telepathy, this is represented by the SimplePresence
interface, which lets applications advertise the presence status of the
local user, and query the presence status of their contacts.
</para>
<para>
This section documents the auto-generated C wrappers for the
SimplePresence interface, used with <link linkend="TpConnection"><type>TpConnection</type></link> objects.</para>
<para>

</para>
</refsect1>

<refsect1 id="telepathy-glib-connection-simple-presence.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="tp-cli-connection-interface-simple-presence-run-get-presences" role="function">
<title>tp_cli_connection_interface_simple_presence_run_get_presences ()</title>
<indexterm zone="tp-cli-connection-interface-simple-presence-run-get-presences"><primary>tp_cli_connection_interface_simple_presence_run_get_presences</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_connection_interface_simple_presence_run_get_presences
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="GArray">GArray</link> *in_Contacts,
                                                         <link linkend="GHashTable">GHashTable</link> **out_Presence,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method GetPresences and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Get presence previously emitted by PresencesChanged for the given         contacts. Data is returned in the same structure as the         PresencesChanged signal; no additional network requests are made.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpConnection"><type>TpConnection</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Contacts</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: An array of the contacts whose presence should be obtained.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Presence</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned: &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           &lt;p&gt;Presence information in the same format as for the             &lt;tp:member-ref&gt;PresencesChanged&lt;/tp:member-ref&gt; signal.             The returned mapping MUST include an entry for each contact             in the method&apos;s argument.&lt;/p&gt;            &lt;p&gt;The definition of the connection presence types Unknown             and Offline means that if a connection manager will return             Unknown for contacts not on the subscribe list, it MUST delay             the reply to this method call until it has found out which             contacts are, in fact, on the subscribe list.&lt;/p&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-interface-simple-presence-run-set-presence" role="function">
<title>tp_cli_connection_interface_simple_presence_run_set_presence ()</title>
<indexterm zone="tp-cli-connection-interface-simple-presence-run-set-presence"><primary>tp_cli_connection_interface_simple_presence_run_set_presence</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_connection_interface_simple_presence_run_set_presence
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_Status,
                                                         const <link linkend="gchar">gchar</link> *in_Status_Message,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method SetPresence and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;Request that the presence status and status message are published for           the connection.  Changes will be indicated by           &lt;tp:member-ref&gt;PresencesChanged&lt;/tp:member-ref&gt;           signals being emitted.&lt;/p&gt;          &lt;p&gt;This method may be called on a newly-created connection while it           is still in the DISCONNECTED state, to request that when the           connection connects, it will do so with the selected status.&lt;/p&gt;          &lt;p&gt;In DISCONNECTED state the           &lt;tp:member-ref&gt;Statuses&lt;/tp:member-ref&gt;           property will indicate which statuses are allowed to be set           while DISCONNECTED (none, if the Connection Manager doesn&apos;t allow           this). This value MUST NOT be cached, as the set of allowed           presences might change upon connecting.&lt;/p&gt;</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpConnection"><type>TpConnection</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Status</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           &lt;p&gt;The string identifier of the desired status. Possible status             identifiers are defined in the             &lt;tp:member-ref&gt;Statuses&lt;/tp:member-ref&gt; property.&lt;/p&gt;            &lt;p&gt;Clients MUST NOT set a status whose string value they do not             recognise, even if its presence type in Statuses             matches what the user requested.&lt;/p&gt;            &lt;tp:rationale&gt;             &lt;p&gt;Suppose a protocol has statuses that include &apos;phone&apos; (of type               BUSY) and &apos;in-a-meeting&apos; (of type BUSY), but there is no               generic &apos;busy&apos; status.&lt;/p&gt;              &lt;p&gt;If the user requests &amp;quot;Busy&amp;quot; status from a menu, a               client author might be tempted to pick an arbitrary status               that has type BUSY. However, on this protocol, neither of               the choices would be appropriate, and incorrect information               about the user would be conveyed.&lt;/p&gt;           &lt;/tp:rationale&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Status_Message</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: The status message associated with the current status.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED:CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-interface-simple-presence-call-get-presences" role="function">
<title>tp_cli_connection_interface_simple_presence_call_get_presences ()</title>
<indexterm zone="tp-cli-connection-interface-simple-presence-call-get-presences"><primary>tp_cli_connection_interface_simple_presence_call_get_presences</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_connection_interface_simple_presence_call_get_presences
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="GArray">GArray</link> *in_Contacts,
                                                         <link linkend="tp-cli-connection-interface-simple-presence-callback-for-get-presences">tp_cli_connection_interface_simple_presence_callback_for_get_presences</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a GetPresences method call.
</para>
<para>
Get presence previously emitted by PresencesChanged for the given         contacts. Data is returned in the same structure as the         PresencesChanged signal; no additional network requests are made.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Contacts</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: An array of the contacts whose presence should be obtained.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL:CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-interface-simple-presence-call-set-presence" role="function">
<title>tp_cli_connection_interface_simple_presence_call_set_presence ()</title>
<indexterm zone="tp-cli-connection-interface-simple-presence-call-set-presence"><primary>tp_cli_connection_interface_simple_presence_call_set_presence</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link>* tp_cli_connection_interface_simple_presence_call_set_presence
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_Status,
                                                         const <link linkend="gchar">gchar</link> *in_Status_Message,
                                                         <link linkend="tp-cli-connection-interface-simple-presence-callback-for-set-presence">tp_cli_connection_interface_simple_presence_callback_for_set_presence</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a SetPresence method call.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;Request that the presence status and status message are published for           the connection.  Changes will be indicated by           &lt;tp:member-ref&gt;PresencesChanged&lt;/tp:member-ref&gt;           signals being emitted.&lt;/p&gt;          &lt;p&gt;This method may be called on a newly-created connection while it           is still in the DISCONNECTED state, to request that when the           connection connects, it will do so with the selected status.&lt;/p&gt;          &lt;p&gt;In DISCONNECTED state the           &lt;tp:member-ref&gt;Statuses&lt;/tp:member-ref&gt;           property will indicate which statuses are allowed to be set           while DISCONNECTED (none, if the Connection Manager doesn&apos;t allow           this). This value MUST NOT be cached, as the set of allowed           presences might change upon connecting.&lt;/p&gt;</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&nbsp;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Status</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           &lt;p&gt;The string identifier of the desired status. Possible status             identifiers are defined in the             &lt;tp:member-ref&gt;Statuses&lt;/tp:member-ref&gt; property.&lt;/p&gt;            &lt;p&gt;Clients MUST NOT set a status whose string value they do not             recognise, even if its presence type in Statuses             matches what the user requested.&lt;/p&gt;            &lt;tp:rationale&gt;             &lt;p&gt;Suppose a protocol has statuses that include &apos;phone&apos; (of type               BUSY) and &apos;in-a-meeting&apos; (of type BUSY), but there is no               generic &apos;busy&apos; status.&lt;/p&gt;              &lt;p&gt;If the user requests &amp;quot;Busy&amp;quot; status from a menu, a               client author might be tempted to pick an arbitrary status               that has type BUSY. However, on this protocol, neither of               the choices would be appropriate, and incorrect information               about the user would be conveyed.&lt;/p&gt;           &lt;/tp:rationale&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Status_Message</parameter>&nbsp;:</term>
<listitem><simpara> Used to pass an 'in' argument: The status message associated with the current status.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL:CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-interface-simple-presence-callback-for-get-presences" role="function">
<title>tp_cli_connection_interface_simple_presence_callback_for_get_presences ()</title>
<indexterm zone="tp-cli-connection-interface-simple-presence-callback-for-get-presences"><primary>tp_cli_connection_interface_simple_presence_callback_for_get_presences</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_connection_interface_simple_presence_callback_for_get_presences)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="GHashTable">GHashTable</link> *out_Presence,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a GetPresences method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Presence</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>: &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           &lt;p&gt;Presence information in the same format as for the             &lt;tp:member-ref&gt;PresencesChanged&lt;/tp:member-ref&gt; signal.             The returned mapping MUST include an entry for each contact             in the method&apos;s argument.&lt;/p&gt;            &lt;p&gt;The definition of the connection presence types Unknown             and Offline means that if a connection manager will return             Unknown for contacts not on the subscribe list, it MUST delay             the reply to this method call until it has found out which             contacts are, in fact, on the subscribe list.&lt;/p&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-interface-simple-presence-callback-for-set-presence" role="function">
<title>tp_cli_connection_interface_simple_presence_callback_for_set_presence ()</title>
<indexterm zone="tp-cli-connection-interface-simple-presence-callback-for-set-presence"><primary>tp_cli_connection_interface_simple_presence_callback_for_set_presence</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_connection_interface_simple_presence_callback_for_set_presence)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a SetPresence method call
succeeds or fails.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="NULL:CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-interface-simple-presence-connect-to-presences-changed" role="function">
<title>tp_cli_connection_interface_simple_presence_connect_to_presences_changed ()</title>
<indexterm zone="tp-cli-connection-interface-simple-presence-connect-to-presences-changed"><primary>tp_cli_connection_interface_simple_presence_connect_to_presences_changed</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link>* tp_cli_connection_interface_simple_presence_connect_to_presences_changed
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="tp-cli-connection-interface-simple-presence-signal-callback-presences-changed">tp_cli_connection_interface_simple_presence_signal_callback_presences_changed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal PresencesChanged.
</para>
<para>
This signal should be emitted when your own presence has been changed,         or the presence of the member of any of the connection&apos;s channels has         been changed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpConnection"><type>TpConnection</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> If not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL:CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL:CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-connection-interface-simple-presence-signal-callback-presences-changed" role="function">
<title>tp_cli_connection_interface_simple_presence_signal_callback_presences_changed ()</title>
<indexterm zone="tp-cli-connection-interface-simple-presence-signal-callback-presences-changed"><primary>tp_cli_connection_interface_simple_presence_signal_callback_presences_changed</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_connection_interface_simple_presence_signal_callback_presences_changed)
                                                        (<link linkend="TpConnection">TpConnection</link> *proxy,
                                                         <link linkend="GHashTable">GHashTable</link> *arg_Presence,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal PresencesChanged.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&nbsp;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-connection-interface-simple-presence-connect-to-presences-changed"><function>tp_cli_connection_interface_simple_presence_connect_to_presences_changed()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Presence</parameter>&nbsp;:</term>
<listitem><simpara> A dictionary of contact handles mapped to the status,           presence type and status message.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&nbsp;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1 id="telepathy-glib-connection-simple-presence.see-also">
<title>See Also</title>
<link linkend="TpConnection"><type>TpConnection</type></link>
</refsect1>

</refentry>
