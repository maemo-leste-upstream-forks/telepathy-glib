<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-debug">
<refmeta>
<refentrytitle role="top_of_page" id="telepathy-glib-debug.top_of_page">Common debug support</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Common debug support</refname>
<refpurpose>API to activate debugging messages from telepathy-glib</refpurpose>
</refnamediv>

<refsynopsisdiv id="telepathy-glib-debug.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;telepathy-glib/debug.h&gt;

<link linkend="void">void</link>                <link linkend="tp-debug-set-flags">tp_debug_set_flags</link>                  (const <link linkend="gchar">gchar</link> *flags_string);
<link linkend="void">void</link>                <link linkend="tp-debug-set-persistent">tp_debug_set_persistent</link>             (<link linkend="gboolean">gboolean</link> persistent);
<link linkend="void">void</link>                <link linkend="tp-debug-divert-messages">tp_debug_divert_messages</link>            (const <link linkend="gchar">gchar</link> *filename);
<link linkend="void">void</link>                <link linkend="tp-debug-timestamped-log-handler">tp_debug_timestamped_log_handler</link>    (const <link linkend="gchar">gchar</link> *log_domain,
                                                         <link linkend="GLogLevelFlags">GLogLevelFlags</link> log_level,
                                                         const <link linkend="gchar">gchar</link> *message,
                                                         <link linkend="gpointer">gpointer</link> ignored);

<link linkend="void">void</link>                <link linkend="tp-debug-set-flags-from-string">tp_debug_set_flags_from_string</link>      (const <link linkend="gchar">gchar</link> *flags_string);
<link linkend="void">void</link>                <link linkend="tp-debug-set-flags-from-env">tp_debug_set_flags_from_env</link>         (const <link linkend="gchar">gchar</link> *var);
<link linkend="void">void</link>                <link linkend="tp-debug-set-all-flags">tp_debug_set_all_flags</link>              (void);
</synopsis>
</refsynopsisdiv>









<refsect1 id="telepathy-glib-debug.description" role="desc">
<title role="desc.title">Description</title>
<para>
telepathy-glib has an internal mechanism for debug messages and filtering.
Connection managers written with telepathy-glib are expected to connect
this to their own debugging mechanisms: when the CM's debugging mechanism
is activated, it should call <link linkend="tp-debug-set-flags"><function>tp_debug_set_flags()</function></link> and/or
<link linkend="tp-debug-set-persistent"><function>tp_debug_set_persistent()</function></link>.
</para>
<para>
The supported debug-mode keywords and the debug messages that they enable
are subject to change, but currently include:
</para>
<para>
<itemizedlist>
<listitem><literal>manager</literal> -
   <link linkend="TpConnectionManager"><type>TpConnectionManager</type></link> (client)</listitem>
<listitem><literal>connection</literal> - <link linkend="TpBaseConnection"><type>TpBaseConnection</type></link> (service)
   and <link linkend="TpConnection"><type>TpConnection</type></link> (client)</listitem>
<listitem><literal>contacts</literal> - <link linkend="TpContact"><type>TpContact</type></link> objects
   (client)</listitem>
<listitem><literal>channel</literal> - <link linkend="TpChannel"><type>TpChannel</type></link> (client)</listitem>
<listitem><literal>im</literal> - (text) instant messaging
   (service)</listitem>
<listitem><literal>properties</literal> -
   <link linkend="TpPropertiesMixin"><type>TpPropertiesMixin</type></link> (service)</listitem>
<listitem><literal>params</literal> - connection manager parameters
   (service)</listitem>
<listitem><literal>handles</literal> - handle reference tracking tracking
   in <link linkend="TpBaseConnection"><type>TpBaseConnection</type></link> (service) and <link linkend="TpConnection"><type>TpConnection</type></link> (client)</listitem>
<listitem><literal>accounts</literal> - the <link linkend="TpAccountManager"><type>TpAccountManager</type></link> and
    <link linkend="TpAccount"><type>TpAccount</type></link> objects (client)</listitem>
<listitem><literal>all</literal> - all of the above</listitem>
</itemizedlist></para>
<para>
</para>
</refsect1>

<refsect1 id="telepathy-glib-debug.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="tp-debug-set-flags" role="function">
<title>tp_debug_set_flags ()</title>
<indexterm zone="tp-debug-set-flags"><primary sortas="tp_debug_set_flags">tp_debug_set_flags</primary></indexterm><programlisting><link linkend="void">void</link>                tp_debug_set_flags                  (const <link linkend="gchar">gchar</link> *flags_string);</programlisting>
<para>
Set the debug flags indicated by <parameter>flags_string</parameter>, in addition to any already
set.
</para>
<para>
The parsing matches that of <link linkend="g-parse-debug-string"><function>g_parse_debug_string()</function></link>.
</para>
<para>
If telepathy-glib was compiled with --disable-debug (not recommended),
this function does nothing.
</para>
<para>
<parameter>since</parameter> 0.6.1</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>flags_string</parameter>&#160;:</term>
<listitem><simpara> The flags to set, comma-separated. If <link linkend="NULL--CAPS"><literal>NULL</literal></link> or empty,
 no additional flags are set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-debug-set-persistent" role="function">
<title>tp_debug_set_persistent ()</title>
<indexterm zone="tp-debug-set-persistent"><primary sortas="tp_debug_set_persistent">tp_debug_set_persistent</primary></indexterm><programlisting><link linkend="void">void</link>                tp_debug_set_persistent             (<link linkend="gboolean">gboolean</link> persistent);</programlisting>
<para>
Used to enable persistent operation of the connection manager process for
debugging purposes.
</para>
<para>
If telepathy-glib was compiled with --disable-debug (not recommended),
this function does nothing.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>persistent</parameter>&#160;:</term>
<listitem><simpara> TRUE prevents the connection manager mainloop from exiting,
             FALSE enables exiting if there are no connections
             (the default behavior).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-debug-divert-messages" role="function" condition="since:0.7.1">
<title>tp_debug_divert_messages ()</title>
<indexterm zone="tp-debug-divert-messages" role="0.7.1"><primary sortas="tp_debug_divert_messages">tp_debug_divert_messages</primary></indexterm><programlisting><link linkend="void">void</link>                tp_debug_divert_messages            (const <link linkend="gchar">gchar</link> *filename);</programlisting>
<para>
Open the given file for writing and duplicate its file descriptor to
be used for stdout and stderr. This has the effect of closing the previous
stdout and stderr, and sending all messages that would have gone there
to the given file instead.
</para>
<para>
By default the file is truncated and hence overwritten each time the
process is executed.
Since version 0.7.14, if the filename is prefixed with '+' then the
file is not truncated and output is added at the end of the file.
</para>
<para>
Passing <link linkend="NULL--CAPS"><literal>NULL</literal></link> to this function is guaranteed to have no effect. This is
so you can call it with the recommended usage
<literal>tp_debug_divert_messages (g_getenv ("MYAPP_LOGFILE"))</literal>
and it won't do anything if the environment variable is not set.
</para>
<para>
This function still works if telepathy-glib was compiled without debug
support.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&#160;:</term>
<listitem><simpara> A file to which to divert stdout and stderr, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> to
 do nothing
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.1</para></refsect2>
<refsect2 id="tp-debug-timestamped-log-handler" role="function" condition="since:0.7.1">
<title>tp_debug_timestamped_log_handler ()</title>
<indexterm zone="tp-debug-timestamped-log-handler" role="0.7.1"><primary sortas="tp_debug_timestamped_log_handler">tp_debug_timestamped_log_handler</primary></indexterm><programlisting><link linkend="void">void</link>                tp_debug_timestamped_log_handler    (const <link linkend="gchar">gchar</link> *log_domain,
                                                         <link linkend="GLogLevelFlags">GLogLevelFlags</link> log_level,
                                                         const <link linkend="gchar">gchar</link> *message,
                                                         <link linkend="gpointer">gpointer</link> ignored);</programlisting>
<para>
A <link linkend="GLogFunc"><type>GLogFunc</type></link> that prepends the UTC time (currently in ISO 8601 format,
with microsecond resolution) to the message, then calls
g_log_default_handler.
</para>
<para>
Intended usage is:
</para>
<para>
<informalexample><programlisting>if (g_getenv ("MYPROG_TIMING") != NULL)
  g_log_set_default_handler (tp_debug_timestamped_log_handler, NULL);
</programlisting></informalexample>
</para>
<para>
If telepathy-glib was compiled with --disable-debug (not recommended),
this function is equivalent to <link linkend="g-log-default-handler"><function>g_log_default_handler()</function></link>.
</para>
<para>
Changed in 0.8.UNRELEASED: timestamps are now printed in UTC, in
RFC-3339 format. Previously, they were printed in local time, in a
format similar to RFC-3339.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>log_domain</parameter>&#160;:</term>
<listitem><simpara> the message's log domain
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>log_level</parameter>&#160;:</term>
<listitem><simpara> the log level of the message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> the message to process
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ignored</parameter>&#160;:</term>
<listitem><simpara> not used
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.1</para></refsect2>
<refsect2 id="tp-debug-set-flags-from-string" role="function" condition="deprecated:">
<title>tp_debug_set_flags_from_string ()</title>
<indexterm zone="tp-debug-set-flags-from-string" role="deprecated"><primary sortas="tp_debug_set_flags_from_string">tp_debug_set_flags_from_string</primary></indexterm><programlisting><link linkend="void">void</link>                tp_debug_set_flags_from_string      (const <link linkend="gchar">gchar</link> *flags_string);</programlisting>
<warning><para><literal>tp_debug_set_flags_from_string</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Set the debug flags indicated by <parameter>flags_string</parameter>, in addition to any already
set. Unlike <link linkend="tp-debug-set-flags"><function>tp_debug_set_flags()</function></link>, this enables persistence like
<link linkend="tp-debug-set-persistent"><function>tp_debug_set_persistent()</function></link> if the "persist" flag is present or the string
is "all" - this turns out to be unhelpful, as persistence should be
orthogonal.
</para>
<para>
The parsing matches that of <link linkend="g-parse-debug-string"><function>g_parse_debug_string()</function></link>.
</para>
<para>
If telepathy-glib was compiled with --disable-debug (not recommended),
this function does nothing.
</para>
<para>
<parameter>deprecated</parameter> since 0.6.1. Use <link linkend="tp-debug-set-flags"><function>tp_debug_set_flags()</function></link> and
<link linkend="tp-debug-set-persistent"><function>tp_debug_set_persistent()</function></link> instead</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>flags_string</parameter>&#160;:</term>
<listitem><simpara> The flags to set, comma-separated. If <link linkend="NULL--CAPS"><literal>NULL</literal></link> or empty,
 no additional flags are set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-debug-set-flags-from-env" role="function" condition="deprecated:">
<title>tp_debug_set_flags_from_env ()</title>
<indexterm zone="tp-debug-set-flags-from-env" role="deprecated"><primary sortas="tp_debug_set_flags_from_env">tp_debug_set_flags_from_env</primary></indexterm><programlisting><link linkend="void">void</link>                tp_debug_set_flags_from_env         (const <link linkend="gchar">gchar</link> *var);</programlisting>
<warning><para><literal>tp_debug_set_flags_from_env</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Equivalent to
<literal>tp_debug_set_flags_from_string (g_getenv (var))</literal>,
and has the same problem with persistence being included in "all".
</para>
<para>
If telepathy-glib was compiled with --disable-debug (not recommended),
this function does nothing.
</para>
<para>
<parameter>deprecated</parameter> since 0.6.1. Use tp_debug_set_flags(g_getenv(...)) and
<link linkend="tp-debug-set-persistent"><function>tp_debug_set_persistent()</function></link> instead</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>var</parameter>&#160;:</term>
<listitem><simpara> The name of the environment variable to parse
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-debug-set-all-flags" role="function" condition="deprecated:">
<title>tp_debug_set_all_flags ()</title>
<indexterm zone="tp-debug-set-all-flags" role="deprecated"><primary sortas="tp_debug_set_all_flags">tp_debug_set_all_flags</primary></indexterm><programlisting><link linkend="void">void</link>                tp_debug_set_all_flags              (void);</programlisting>
<warning><para><literal>tp_debug_set_all_flags</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Activate all possible debug modes. This also activates persistent mode,
which should have been orthogonal.
</para>
<para>
If telepathy-glib was compiled with --disable-debug (not recommended),
this function does nothing.
</para>
<para>
<parameter>deprecated</parameter> since 0.6.1. Use tp_debug_set_flags ("all") and
<link linkend="tp-debug-set-persistent"><function>tp_debug_set_persistent()</function></link> instead.</para>
<para>
</para></refsect2>

</refsect1>




</refentry>
