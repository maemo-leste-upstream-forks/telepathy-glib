<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-proxy">
<refmeta>
<refentrytitle role="top_of_page" id="telepathy-glib-proxy.top_of_page">TpProxy</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>TpProxy</refname>
<refpurpose>base class for Telepathy client proxy objects</refpurpose>
</refnamediv>

<refsynopsisdiv id="telepathy-glib-proxy.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>
<anchor id="TpProxy"/>
<synopsis>

#include &lt;telepathy-glib/proxy.h&gt;

                    <link linkend="TpProxy-struct">TpProxy</link>;
                    <link linkend="TpProxyClass">TpProxyClass</link>;
#define             <link linkend="tp-proxy-has-interface">tp_proxy_has_interface</link>              (self, interface)
<link linkend="gboolean">gboolean</link>            <link linkend="tp-proxy-has-interface-by-id">tp_proxy_has_interface_by_id</link>        (<link linkend="gpointer">gpointer</link> self,
                                                         <link linkend="GQuark">GQuark</link> interface);
                    <link linkend="TpProxyPendingCall">TpProxyPendingCall</link>;
<link linkend="void">void</link>                <link linkend="tp-proxy-pending-call-cancel">tp_proxy_pending_call_cancel</link>        (<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> *pc);
                    <link linkend="TpProxySignalConnection">TpProxySignalConnection</link>;
<link linkend="void">void</link>                <link linkend="tp-proxy-signal-connection-disconnect">tp_proxy_signal_connection_disconnect</link>
                                                        (<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> *sc);
<link linkend="TpDBusDaemon">TpDBusDaemon</link> *      <link linkend="tp-proxy-get-dbus-daemon">tp_proxy_get_dbus_daemon</link>            (<link linkend="gpointer">gpointer</link> self);
<link linkend="DBusGConnection">DBusGConnection</link> *   <link linkend="tp-proxy-get-dbus-connection">tp_proxy_get_dbus_connection</link>        (<link linkend="gpointer">gpointer</link> self);
const <link linkend="gchar">gchar</link> *       <link linkend="tp-proxy-get-bus-name">tp_proxy_get_bus_name</link>               (<link linkend="gpointer">gpointer</link> self);
const <link linkend="gchar">gchar</link> *       <link linkend="tp-proxy-get-object-path">tp_proxy_get_object_path</link>            (<link linkend="gpointer">gpointer</link> self);
const <link linkend="GError">GError</link> *      <link linkend="tp-proxy-get-invalidated">tp_proxy_get_invalidated</link>            (<link linkend="gpointer">gpointer</link> self);
<link linkend="void">void</link>                <link linkend="tp-proxy-dbus-error-to-gerror">tp_proxy_dbus_error_to_gerror</link>       (<link linkend="gpointer">gpointer</link> self,
                                                         const <link linkend="char">char</link> *dbus_error,
                                                         const <link linkend="char">char</link> *debug_message,
                                                         <link linkend="GError">GError</link> **error);
#define             <link linkend="TP-DBUS-ERRORS--CAPS">TP_DBUS_ERRORS</link>
enum                <link linkend="TpDBusError">TpDBusError</link>;
</synopsis>
</refsynopsisdiv>

<refsect1 id="telepathy-glib-proxy.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----TpProxy
         +----<link linkend="TpAccount">TpAccount</link>
         +----<link linkend="TpAccountManager">TpAccountManager</link>
         +----<link linkend="TpChannel">TpChannel</link>
         +----<link linkend="TpChannelDispatcher">TpChannelDispatcher</link>
         +----<link linkend="TpChannelDispatchOperation">TpChannelDispatchOperation</link>
         +----<link linkend="TpChannelRequest">TpChannelRequest</link>
         +----<link linkend="TpClient">TpClient</link>
         +----<link linkend="TpConnection">TpConnection</link>
         +----<link linkend="TpConnectionManager">TpConnectionManager</link>
         +----<link linkend="TpDBusDaemon">TpDBusDaemon</link>
         +----<link linkend="TpMediaSessionHandler">TpMediaSessionHandler</link>
         +----<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link>
</synopsis>
</refsect1>





<refsect1 id="telepathy-glib-proxy.properties" role="properties">
<title role="properties.title">Properties</title>
<synopsis>
  &quot;<link linkend="TpProxy--bus-name">bus-name</link>&quot;                 <link linkend="gchar">gchar</link>*                : Read / Write / Construct Only
  &quot;<link linkend="TpProxy--dbus-connection">dbus-connection</link>&quot;          <link linkend="DBusGConnection">DBusGConnection</link>*      : Read / Write / Construct Only
  &quot;<link linkend="TpProxy--dbus-daemon">dbus-daemon</link>&quot;              <link linkend="TpDBusDaemon">TpDBusDaemon</link>*         : Read / Write / Construct Only
  &quot;<link linkend="TpProxy--interfaces">interfaces</link>&quot;               <link linkend="GStrv">GStrv</link>*                : Read
  &quot;<link linkend="TpProxy--object-path">object-path</link>&quot;              <link linkend="gchar">gchar</link>*                : Read / Write / Construct Only
</synopsis>
</refsect1>

<refsect1 id="telepathy-glib-proxy.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="TpProxy-interface-added">interface-added</link>&quot;                                : Run Last / Has Details
  &quot;<link linkend="TpProxy-invalidated">invalidated</link>&quot;                                    : Run Last / Has Details
</synopsis>
</refsect1>


<refsect1 id="telepathy-glib-proxy.description" role="desc">
<title role="desc.title">Description</title>
<para>
<link linkend="TpProxy"><type>TpProxy</type></link> is a base class for Telepathy client-side proxies, which represent
an object accessed via D-Bus and provide access to its methods and signals.</para>
<para>
</para>
</refsect1>

<refsect1 id="telepathy-glib-proxy.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="TpProxy-struct" role="struct">
<title>TpProxy</title>
<indexterm zone="TpProxy-struct" role="0.7.1"><primary sortas="TpProxy">TpProxy</primary></indexterm><programlisting>typedef struct _TpProxy TpProxy;</programlisting>
<para>
Structure representing a Telepathy client-side proxy.</para>
<para>
</para><variablelist role="struct">
</variablelist><para role="since">Since 0.7.1</para></refsect2>
<refsect2 id="TpProxyClass" role="struct" condition="since:0.7.1">
<title>TpProxyClass</title>
<indexterm zone="TpProxyClass" role="0.7.1"><primary sortas="TpProxyClass">TpProxyClass</primary></indexterm><programlisting>typedef struct {
    GObjectClass parent_class;

    GQuark interface;

    unsigned int must_have_unique_name:1;
    guint _reserved_flags:31;

    GCallback _reserved[4];
    gpointer priv;
} TpProxyClass;
</programlisting>
<para>
The class of a <link linkend="TpProxy"><type>TpProxy</type></link>.</para>
<para>
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="GObjectClass">GObjectClass</link>&#160;<structfield>parent_class</structfield>;</term>
<listitem><simpara> The parent class structure
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GQuark">GQuark</link>&#160;<structfield>interface</structfield>;</term>
<listitem><simpara> If set non-zero by a subclass, <link linkend="TpProxy"><type>TpProxy</type></link> will
   automatically add this interface in its constructor
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>unsigned&#160;<link linkend="int">int</link>&#160;<structfield>must_have_unique_name</structfield>&#160;:1;</term>
<listitem><simpara> If set <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> by a subclass, the <link linkend="TpProxy"><type>TpProxy</type></link>
   constructor will fail if a well-known bus name is given
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint">guint</link>&#160;<structfield>_reserved_flags</structfield>&#160;:31;</term>
<listitem><simpara> Reserved for future expansion
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GCallback">GCallback</link>&#160;<structfield>_reserved</structfield>[4];</term>
<listitem><simpara> Reserved for future expansion
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gpointer">gpointer</link>&#160;<structfield>priv</structfield>;</term>
<listitem><simpara> Opaque pointer for private data
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since 0.7.1</para></refsect2>
<refsect2 id="tp-proxy-has-interface" role="macro" condition="since:0.7.1">
<title>tp_proxy_has_interface()</title>
<indexterm zone="tp-proxy-has-interface" role="0.7.1"><primary sortas="tp_proxy_has_interface">tp_proxy_has_interface</primary></indexterm><programlisting>#define             tp_proxy_has_interface(self, interface)</programlisting>
<para>
A macro wrapping <link linkend="tp-proxy-has-interface-by-id"><function>tp_proxy_has_interface_by_id()</function></link>. Returns <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if this
proxy implements the given interface.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link> (or subclass)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>interface</parameter>&#160;:</term>
<listitem><simpara> the interface required, as a string
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.1</para></refsect2>
<refsect2 id="tp-proxy-has-interface-by-id" role="function" condition="since:0.7.1">
<title>tp_proxy_has_interface_by_id ()</title>
<indexterm zone="tp-proxy-has-interface-by-id" role="0.7.1"><primary sortas="tp_proxy_has_interface_by_id">tp_proxy_has_interface_by_id</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_proxy_has_interface_by_id        (<link linkend="gpointer">gpointer</link> self,
                                                         <link linkend="GQuark">GQuark</link> interface);</programlisting>
<para>
<!-- --></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link> (or subclass)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>interface</parameter>&#160;:</term>
<listitem><simpara> quark representing the interface required
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if this proxy implements the given interface.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.1</para></refsect2>
<refsect2 id="TpProxyPendingCall" role="struct" condition="since:0.7.1">
<title>TpProxyPendingCall</title>
<indexterm zone="TpProxyPendingCall" role="0.7.1"><primary sortas="TpProxyPendingCall">TpProxyPendingCall</primary></indexterm><programlisting>typedef struct _TpProxyPendingCall TpProxyPendingCall;</programlisting>
<para>
Opaque structure representing a pending D-Bus call.</para>
<para>
</para><para role="since">Since 0.7.1</para></refsect2>
<refsect2 id="tp-proxy-pending-call-cancel" role="function" condition="since:0.7.1">
<title>tp_proxy_pending_call_cancel ()</title>
<indexterm zone="tp-proxy-pending-call-cancel" role="0.7.1"><primary sortas="tp_proxy_pending_call_cancel">tp_proxy_pending_call_cancel</primary></indexterm><programlisting><link linkend="void">void</link>                tp_proxy_pending_call_cancel        (<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> *pc);</programlisting>
<para>
Cancel the given pending call. After this function returns, you
must not assume that the pending call remains valid, but you must not
explicitly free it either.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pc</parameter>&#160;:</term>
<listitem><simpara> a pending call
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.1</para></refsect2>
<refsect2 id="TpProxySignalConnection" role="struct" condition="since:0.7.1">
<title>TpProxySignalConnection</title>
<indexterm zone="TpProxySignalConnection" role="0.7.1"><primary sortas="TpProxySignalConnection">TpProxySignalConnection</primary></indexterm><programlisting>typedef struct _TpProxySignalConnection TpProxySignalConnection;</programlisting>
<para>
Opaque structure representing a D-Bus signal connection.</para>
<para>
</para><para role="since">Since 0.7.1</para></refsect2>
<refsect2 id="tp-proxy-signal-connection-disconnect" role="function" condition="since:0.7.1">
<title>tp_proxy_signal_connection_disconnect ()</title>
<indexterm zone="tp-proxy-signal-connection-disconnect" role="0.7.1"><primary sortas="tp_proxy_signal_connection_disconnect">tp_proxy_signal_connection_disconnect</primary></indexterm><programlisting><link linkend="void">void</link>                tp_proxy_signal_connection_disconnect
                                                        (<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> *sc);</programlisting>
<para>
Disconnect the given signal connection. After this function returns, you
must not assume that the signal connection remains valid, but you must not
explicitly free it either.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara> a signal connection
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.1</para></refsect2>
<refsect2 id="tp-proxy-get-dbus-daemon" role="function" condition="since:0.7.17">
<title>tp_proxy_get_dbus_daemon ()</title>
<indexterm zone="tp-proxy-get-dbus-daemon" role="0.7.17"><primary sortas="tp_proxy_get_dbus_daemon">tp_proxy_get_dbus_daemon</primary></indexterm><programlisting><link linkend="TpDBusDaemon">TpDBusDaemon</link> *      tp_proxy_get_dbus_daemon            (<link linkend="gpointer">gpointer</link> self);</programlisting>
<para>
<!-- --></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpProxy"><type>TpProxy</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a borrowed reference to the <link linkend="TpDBusDaemon"><type>TpDBusDaemon</type></link> for this object, if any;
 always <link linkend="NULL--CAPS"><literal>NULL</literal></link> if this object is itself a <link linkend="TpDBusDaemon"><type>TpDBusDaemon</type></link>. The caller must
 reference the returned object with <link linkend="g-object-ref"><function>g_object_ref()</function></link> if it will be kept.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.17</para></refsect2>
<refsect2 id="tp-proxy-get-dbus-connection" role="function" condition="since:0.7.17">
<title>tp_proxy_get_dbus_connection ()</title>
<indexterm zone="tp-proxy-get-dbus-connection" role="0.7.17"><primary sortas="tp_proxy_get_dbus_connection">tp_proxy_get_dbus_connection</primary></indexterm><programlisting><link linkend="DBusGConnection">DBusGConnection</link> *   tp_proxy_get_dbus_connection        (<link linkend="gpointer">gpointer</link> self);</programlisting>
<para>
<!-- --></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpProxy"><type>TpProxy</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a borrowed reference to the D-Bus connection used by this object.
 The caller must reference the returned pointer with
 <link linkend="dbus-g-connection-ref"><function>dbus_g_connection_ref()</function></link> if it will be kept.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.17</para></refsect2>
<refsect2 id="tp-proxy-get-bus-name" role="function" condition="since:0.7.17">
<title>tp_proxy_get_bus_name ()</title>
<indexterm zone="tp-proxy-get-bus-name" role="0.7.17"><primary sortas="tp_proxy_get_bus_name">tp_proxy_get_bus_name</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       tp_proxy_get_bus_name               (<link linkend="gpointer">gpointer</link> self);</programlisting>
<para>
<!-- --></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpProxy"><type>TpProxy</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the bus name of the application exporting the object. The caller
 must copy the string with <link linkend="g-strdup"><function>g_strdup()</function></link> if it will be kept.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.17</para></refsect2>
<refsect2 id="tp-proxy-get-object-path" role="function" condition="since:0.7.17">
<title>tp_proxy_get_object_path ()</title>
<indexterm zone="tp-proxy-get-object-path" role="0.7.17"><primary sortas="tp_proxy_get_object_path">tp_proxy_get_object_path</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       tp_proxy_get_object_path            (<link linkend="gpointer">gpointer</link> self);</programlisting>
<para>
<!-- --></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpProxy"><type>TpProxy</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the object path of the remote object. The caller must copy the
 string with <link linkend="g-strdup"><function>g_strdup()</function></link> if it will be kept.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.17</para></refsect2>
<refsect2 id="tp-proxy-get-invalidated" role="function" condition="since:0.7.17">
<title>tp_proxy_get_invalidated ()</title>
<indexterm zone="tp-proxy-get-invalidated" role="0.7.17"><primary sortas="tp_proxy_get_invalidated">tp_proxy_get_invalidated</primary></indexterm><programlisting>const <link linkend="GError">GError</link> *      tp_proxy_get_invalidated            (<link linkend="gpointer">gpointer</link> self);</programlisting>
<para>
<!-- --></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpProxy"><type>TpProxy</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the reason this proxy was invalidated, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if has not been
 invalidated. The caller must copy the error, for instance with
 <link linkend="g-error-copy"><function>g_error_copy()</function></link>, if it will be kept.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.17</para></refsect2>
<refsect2 id="tp-proxy-dbus-error-to-gerror" role="function" condition="since:0.7.24">
<title>tp_proxy_dbus_error_to_gerror ()</title>
<indexterm zone="tp-proxy-dbus-error-to-gerror" role="0.7.24"><primary sortas="tp_proxy_dbus_error_to_gerror">tp_proxy_dbus_error_to_gerror</primary></indexterm><programlisting><link linkend="void">void</link>                tp_proxy_dbus_error_to_gerror       (<link linkend="gpointer">gpointer</link> self,
                                                         const <link linkend="char">char</link> *dbus_error,
                                                         const <link linkend="char">char</link> *debug_message,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Convert a D-Bus error name into a GError as if it was returned by a method
on this proxy. This method is useful when D-Bus error names are emitted in
signals, such as Connection.ConnectionError and
Group.MembersChangedDetailed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="TpProxy"><type>TpProxy</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dbus_error</parameter>&#160;:</term>
<listitem><simpara> a D-Bus error name, for instance from the callback for
             <link linkend="tp-cli-connection-connect-to-connection-error"><function>tp_cli_connection_connect_to_connection_error()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>debug_message</parameter>&#160;:</term>
<listitem><simpara> a debug message that accompanied the error name, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> used to return the corresponding <link linkend="GError"><type>GError</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.24</para></refsect2>
<refsect2 id="TP-DBUS-ERRORS--CAPS" role="macro" condition="since:0.7.1">
<title>TP_DBUS_ERRORS</title>
<indexterm zone="TP-DBUS-ERRORS--CAPS" role="0.7.1"><primary sortas="TP_DBUS_ERRORS">TP_DBUS_ERRORS</primary></indexterm><programlisting>#define TP_DBUS_ERRORS (tp_dbus_errors_quark ())
</programlisting>
<para>
<link linkend="GError"><type>GError</type></link> domain representing D-Bus errors not directly related to
Telepathy, for use by <link linkend="TpProxy"><type>TpProxy</type></link>. The <parameter>code</parameter> in a <link linkend="GError"><type>GError</type></link> with this
domain must be a member of <link linkend="TpDBusError"><type>TpDBusError</type></link>.
</para>
<para>
This macro expands to a function call returning a <link linkend="GQuark"><type>GQuark</type></link>.</para>
<para>
</para><para role="since">Since 0.7.1</para></refsect2>
<refsect2 id="TpDBusError" role="enum" condition="since:0.7.1">
<title>enum TpDBusError</title>
<indexterm zone="TpDBusError" role="0.7.1"><primary sortas="TpDBusError">TpDBusError</primary></indexterm><programlisting>typedef enum {
    TP_DBUS_ERROR_UNKNOWN_REMOTE_ERROR = 0,
    TP_DBUS_ERROR_PROXY_UNREFERENCED = 1,
    TP_DBUS_ERROR_NO_INTERFACE = 2,
    TP_DBUS_ERROR_NAME_OWNER_LOST = 3,
    TP_DBUS_ERROR_INVALID_BUS_NAME = 4,
    TP_DBUS_ERROR_INVALID_INTERFACE_NAME = 5,
    TP_DBUS_ERROR_INVALID_OBJECT_PATH = 6,
    TP_DBUS_ERROR_INVALID_MEMBER_NAME = 7,
    TP_DBUS_ERROR_OBJECT_REMOVED = 8,
    TP_DBUS_ERROR_CANCELLED = 9,
    TP_DBUS_ERROR_INCONSISTENT = 10,
    NUM_TP_DBUS_ERRORS
} TpDBusError;
</programlisting>
<para>
<link linkend="GError"><type>GError</type></link> codes for use with the <link linkend="TP-DBUS-ERRORS--CAPS"><literal>TP_DBUS_ERRORS</literal></link> domain.</para>
<para>
</para><variablelist role="enum">
<varlistentry id="TP-DBUS-ERROR-UNKNOWN-REMOTE-ERROR--CAPS" role="constant">
<term><literal>TP_DBUS_ERROR_UNKNOWN_REMOTE_ERROR</literal></term>
<listitem><simpara> Raised if the error raised by
 a remote D-Bus object is not recognised
</simpara></listitem>
</varlistentry>
<varlistentry id="TP-DBUS-ERROR-PROXY-UNREFERENCED--CAPS" role="constant">
<term><literal>TP_DBUS_ERROR_PROXY_UNREFERENCED</literal></term>
<listitem><simpara> Emitted in <link linkend="TpProxy--invalidated"><type>"invalidated"</type></link>
 when the <link linkend="TpProxy"><type>TpProxy</type></link> has lost its last reference
</simpara></listitem>
</varlistentry>
<varlistentry id="TP-DBUS-ERROR-NO-INTERFACE--CAPS" role="constant">
<term><literal>TP_DBUS_ERROR_NO_INTERFACE</literal></term>
<listitem><simpara> Raised by <link linkend="TpProxy"><type>TpProxy</type></link> methods if the remote
 object does not appear to have the required interface
</simpara></listitem>
</varlistentry>
<varlistentry id="TP-DBUS-ERROR-NAME-OWNER-LOST--CAPS" role="constant">
<term><literal>TP_DBUS_ERROR_NAME_OWNER_LOST</literal></term>
<listitem><simpara> Emitted in <link linkend="TpProxy--invalidated"><type>"invalidated"</type></link> if the
 remote process loses ownership of its bus name, and raised by
 any <link linkend="TpProxy"><type>TpProxy</type></link> methods that have not had a reply at that time or are called
 after the proxy becomes invalid in this way (usually meaning it crashed)
</simpara></listitem>
</varlistentry>
<varlistentry id="TP-DBUS-ERROR-INVALID-BUS-NAME--CAPS" role="constant">
<term><literal>TP_DBUS_ERROR_INVALID_BUS_NAME</literal></term>
<listitem><simpara> Raised if a D-Bus bus name given is not
 valid, or is of an unacceptable type (e.g. well-known vs. unique)
</simpara></listitem>
</varlistentry>
<varlistentry id="TP-DBUS-ERROR-INVALID-INTERFACE-NAME--CAPS" role="constant">
<term><literal>TP_DBUS_ERROR_INVALID_INTERFACE_NAME</literal></term>
<listitem><simpara> Raised if a D-Bus interface or
 error name given is not valid
</simpara></listitem>
</varlistentry>
<varlistentry id="TP-DBUS-ERROR-INVALID-OBJECT-PATH--CAPS" role="constant">
<term><literal>TP_DBUS_ERROR_INVALID_OBJECT_PATH</literal></term>
<listitem><simpara> Raised if a D-Bus object path
 given is not valid
</simpara></listitem>
</varlistentry>
<varlistentry id="TP-DBUS-ERROR-INVALID-MEMBER-NAME--CAPS" role="constant">
<term><literal>TP_DBUS_ERROR_INVALID_MEMBER_NAME</literal></term>
<listitem><simpara> Raised if a D-Bus method or signal
 name given is not valid
</simpara></listitem>
</varlistentry>
<varlistentry id="TP-DBUS-ERROR-OBJECT-REMOVED--CAPS" role="constant">
<term><literal>TP_DBUS_ERROR_OBJECT_REMOVED</literal></term>
<listitem><simpara> A generic error which can be used with
 <link linkend="TpProxy--invalidated"><type>"invalidated"</type></link> to indicate an application-specific indication
 that the remote object no longer exists, if no more specific error
 is available.
</simpara></listitem>
</varlistentry>
<varlistentry id="TP-DBUS-ERROR-CANCELLED--CAPS" role="constant">
<term><literal>TP_DBUS_ERROR_CANCELLED</literal></term>
<listitem><simpara> Raised from calls that re-enter the main
 loop (*_run_*) if they are cancelled
</simpara></listitem>
</varlistentry>
<varlistentry id="TP-DBUS-ERROR-INCONSISTENT--CAPS" role="constant">
<term><literal>TP_DBUS_ERROR_INCONSISTENT</literal></term>
<listitem><simpara> Raised if information received from a remote
 object is inconsistent or otherwise obviously wrong (added in 0.7.17)
</simpara></listitem>
</varlistentry>
<varlistentry id="NUM-TP-DBUS-ERRORS--CAPS" role="constant">
<term><literal>NUM_TP_DBUS_ERRORS</literal></term>
<listitem><simpara> 1 more than the highest valid <link linkend="TpDBusError"><type>TpDBusError</type></link> at the
 time of compilation
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since 0.7.1</para></refsect2>

</refsect1>
<refsect1 id="telepathy-glib-proxy.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="TpProxy--bus-name" role="property"><title>The <literal>&quot;bus-name&quot;</literal> property</title>
<indexterm zone="TpProxy--bus-name"><primary sortas="TpProxy:bus-name">TpProxy:bus-name</primary></indexterm><programlisting>  &quot;bus-name&quot;                 <link linkend="gchar">gchar</link>*                : Read / Write / Construct Only</programlisting>
<para>
The D-Bus bus name for this object. Read-only except during construction.</para>
<para>
</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="TpProxy--dbus-connection" role="property"><title>The <literal>&quot;dbus-connection&quot;</literal> property</title>
<indexterm zone="TpProxy--dbus-connection"><primary sortas="TpProxy:dbus-connection">TpProxy:dbus-connection</primary></indexterm><programlisting>  &quot;dbus-connection&quot;          <link linkend="DBusGConnection">DBusGConnection</link>*      : Read / Write / Construct Only</programlisting>
<para>
The D-Bus connection for this object. Read-only except during
construction.</para>
<para>
</para></refsect2>
<refsect2 id="TpProxy--dbus-daemon" role="property"><title>The <literal>&quot;dbus-daemon&quot;</literal> property</title>
<indexterm zone="TpProxy--dbus-daemon"><primary sortas="TpProxy:dbus-daemon">TpProxy:dbus-daemon</primary></indexterm><programlisting>  &quot;dbus-daemon&quot;              <link linkend="TpDBusDaemon">TpDBusDaemon</link>*         : Read / Write / Construct Only</programlisting>
<para>
The D-Bus daemon for this object (this object itself, if it is a
TpDBusDaemon). Read-only except during construction.</para>
<para>
</para></refsect2>
<refsect2 id="TpProxy--interfaces" role="property"><title>The <literal>&quot;interfaces&quot;</literal> property</title>
<indexterm zone="TpProxy--interfaces"><primary sortas="TpProxy:interfaces">TpProxy:interfaces</primary></indexterm><programlisting>  &quot;interfaces&quot;               <link linkend="GStrv">GStrv</link>*                : Read</programlisting>
<para>
Known D-Bus interface names for this object.</para>
<para>
</para></refsect2>
<refsect2 id="TpProxy--object-path" role="property"><title>The <literal>&quot;object-path&quot;</literal> property</title>
<indexterm zone="TpProxy--object-path"><primary sortas="TpProxy:object-path">TpProxy:object-path</primary></indexterm><programlisting>  &quot;object-path&quot;              <link linkend="gchar">gchar</link>*                : Read / Write / Construct Only</programlisting>
<para>
The D-Bus object path for this object. Read-only except during
construction.</para>
<para>
</para><para>Default value: NULL</para>
</refsect2>
</refsect1>

<refsect1 id="telepathy-glib-proxy.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="TpProxy-interface-added" role="signal"><title>The <literal>&quot;interface-added&quot;</literal> signal</title>
<indexterm zone="TpProxy-interface-added"><primary sortas="TpProxy::interface-added">TpProxy::interface-added</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpProxy">TpProxy</link>    *self,
                                                        <link linkend="guint">guint</link>       id,
                                                        <link linkend="DBusGProxy">DBusGProxy</link> *proxy,
                                                        <link linkend="gpointer">gpointer</link>    user_data)      : Run Last / Has Details</programlisting>
<para>
Emitted when this proxy has gained an interface. It is not guaranteed
to be emitted immediately, but will be emitted before the interface is
first used (at the latest: before it's returned from
<link linkend="tp-proxy-borrow-interface-by-id"><function>tp_proxy_borrow_interface_by_id()</function></link>, any signal is connected, or any
method is called).
</para>
<para>
The intended use is to call <link linkend="dbus-g-proxy-add-signals"><function>dbus_g_proxy_add_signals()</function></link>. This signal
should only be used by TpProy implementations</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> the proxy object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> the GQuark representing the interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the dbus-glib proxy representing the interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpProxy-invalidated" role="signal"><title>The <literal>&quot;invalidated&quot;</literal> signal</title>
<indexterm zone="TpProxy-invalidated"><primary sortas="TpProxy::invalidated">TpProxy::invalidated</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpProxy">TpProxy</link> *self,
                                                        <link linkend="guint">guint</link>    domain,
                                                        <link linkend="gint">gint</link>     code,
                                                        <link linkend="gchar">gchar</link>   *message,
                                                        <link linkend="gpointer">gpointer</link> user_data)      : Run Last / Has Details</programlisting>
<para>
Emitted when this proxy has been become invalid for
whatever reason. Any more specific signal should be emitted first.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> the proxy object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>domain</parameter>&#160;:</term>
<listitem><simpara> domain of a GError indicating why this proxy was invalidated
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>code</parameter>&#160;:</term>
<listitem><simpara> error code of a GError indicating why this proxy was invalidated
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> a message associated with the error
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>


<refsect1 id="telepathy-glib-proxy.see-also">
<title>See Also</title>
#TpChannel, <link linkend="TpConnection"><type>TpConnection</type></link>, <link linkend="TpConnectionManager"><type>TpConnectionManager</type></link>
</refsect1>

</refentry>
