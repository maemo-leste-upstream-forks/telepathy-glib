<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-media-interfaces">
<refmeta>
<refentrytitle role="top_of_page" id="telepathy-glib-media-interfaces.top_of_page">TpMediaSessionHandler, TpMediaStreamHandler</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>TpMediaSessionHandler, TpMediaStreamHandler</refname>
<refpurpose>proxy objects for Telepathy media streaming</refpurpose>
</refnamediv>

<refsynopsisdiv id="telepathy-glib-media-interfaces.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>
<anchor id="TpMediaSessionHandler"/><anchor id="TpMediaStreamHandler"/>
<synopsis>

#include &lt;telepathy-glib/media-interfaces.h&gt;

<link linkend="TpMediaSessionHandler">TpMediaSessionHandler</link> * <link linkend="tp-media-session-handler-new">tp_media_session_handler_new</link>    (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *dbus,
                                                         const <link linkend="gchar">gchar</link> *unique_name,
                                                         const <link linkend="gchar">gchar</link> *object_path,
                                                         <link linkend="GError">GError</link> **error);
                    <link linkend="TpMediaSessionHandler-struct">TpMediaSessionHandler</link>;
                    <link linkend="TpMediaSessionHandlerClass">TpMediaSessionHandlerClass</link>;

<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> * <link linkend="tp-media-stream-handler-new">tp_media_stream_handler_new</link>      (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *dbus,
                                                         const <link linkend="gchar">gchar</link> *unique_name,
                                                         const <link linkend="gchar">gchar</link> *object_path,
                                                         <link linkend="GError">GError</link> **error);
                    <link linkend="TpMediaStreamHandler-struct">TpMediaStreamHandler</link>;
                    <link linkend="TpMediaStreamHandlerClass">TpMediaStreamHandlerClass</link>;

<link linkend="void">void</link>                (<link linkend="tp-cli-media-session-handler-callback-for-error">*tp_cli_media_session_handler_callback_for_error</link>)
                                                        (<link linkend="TpMediaSessionHandler">TpMediaSessionHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-media-session-handler-call-error">tp_cli_media_session_handler_call_error</link>
                                                        (<link linkend="TpMediaSessionHandler">TpMediaSessionHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Error_Code,
                                                         const <link linkend="gchar">gchar</link> *in_Message,
                                                         <link linkend="tp-cli-media-session-handler-callback-for-error">tp_cli_media_session_handler_callback_for_error</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-media-session-handler-run-error">tp_cli_media_session_handler_run_error</link>
                                                        (<link linkend="TpMediaSessionHandler">TpMediaSessionHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Error_Code,
                                                         const <link linkend="gchar">gchar</link> *in_Message,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="void">void</link>                (<link linkend="tp-cli-media-session-handler-callback-for-ready">*tp_cli_media_session_handler_callback_for_ready</link>)
                                                        (<link linkend="TpMediaSessionHandler">TpMediaSessionHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-media-session-handler-call-ready">tp_cli_media_session_handler_call_ready</link>
                                                        (<link linkend="TpMediaSessionHandler">TpMediaSessionHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-media-session-handler-callback-for-ready">tp_cli_media_session_handler_callback_for_ready</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-media-session-handler-run-ready">tp_cli_media_session_handler_run_ready</link>
                                                        (<link linkend="TpMediaSessionHandler">TpMediaSessionHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="void">void</link>                (<link linkend="tp-cli-media-session-handler-signal-callback-new-stream-handler">*tp_cli_media_session_handler_signal_callback_new_stream_handler</link>)
                                                        (<link linkend="TpMediaSessionHandler">TpMediaSessionHandler</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg_Stream_Handler,
                                                         <link linkend="guint">guint</link> arg_ID,
                                                         <link linkend="guint">guint</link> arg_Media_Type,
                                                         <link linkend="guint">guint</link> arg_Direction,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-media-session-handler-connect-to-new-stream-handler">tp_cli_media_session_handler_connect_to_new_stream_handler</link>
                                                        (<link linkend="TpMediaSessionHandler">TpMediaSessionHandler</link> *proxy,
                                                         <link linkend="tp-cli-media-session-handler-signal-callback-new-stream-handler">tp_cli_media_session_handler_signal_callback_new_stream_handler</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);

<link linkend="void">void</link>                (<link linkend="tp-cli-media-stream-handler-callback-for-codec-choice">*tp_cli_media_stream_handler_callback_for_codec_choice</link>)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-media-stream-handler-call-codec-choice">tp_cli_media_stream_handler_call_codec_choice</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Codec_ID,
                                                         <link linkend="tp-cli-media-stream-handler-callback-for-codec-choice">tp_cli_media_stream_handler_callback_for_codec_choice</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-media-stream-handler-run-codec-choice">tp_cli_media_stream_handler_run_codec_choice</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Codec_ID,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="void">void</link>                (<link linkend="tp-cli-media-stream-handler-callback-for-error">*tp_cli_media_stream_handler_callback_for_error</link>)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-media-stream-handler-call-error">tp_cli_media_stream_handler_call_error</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Error_Code,
                                                         const <link linkend="gchar">gchar</link> *in_Message,
                                                         <link linkend="tp-cli-media-stream-handler-callback-for-error">tp_cli_media_stream_handler_callback_for_error</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-media-stream-handler-run-error">tp_cli_media_stream_handler_run_error</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Error_Code,
                                                         const <link linkend="gchar">gchar</link> *in_Message,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="void">void</link>                (<link linkend="tp-cli-media-stream-handler-callback-for-native-candidates-prepared">*tp_cli_media_stream_handler_callback_for_native_candidates_prepared</link>)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-media-stream-handler-call-native-candidates-prepared">tp_cli_media_stream_handler_call_native_candidates_prepared</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-media-stream-handler-callback-for-native-candidates-prepared">tp_cli_media_stream_handler_callback_for_native_candidates_prepared</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-media-stream-handler-run-native-candidates-prepared">tp_cli_media_stream_handler_run_native_candidates_prepared</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="void">void</link>                (<link linkend="tp-cli-media-stream-handler-callback-for-new-active-candidate-pair">*tp_cli_media_stream_handler_callback_for_new_active_candidate_pair</link>)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-media-stream-handler-call-new-active-candidate-pair">tp_cli_media_stream_handler_call_new_active_candidate_pair</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_Native_Candidate_ID,
                                                         const <link linkend="gchar">gchar</link> *in_Remote_Candidate_ID,
                                                         <link linkend="tp-cli-media-stream-handler-callback-for-new-active-candidate-pair">tp_cli_media_stream_handler_callback_for_new_active_candidate_pair</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-media-stream-handler-run-new-active-candidate-pair">tp_cli_media_stream_handler_run_new_active_candidate_pair</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_Native_Candidate_ID,
                                                         const <link linkend="gchar">gchar</link> *in_Remote_Candidate_ID,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="void">void</link>                (<link linkend="tp-cli-media-stream-handler-callback-for-new-native-candidate">*tp_cli_media_stream_handler_callback_for_new_native_candidate</link>)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-media-stream-handler-call-new-native-candidate">tp_cli_media_stream_handler_call_new_native_candidate</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_Candidate_ID,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Transports,
                                                         <link linkend="tp-cli-media-stream-handler-callback-for-new-native-candidate">tp_cli_media_stream_handler_callback_for_new_native_candidate</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-media-stream-handler-run-new-native-candidate">tp_cli_media_stream_handler_run_new_native_candidate</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_Candidate_ID,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Transports,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="void">void</link>                (<link linkend="tp-cli-media-stream-handler-callback-for-ready">*tp_cli_media_stream_handler_callback_for_ready</link>)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-media-stream-handler-call-ready">tp_cli_media_stream_handler_call_ready</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Codecs,
                                                         <link linkend="tp-cli-media-stream-handler-callback-for-ready">tp_cli_media_stream_handler_callback_for_ready</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-media-stream-handler-run-ready">tp_cli_media_stream_handler_run_ready</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Codecs,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="void">void</link>                (<link linkend="tp-cli-media-stream-handler-callback-for-set-local-codecs">*tp_cli_media_stream_handler_callback_for_set_local_codecs</link>)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-media-stream-handler-call-set-local-codecs">tp_cli_media_stream_handler_call_set_local_codecs</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Codecs,
                                                         <link linkend="tp-cli-media-stream-handler-callback-for-set-local-codecs">tp_cli_media_stream_handler_callback_for_set_local_codecs</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-media-stream-handler-run-set-local-codecs">tp_cli_media_stream_handler_run_set_local_codecs</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Codecs,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="void">void</link>                (<link linkend="tp-cli-media-stream-handler-callback-for-stream-state">*tp_cli_media_stream_handler_callback_for_stream_state</link>)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-media-stream-handler-call-stream-state">tp_cli_media_stream_handler_call_stream_state</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_State,
                                                         <link linkend="tp-cli-media-stream-handler-callback-for-stream-state">tp_cli_media_stream_handler_callback_for_stream_state</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-media-stream-handler-run-stream-state">tp_cli_media_stream_handler_run_stream_state</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_State,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="void">void</link>                (<link linkend="tp-cli-media-stream-handler-callback-for-supported-codecs">*tp_cli_media_stream_handler_callback_for_supported_codecs</link>)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-media-stream-handler-call-supported-codecs">tp_cli_media_stream_handler_call_supported_codecs</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Codecs,
                                                         <link linkend="tp-cli-media-stream-handler-callback-for-supported-codecs">tp_cli_media_stream_handler_callback_for_supported_codecs</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-media-stream-handler-run-supported-codecs">tp_cli_media_stream_handler_run_supported_codecs</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Codecs,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="void">void</link>                (<link linkend="tp-cli-media-stream-handler-signal-callback-add-remote-candidate">*tp_cli_media_stream_handler_signal_callback_add_remote_candidate</link>)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg_Candidate_ID,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *arg_Transports,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-media-stream-handler-connect-to-add-remote-candidate">tp_cli_media_stream_handler_connect_to_add_remote_candidate</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="tp-cli-media-stream-handler-signal-callback-add-remote-candidate">tp_cli_media_stream_handler_signal_callback_add_remote_candidate</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                (<link linkend="tp-cli-media-stream-handler-signal-callback-close">*tp_cli_media_stream_handler_signal_callback_close</link>)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-media-stream-handler-connect-to-close">tp_cli_media_stream_handler_connect_to_close</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="tp-cli-media-stream-handler-signal-callback-close">tp_cli_media_stream_handler_signal_callback_close</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                (<link linkend="tp-cli-media-stream-handler-signal-callback-remove-remote-candidate">*tp_cli_media_stream_handler_signal_callback_remove_remote_candidate</link>)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg_Candidate_ID,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-media-stream-handler-connect-to-remove-remote-candidate">tp_cli_media_stream_handler_connect_to_remove_remote_candidate</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="tp-cli-media-stream-handler-signal-callback-remove-remote-candidate">tp_cli_media_stream_handler_signal_callback_remove_remote_candidate</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                (<link linkend="tp-cli-media-stream-handler-signal-callback-set-active-candidate-pair">*tp_cli_media_stream_handler_signal_callback_set_active_candidate_pair</link>)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg_Native_Candidate_ID,
                                                         const <link linkend="gchar">gchar</link> *arg_Remote_Candidate_ID,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-media-stream-handler-connect-to-set-active-candidate-pair">tp_cli_media_stream_handler_connect_to_set_active_candidate_pair</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="tp-cli-media-stream-handler-signal-callback-set-active-candidate-pair">tp_cli_media_stream_handler_signal_callback_set_active_candidate_pair</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                (<link linkend="tp-cli-media-stream-handler-signal-callback-set-remote-candidate-list">*tp_cli_media_stream_handler_signal_callback_set_remote_candidate_list</link>)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *arg_Remote_Candidates,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-media-stream-handler-connect-to-set-remote-candidate-list">tp_cli_media_stream_handler_connect_to_set_remote_candidate_list</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="tp-cli-media-stream-handler-signal-callback-set-remote-candidate-list">tp_cli_media_stream_handler_signal_callback_set_remote_candidate_list</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                (<link linkend="tp-cli-media-stream-handler-signal-callback-set-remote-codecs">*tp_cli_media_stream_handler_signal_callback_set_remote_codecs</link>)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *arg_Codecs,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-media-stream-handler-connect-to-set-remote-codecs">tp_cli_media_stream_handler_connect_to_set_remote_codecs</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="tp-cli-media-stream-handler-signal-callback-set-remote-codecs">tp_cli_media_stream_handler_signal_callback_set_remote_codecs</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                (<link linkend="tp-cli-media-stream-handler-signal-callback-set-stream-playing">*tp_cli_media_stream_handler_signal_callback_set_stream_playing</link>)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gboolean">gboolean</link> arg_Playing,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-media-stream-handler-connect-to-set-stream-playing">tp_cli_media_stream_handler_connect_to_set_stream_playing</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="tp-cli-media-stream-handler-signal-callback-set-stream-playing">tp_cli_media_stream_handler_signal_callback_set_stream_playing</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                (<link linkend="tp-cli-media-stream-handler-signal-callback-set-stream-sending">*tp_cli_media_stream_handler_signal_callback_set_stream_sending</link>)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gboolean">gboolean</link> arg_Sending,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-media-stream-handler-connect-to-set-stream-sending">tp_cli_media_stream_handler_connect_to_set_stream_sending</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="tp-cli-media-stream-handler-signal-callback-set-stream-sending">tp_cli_media_stream_handler_signal_callback_set_stream_sending</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                (<link linkend="tp-cli-media-stream-handler-signal-callback-start-telephony-event">*tp_cli_media_stream_handler_signal_callback_start_telephony_event</link>)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="guchar">guchar</link> arg_Event,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-media-stream-handler-connect-to-start-telephony-event">tp_cli_media_stream_handler_connect_to_start_telephony_event</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="tp-cli-media-stream-handler-signal-callback-start-telephony-event">tp_cli_media_stream_handler_signal_callback_start_telephony_event</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                (<link linkend="tp-cli-media-stream-handler-signal-callback-stop-telephony-event">*tp_cli_media_stream_handler_signal_callback_stop_telephony_event</link>)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-media-stream-handler-connect-to-stop-telephony-event">tp_cli_media_stream_handler_connect_to_stop_telephony_event</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="tp-cli-media-stream-handler-signal-callback-stop-telephony-event">tp_cli_media_stream_handler_signal_callback_stop_telephony_event</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-media-stream-handler-call-hold-state">tp_cli_media_stream_handler_call_hold_state</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="gboolean">gboolean</link> in_Held,
                                                         <link linkend="tp-cli-media-stream-handler-callback-for-hold-state">tp_cli_media_stream_handler_callback_for_hold_state</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-media-stream-handler-call-unhold-failure">tp_cli_media_stream_handler_call_unhold_failure</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-media-stream-handler-callback-for-unhold-failure">tp_cli_media_stream_handler_callback_for_unhold_failure</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-media-stream-handler-callback-for-hold-state">*tp_cli_media_stream_handler_callback_for_hold_state</link>)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-media-stream-handler-callback-for-unhold-failure">*tp_cli_media_stream_handler_callback_for_unhold_failure</link>)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-media-stream-handler-connect-to-set-stream-held">tp_cli_media_stream_handler_connect_to_set_stream_held</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="tp-cli-media-stream-handler-signal-callback-set-stream-held">tp_cli_media_stream_handler_signal_callback_set_stream_held</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-media-stream-handler-run-hold-state">tp_cli_media_stream_handler_run_hold_state</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="gboolean">gboolean</link> in_Held,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-media-stream-handler-run-unhold-failure">tp_cli_media_stream_handler_run_unhold_failure</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
<link linkend="void">void</link>                (<link linkend="tp-cli-media-stream-handler-signal-callback-set-stream-held">*tp_cli_media_stream_handler_signal_callback_set_stream_held</link>)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gboolean">gboolean</link> arg_Held,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-media-stream-handler-call-codecs-updated">tp_cli_media_stream_handler_call_codecs_updated</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Codecs,
                                                         <link linkend="tp-cli-media-stream-handler-callback-for-codecs-updated">tp_cli_media_stream_handler_callback_for_codecs_updated</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-media-stream-handler-callback-for-codecs-updated">*tp_cli_media_stream_handler_callback_for_codecs_updated</link>)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cli-media-stream-handler-run-codecs-updated">tp_cli_media_stream_handler_run_codecs_updated</link>
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Codecs,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);
</synopsis>
</refsynopsisdiv>

<refsect1 id="telepathy-glib-media-interfaces.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="TpProxy">TpProxy</link>
         +----TpMediaSessionHandler
</synopsis>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="TpProxy">TpProxy</link>
         +----TpMediaStreamHandler
</synopsis>
</refsect1>








<refsect1 id="telepathy-glib-media-interfaces.description" role="desc">
<title role="desc.title">Description</title>
<para>
This module provides access to the auxiliary objects used to
implement <link linkend="TpSvcChannelTypeStreamedMedia"><type>TpSvcChannelTypeStreamedMedia</type></link>.</para>
<para>
</para>
</refsect1>

<refsect1 id="telepathy-glib-media-interfaces.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="tp-media-session-handler-new" role="function" condition="since:0.7.1">
<title>tp_media_session_handler_new ()</title>
<indexterm zone="tp-media-session-handler-new" role="0.7.1"><primary sortas="tp_media_session_handler_new">tp_media_session_handler_new</primary></indexterm><programlisting><link linkend="TpMediaSessionHandler">TpMediaSessionHandler</link> * tp_media_session_handler_new    (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *dbus,
                                                         const <link linkend="gchar">gchar</link> *unique_name,
                                                         const <link linkend="gchar">gchar</link> *object_path,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
<!-- --></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>dbus</parameter>&#160;:</term>
<listitem><simpara> a D-Bus daemon; may not be <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>unique_name</parameter>&#160;:</term>
<listitem><simpara> the unique name of the connection process; may not be <link linkend="NULL--CAPS"><literal>NULL</literal></link>
 or a well-known name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object_path</parameter>&#160;:</term>
<listitem><simpara> the object path of the media session handler; may not be <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> used to indicate the error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a new media session handler proxy, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> on invalid arguments

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.1</para></refsect2>
<refsect2 id="TpMediaSessionHandler-struct" role="struct">
<title>TpMediaSessionHandler</title>
<indexterm zone="TpMediaSessionHandler-struct" role="0.7.1"><primary sortas="TpMediaSessionHandler">TpMediaSessionHandler</primary></indexterm><programlisting>typedef struct _TpMediaSessionHandler TpMediaSessionHandler;</programlisting>
<para>
A proxy object for a Telepathy connection manager.</para>
<para>
</para><para role="since">Since 0.7.1</para></refsect2>
<refsect2 id="TpMediaSessionHandlerClass" role="struct" condition="since:0.7.1">
<title>TpMediaSessionHandlerClass</title>
<indexterm zone="TpMediaSessionHandlerClass" role="0.7.1"><primary sortas="TpMediaSessionHandlerClass">TpMediaSessionHandlerClass</primary></indexterm><programlisting>typedef struct _TpMediaSessionHandlerClass TpMediaSessionHandlerClass;</programlisting>
<para>
The class of a <link linkend="TpMediaSessionHandler"><type>TpMediaSessionHandler</type></link>.</para>
<para>
</para><para role="since">Since 0.7.1</para></refsect2>
<refsect2 id="tp-media-stream-handler-new" role="function" condition="since:0.7.1">
<title>tp_media_stream_handler_new ()</title>
<indexterm zone="tp-media-stream-handler-new" role="0.7.1"><primary sortas="tp_media_stream_handler_new">tp_media_stream_handler_new</primary></indexterm><programlisting><link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> * tp_media_stream_handler_new      (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *dbus,
                                                         const <link linkend="gchar">gchar</link> *unique_name,
                                                         const <link linkend="gchar">gchar</link> *object_path,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
<!-- --></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>dbus</parameter>&#160;:</term>
<listitem><simpara> a D-Bus daemon; may not be <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>unique_name</parameter>&#160;:</term>
<listitem><simpara> the unique name of the connection process; may not be <link linkend="NULL--CAPS"><literal>NULL</literal></link>
 or a well-known name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object_path</parameter>&#160;:</term>
<listitem><simpara> the object path of the media stream handler; may not be <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> used to indicate the error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a new media stream handler proxy, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> on invalid arguments

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.1</para></refsect2>
<refsect2 id="TpMediaStreamHandler-struct" role="struct">
<title>TpMediaStreamHandler</title>
<indexterm zone="TpMediaStreamHandler-struct" role="0.7.1"><primary sortas="TpMediaStreamHandler">TpMediaStreamHandler</primary></indexterm><programlisting>typedef struct _TpMediaStreamHandler TpMediaStreamHandler;</programlisting>
<para>
A proxy object for a Telepathy connection manager.</para>
<para>
</para><para role="since">Since 0.7.1</para></refsect2>
<refsect2 id="TpMediaStreamHandlerClass" role="struct" condition="since:0.7.1">
<title>TpMediaStreamHandlerClass</title>
<indexterm zone="TpMediaStreamHandlerClass" role="0.7.1"><primary sortas="TpMediaStreamHandlerClass">TpMediaStreamHandlerClass</primary></indexterm><programlisting>typedef struct _TpMediaStreamHandlerClass TpMediaStreamHandlerClass;</programlisting>
<para>
The class of a <link linkend="TpMediaStreamHandler"><type>TpMediaStreamHandler</type></link>.</para>
<para>
</para><para role="since">Since 0.7.1</para></refsect2>
<refsect2 id="tp-cli-media-session-handler-callback-for-error" role="function">
<title>tp_cli_media_session_handler_callback_for_error ()</title>
<indexterm zone="tp-cli-media-session-handler-callback-for-error"><primary sortas="tp_cli_media_session_handler_callback_for_error">tp_cli_media_session_handler_callback_for_error</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_media_session_handler_callback_for_error)
                                                        (<link linkend="TpMediaSessionHandler">TpMediaSessionHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a Error method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-session-handler-call-error" role="function">
<title>tp_cli_media_session_handler_call_error ()</title>
<indexterm zone="tp-cli-media-session-handler-call-error"><primary sortas="tp_cli_media_session_handler_call_error">tp_cli_media_session_handler_call_error</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_media_session_handler_call_error
                                                        (<link linkend="TpMediaSessionHandler">TpMediaSessionHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Error_Code,
                                                         const <link linkend="gchar">gchar</link> *in_Message,
                                                         <link linkend="tp-cli-media-session-handler-callback-for-error">tp_cli_media_session_handler_callback_for_error</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a Error method call.
</para>
<para>
Informs the connection manager that an error occured in this session.         If used, the connection manager must terminate the session and all of         the streams within it, and may also emit a &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.Channel.Type.StreamedMedia&quot;&gt;StreamError&lt;/tp:dbus-ref&gt;         signal on the channel for each stream within the session.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Error_Code</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Message</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-session-handler-run-error" role="function">
<title>tp_cli_media_session_handler_run_error ()</title>
<indexterm zone="tp-cli-media-session-handler-run-error"><primary sortas="tp_cli_media_session_handler_run_error">tp_cli_media_session_handler_run_error</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_media_session_handler_run_error
                                                        (<link linkend="TpMediaSessionHandler">TpMediaSessionHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Error_Code,
                                                         const <link linkend="gchar">gchar</link> *in_Message,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method Error and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Informs the connection manager that an error occured in this session.         If used, the connection manager must terminate the session and all of         the streams within it, and may also emit a &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.Channel.Type.StreamedMedia&quot;&gt;StreamError&lt;/tp:dbus-ref&gt;         signal on the channel for each stream within the session.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpMediaSessionHandler"><type>TpMediaSessionHandler</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Error_Code</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Message</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-session-handler-callback-for-ready" role="function">
<title>tp_cli_media_session_handler_callback_for_ready ()</title>
<indexterm zone="tp-cli-media-session-handler-callback-for-ready"><primary sortas="tp_cli_media_session_handler_callback_for_ready">tp_cli_media_session_handler_callback_for_ready</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_media_session_handler_callback_for_ready)
                                                        (<link linkend="TpMediaSessionHandler">TpMediaSessionHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a Ready method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-session-handler-call-ready" role="function">
<title>tp_cli_media_session_handler_call_ready ()</title>
<indexterm zone="tp-cli-media-session-handler-call-ready"><primary sortas="tp_cli_media_session_handler_call_ready">tp_cli_media_session_handler_call_ready</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_media_session_handler_call_ready
                                                        (<link linkend="TpMediaSessionHandler">TpMediaSessionHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-media-session-handler-callback-for-ready">tp_cli_media_session_handler_callback_for_ready</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a Ready method call.
</para>
<para>
Inform the connection manager that a client is ready to handle         this session handler (i.e. that it has connected to the         &lt;tp:member-ref&gt;NewStreamHandler&lt;/tp:member-ref&gt; signal and done any         other necessary setup).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-session-handler-run-ready" role="function">
<title>tp_cli_media_session_handler_run_ready ()</title>
<indexterm zone="tp-cli-media-session-handler-run-ready"><primary sortas="tp_cli_media_session_handler_run_ready">tp_cli_media_session_handler_run_ready</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_media_session_handler_run_ready
                                                        (<link linkend="TpMediaSessionHandler">TpMediaSessionHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method Ready and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Inform the connection manager that a client is ready to handle         this session handler (i.e. that it has connected to the         &lt;tp:member-ref&gt;NewStreamHandler&lt;/tp:member-ref&gt; signal and done any         other necessary setup).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpMediaSessionHandler"><type>TpMediaSessionHandler</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-session-handler-signal-callback-new-stream-handler" role="function">
<title>tp_cli_media_session_handler_signal_callback_new_stream_handler ()</title>
<indexterm zone="tp-cli-media-session-handler-signal-callback-new-stream-handler"><primary sortas="tp_cli_media_session_handler_signal_callback_new_stream_handler">tp_cli_media_session_handler_signal_callback_new_stream_handler</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_media_session_handler_signal_callback_new_stream_handler)
                                                        (<link linkend="TpMediaSessionHandler">TpMediaSessionHandler</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg_Stream_Handler,
                                                         <link linkend="guint">guint</link> arg_ID,
                                                         <link linkend="guint">guint</link> arg_Media_Type,
                                                         <link linkend="guint">guint</link> arg_Direction,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal NewStreamHandler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-media-session-handler-connect-to-new-stream-handler"><function>tp_cli_media_session_handler_connect_to_new_stream_handler()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Stream_Handler</parameter>&#160;:</term>
<listitem><simpara> The path of a new object implementing the &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.Media&quot;&gt;StreamHandler&lt;/tp:dbus-ref&gt;           interface.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_ID</parameter>&#160;:</term>
<listitem><simpara> The unique ID of the new stream
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Media_Type</parameter>&#160;:</term>
<listitem><simpara> Type of media that this stream should handle
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Direction</parameter>&#160;:</term>
<listitem><simpara> Direction of this stream
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-session-handler-connect-to-new-stream-handler" role="function">
<title>tp_cli_media_session_handler_connect_to_new_stream_handler ()</title>
<indexterm zone="tp-cli-media-session-handler-connect-to-new-stream-handler"><primary sortas="tp_cli_media_session_handler_connect_to_new_stream_handler">tp_cli_media_session_handler_connect_to_new_stream_handler</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_media_session_handler_connect_to_new_stream_handler
                                                        (<link linkend="TpMediaSessionHandler">TpMediaSessionHandler</link> *proxy,
                                                         <link linkend="tp-cli-media-session-handler-signal-callback-new-stream-handler">tp_cli_media_session_handler_signal_callback_new_stream_handler</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal NewStreamHandler.
</para>
<para>
Emitted when a new stream handler has been created for this         session.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpMediaSessionHandler"><type>TpMediaSessionHandler</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-callback-for-codec-choice" role="function">
<title>tp_cli_media_stream_handler_callback_for_codec_choice ()</title>
<indexterm zone="tp-cli-media-stream-handler-callback-for-codec-choice"><primary sortas="tp_cli_media_stream_handler_callback_for_codec_choice">tp_cli_media_stream_handler_callback_for_codec_choice</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_media_stream_handler_callback_for_codec_choice)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a CodecChoice method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-call-codec-choice" role="function">
<title>tp_cli_media_stream_handler_call_codec_choice ()</title>
<indexterm zone="tp-cli-media-stream-handler-call-codec-choice"><primary sortas="tp_cli_media_stream_handler_call_codec_choice">tp_cli_media_stream_handler_call_codec_choice</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_media_stream_handler_call_codec_choice
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Codec_ID,
                                                         <link linkend="tp-cli-media-stream-handler-callback-for-codec-choice">tp_cli_media_stream_handler_callback_for_codec_choice</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a CodecChoice method call.
</para>
<para>
Inform the connection manager of codec used to receive data.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Codec_ID</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-run-codec-choice" role="function">
<title>tp_cli_media_stream_handler_run_codec_choice ()</title>
<indexterm zone="tp-cli-media-stream-handler-run-codec-choice"><primary sortas="tp_cli_media_stream_handler_run_codec_choice">tp_cli_media_stream_handler_run_codec_choice</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_media_stream_handler_run_codec_choice
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Codec_ID,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method CodecChoice and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Inform the connection manager of codec used to receive data.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpMediaStreamHandler"><type>TpMediaStreamHandler</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Codec_ID</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-callback-for-error" role="function">
<title>tp_cli_media_stream_handler_callback_for_error ()</title>
<indexterm zone="tp-cli-media-stream-handler-callback-for-error"><primary sortas="tp_cli_media_stream_handler_callback_for_error">tp_cli_media_stream_handler_callback_for_error</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_media_stream_handler_callback_for_error)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a Error method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-call-error" role="function">
<title>tp_cli_media_stream_handler_call_error ()</title>
<indexterm zone="tp-cli-media-stream-handler-call-error"><primary sortas="tp_cli_media_stream_handler_call_error">tp_cli_media_stream_handler_call_error</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_media_stream_handler_call_error
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Error_Code,
                                                         const <link linkend="gchar">gchar</link> *in_Message,
                                                         <link linkend="tp-cli-media-stream-handler-callback-for-error">tp_cli_media_stream_handler_callback_for_error</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a Error method call.
</para>
<para>
Inform the connection manager that an error occured in this stream. The         connection manager should emit the StreamError signal for the stream on         the relevant channel, and remove the stream from the session.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Error_Code</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: ID of error, from the MediaStreamError enumeration
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Message</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: String describing the error
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-run-error" role="function">
<title>tp_cli_media_stream_handler_run_error ()</title>
<indexterm zone="tp-cli-media-stream-handler-run-error"><primary sortas="tp_cli_media_stream_handler_run_error">tp_cli_media_stream_handler_run_error</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_media_stream_handler_run_error
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_Error_Code,
                                                         const <link linkend="gchar">gchar</link> *in_Message,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method Error and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Inform the connection manager that an error occured in this stream. The         connection manager should emit the StreamError signal for the stream on         the relevant channel, and remove the stream from the session.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpMediaStreamHandler"><type>TpMediaStreamHandler</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Error_Code</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: ID of error, from the MediaStreamError enumeration
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Message</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: String describing the error
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-callback-for-native-candidates-prepared" role="function">
<title>tp_cli_media_stream_handler_callback_for_native_candidates_prepared ()</title>
<indexterm zone="tp-cli-media-stream-handler-callback-for-native-candidates-prepared"><primary sortas="tp_cli_media_stream_handler_callback_for_native_candidates_prepared">tp_cli_media_stream_handler_callback_for_native_candidates_prepared</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_media_stream_handler_callback_for_native_candidates_prepared)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a NativeCandidatesPrepared method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-call-native-candidates-prepared" role="function">
<title>tp_cli_media_stream_handler_call_native_candidates_prepared ()</title>
<indexterm zone="tp-cli-media-stream-handler-call-native-candidates-prepared"><primary sortas="tp_cli_media_stream_handler_call_native_candidates_prepared">tp_cli_media_stream_handler_call_native_candidates_prepared</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_media_stream_handler_call_native_candidates_prepared
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-media-stream-handler-callback-for-native-candidates-prepared">tp_cli_media_stream_handler_callback_for_native_candidates_prepared</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a NativeCandidatesPrepared method call.
</para>
<para>
Informs the connection manager that all possible native candisates         have been discovered for the moment.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-run-native-candidates-prepared" role="function">
<title>tp_cli_media_stream_handler_run_native_candidates_prepared ()</title>
<indexterm zone="tp-cli-media-stream-handler-run-native-candidates-prepared"><primary sortas="tp_cli_media_stream_handler_run_native_candidates_prepared">tp_cli_media_stream_handler_run_native_candidates_prepared</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_media_stream_handler_run_native_candidates_prepared
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method NativeCandidatesPrepared and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Informs the connection manager that all possible native candisates         have been discovered for the moment.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpMediaStreamHandler"><type>TpMediaStreamHandler</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-callback-for-new-active-candidate-pair" role="function">
<title>tp_cli_media_stream_handler_callback_for_new_active_candidate_pair ()</title>
<indexterm zone="tp-cli-media-stream-handler-callback-for-new-active-candidate-pair"><primary sortas="tp_cli_media_stream_handler_callback_for_new_active_candidate_pair">tp_cli_media_stream_handler_callback_for_new_active_candidate_pair</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_media_stream_handler_callback_for_new_active_candidate_pair)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a NewActiveCandidatePair method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-call-new-active-candidate-pair" role="function">
<title>tp_cli_media_stream_handler_call_new_active_candidate_pair ()</title>
<indexterm zone="tp-cli-media-stream-handler-call-new-active-candidate-pair"><primary sortas="tp_cli_media_stream_handler_call_new_active_candidate_pair">tp_cli_media_stream_handler_call_new_active_candidate_pair</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_media_stream_handler_call_new_active_candidate_pair
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_Native_Candidate_ID,
                                                         const <link linkend="gchar">gchar</link> *in_Remote_Candidate_ID,
                                                         <link linkend="tp-cli-media-stream-handler-callback-for-new-active-candidate-pair">tp_cli_media_stream_handler_callback_for_new_active_candidate_pair</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a NewActiveCandidatePair method call.
</para>
<para>
Informs the connection manager that a valid candidate pair         has been discovered and streaming is in progress.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Native_Candidate_ID</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Remote_Candidate_ID</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-run-new-active-candidate-pair" role="function">
<title>tp_cli_media_stream_handler_run_new_active_candidate_pair ()</title>
<indexterm zone="tp-cli-media-stream-handler-run-new-active-candidate-pair"><primary sortas="tp_cli_media_stream_handler_run_new_active_candidate_pair">tp_cli_media_stream_handler_run_new_active_candidate_pair</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_media_stream_handler_run_new_active_candidate_pair
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_Native_Candidate_ID,
                                                         const <link linkend="gchar">gchar</link> *in_Remote_Candidate_ID,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method NewActiveCandidatePair and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Informs the connection manager that a valid candidate pair         has been discovered and streaming is in progress.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpMediaStreamHandler"><type>TpMediaStreamHandler</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Native_Candidate_ID</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Remote_Candidate_ID</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-callback-for-new-native-candidate" role="function">
<title>tp_cli_media_stream_handler_callback_for_new_native_candidate ()</title>
<indexterm zone="tp-cli-media-stream-handler-callback-for-new-native-candidate"><primary sortas="tp_cli_media_stream_handler_callback_for_new_native_candidate">tp_cli_media_stream_handler_callback_for_new_native_candidate</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_media_stream_handler_callback_for_new_native_candidate)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a NewNativeCandidate method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-call-new-native-candidate" role="function">
<title>tp_cli_media_stream_handler_call_new_native_candidate ()</title>
<indexterm zone="tp-cli-media-stream-handler-call-new-native-candidate"><primary sortas="tp_cli_media_stream_handler_call_new_native_candidate">tp_cli_media_stream_handler_call_new_native_candidate</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_media_stream_handler_call_new_native_candidate
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_Candidate_ID,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Transports,
                                                         <link linkend="tp-cli-media-stream-handler-callback-for-new-native-candidate">tp_cli_media_stream_handler_callback_for_new_native_candidate</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a NewNativeCandidate method call.
</para>
<para>
Inform this MediaStreamHandler that a new native transport candidate         has been ascertained.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Candidate_ID</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: String identifier for this candidate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Transports</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           Array of transports for this candidate, with fields:           &lt;ul&gt;             &lt;li&gt;component number&lt;/li&gt;             &lt;li&gt;IP address (as a string)&lt;/li&gt;             &lt;li&gt;port&lt;/li&gt;             &lt;li&gt;base network protocol (one of the values of MediaStreamBaseProto)&lt;/li&gt;             &lt;li&gt;proto subtype (e.g. RTP)&lt;/li&gt;             &lt;li&gt;proto profile (e.g. AVP)&lt;/li&gt;             &lt;li&gt;our preference value of this transport (double in range 0.0-1.0               inclusive); 1 signals the most preferred transport&lt;/li&gt;             &lt;li&gt;transport type, one of the values of MediaStreamTransportType&lt;/li&gt;             &lt;li&gt;username if authentication is required&lt;/li&gt;             &lt;li&gt;password if authentication is required&lt;/li&gt;           &lt;/ul&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-run-new-native-candidate" role="function">
<title>tp_cli_media_stream_handler_run_new_native_candidate ()</title>
<indexterm zone="tp-cli-media-stream-handler-run-new-native-candidate"><primary sortas="tp_cli_media_stream_handler_run_new_native_candidate">tp_cli_media_stream_handler_run_new_native_candidate</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_media_stream_handler_run_new_native_candidate
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="gchar">gchar</link> *in_Candidate_ID,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Transports,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method NewNativeCandidate and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Inform this MediaStreamHandler that a new native transport candidate         has been ascertained.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpMediaStreamHandler"><type>TpMediaStreamHandler</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Candidate_ID</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: String identifier for this candidate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Transports</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           Array of transports for this candidate, with fields:           &lt;ul&gt;             &lt;li&gt;component number&lt;/li&gt;             &lt;li&gt;IP address (as a string)&lt;/li&gt;             &lt;li&gt;port&lt;/li&gt;             &lt;li&gt;base network protocol (one of the values of MediaStreamBaseProto)&lt;/li&gt;             &lt;li&gt;proto subtype (e.g. RTP)&lt;/li&gt;             &lt;li&gt;proto profile (e.g. AVP)&lt;/li&gt;             &lt;li&gt;our preference value of this transport (double in range 0.0-1.0               inclusive); 1 signals the most preferred transport&lt;/li&gt;             &lt;li&gt;transport type, one of the values of MediaStreamTransportType&lt;/li&gt;             &lt;li&gt;username if authentication is required&lt;/li&gt;             &lt;li&gt;password if authentication is required&lt;/li&gt;           &lt;/ul&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-callback-for-ready" role="function">
<title>tp_cli_media_stream_handler_callback_for_ready ()</title>
<indexterm zone="tp-cli-media-stream-handler-callback-for-ready"><primary sortas="tp_cli_media_stream_handler_callback_for_ready">tp_cli_media_stream_handler_callback_for_ready</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_media_stream_handler_callback_for_ready)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a Ready method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-call-ready" role="function">
<title>tp_cli_media_stream_handler_call_ready ()</title>
<indexterm zone="tp-cli-media-stream-handler-call-ready"><primary sortas="tp_cli_media_stream_handler_call_ready">tp_cli_media_stream_handler_call_ready</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_media_stream_handler_call_ready
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Codecs,
                                                         <link linkend="tp-cli-media-stream-handler-callback-for-ready">tp_cli_media_stream_handler_callback_for_ready</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a Ready method call.
</para>
<para>
Inform the connection manager that a client is ready to handle         this StreamHandler. Also provide it with info about all supported         codecs.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Codecs</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: Locally-supported codecs.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-run-ready" role="function">
<title>tp_cli_media_stream_handler_run_ready ()</title>
<indexterm zone="tp-cli-media-stream-handler-run-ready"><primary sortas="tp_cli_media_stream_handler_run_ready">tp_cli_media_stream_handler_run_ready</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_media_stream_handler_run_ready
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Codecs,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method Ready and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Inform the connection manager that a client is ready to handle         this StreamHandler. Also provide it with info about all supported         codecs.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpMediaStreamHandler"><type>TpMediaStreamHandler</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Codecs</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: Locally-supported codecs.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-callback-for-set-local-codecs" role="function">
<title>tp_cli_media_stream_handler_callback_for_set_local_codecs ()</title>
<indexterm zone="tp-cli-media-stream-handler-callback-for-set-local-codecs"><primary sortas="tp_cli_media_stream_handler_callback_for_set_local_codecs">tp_cli_media_stream_handler_callback_for_set_local_codecs</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_media_stream_handler_callback_for_set_local_codecs)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a SetLocalCodecs method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-call-set-local-codecs" role="function">
<title>tp_cli_media_stream_handler_call_set_local_codecs ()</title>
<indexterm zone="tp-cli-media-stream-handler-call-set-local-codecs"><primary sortas="tp_cli_media_stream_handler_call_set_local_codecs">tp_cli_media_stream_handler_call_set_local_codecs</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_media_stream_handler_call_set_local_codecs
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Codecs,
                                                         <link linkend="tp-cli-media-stream-handler-callback-for-set-local-codecs">tp_cli_media_stream_handler_callback_for_set_local_codecs</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a SetLocalCodecs method call.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;Used to provide codecs after <link linkend="Ready"><function>Ready()</function></link>, so the media client can go           ready for an incoming call and exchange candidates/codecs before           knowing what local codecs are available.&lt;/p&gt;          &lt;p&gt;This is useful for gatewaying calls between two connection managers.           Given an incoming call, you need to call           &lt;tp:member-ref&gt;Ready&lt;/tp:member-ref&gt; to get the remote codecs before           you can use them as the &amp;quot;local&amp;quot; codecs to place the outgoing call,           and hence receive the outgoing call&apos;s remote codecs to use as the           incoming call&apos;s &amp;quot;local&amp;quot; codecs.&lt;/p&gt;          &lt;p&gt;In this situation, you would pass an empty list of codecs to the           incoming call&apos;s Ready method, then later call SetLocalCodecs on the           incoming call in order to respond to the offer.&lt;/p&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Codecs</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: Locally-supported codecs
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-run-set-local-codecs" role="function">
<title>tp_cli_media_stream_handler_run_set_local_codecs ()</title>
<indexterm zone="tp-cli-media-stream-handler-run-set-local-codecs"><primary sortas="tp_cli_media_stream_handler_run_set_local_codecs">tp_cli_media_stream_handler_run_set_local_codecs</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_media_stream_handler_run_set_local_codecs
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Codecs,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method SetLocalCodecs and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;Used to provide codecs after <link linkend="Ready"><function>Ready()</function></link>, so the media client can go           ready for an incoming call and exchange candidates/codecs before           knowing what local codecs are available.&lt;/p&gt;          &lt;p&gt;This is useful for gatewaying calls between two connection managers.           Given an incoming call, you need to call           &lt;tp:member-ref&gt;Ready&lt;/tp:member-ref&gt; to get the remote codecs before           you can use them as the &amp;quot;local&amp;quot; codecs to place the outgoing call,           and hence receive the outgoing call&apos;s remote codecs to use as the           incoming call&apos;s &amp;quot;local&amp;quot; codecs.&lt;/p&gt;          &lt;p&gt;In this situation, you would pass an empty list of codecs to the           incoming call&apos;s Ready method, then later call SetLocalCodecs on the           incoming call in order to respond to the offer.&lt;/p&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpMediaStreamHandler"><type>TpMediaStreamHandler</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Codecs</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: Locally-supported codecs
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-callback-for-stream-state" role="function">
<title>tp_cli_media_stream_handler_callback_for_stream_state ()</title>
<indexterm zone="tp-cli-media-stream-handler-callback-for-stream-state"><primary sortas="tp_cli_media_stream_handler_callback_for_stream_state">tp_cli_media_stream_handler_callback_for_stream_state</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_media_stream_handler_callback_for_stream_state)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a StreamState method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-call-stream-state" role="function">
<title>tp_cli_media_stream_handler_call_stream_state ()</title>
<indexterm zone="tp-cli-media-stream-handler-call-stream-state"><primary sortas="tp_cli_media_stream_handler_call_stream_state">tp_cli_media_stream_handler_call_stream_state</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_media_stream_handler_call_stream_state
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_State,
                                                         <link linkend="tp-cli-media-stream-handler-callback-for-stream-state">tp_cli_media_stream_handler_callback_for_stream_state</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a StreamState method call.
</para>
<para>
Informs the connection manager of the stream&apos;s current state, as         as specified in Channel.Type.StreamedMedia::ListStreams.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_State</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-run-stream-state" role="function">
<title>tp_cli_media_stream_handler_run_stream_state ()</title>
<indexterm zone="tp-cli-media-stream-handler-run-stream-state"><primary sortas="tp_cli_media_stream_handler_run_stream_state">tp_cli_media_stream_handler_run_stream_state</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_media_stream_handler_run_stream_state
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="guint">guint</link> in_State,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method StreamState and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Informs the connection manager of the stream&apos;s current state, as         as specified in Channel.Type.StreamedMedia::ListStreams.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpMediaStreamHandler"><type>TpMediaStreamHandler</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_State</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-callback-for-supported-codecs" role="function">
<title>tp_cli_media_stream_handler_callback_for_supported_codecs ()</title>
<indexterm zone="tp-cli-media-stream-handler-callback-for-supported-codecs"><primary sortas="tp_cli_media_stream_handler_callback_for_supported_codecs">tp_cli_media_stream_handler_callback_for_supported_codecs</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_media_stream_handler_callback_for_supported_codecs)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a SupportedCodecs method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-call-supported-codecs" role="function">
<title>tp_cli_media_stream_handler_call_supported_codecs ()</title>
<indexterm zone="tp-cli-media-stream-handler-call-supported-codecs"><primary sortas="tp_cli_media_stream_handler_call_supported_codecs">tp_cli_media_stream_handler_call_supported_codecs</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_media_stream_handler_call_supported_codecs
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Codecs,
                                                         <link linkend="tp-cli-media-stream-handler-callback-for-supported-codecs">tp_cli_media_stream_handler_callback_for_supported_codecs</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a SupportedCodecs method call.
</para>
<para>
Inform the connection manager of the supported codecs for this session.         This is called after the connection manager has emitted SetRemoteCodecs         to notify what codecs are supported by the peer, and will thus be an         intersection of all locally supported codecs (passed to Ready)         and those supported by the peer.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Codecs</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: Locally supported codecs.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-run-supported-codecs" role="function">
<title>tp_cli_media_stream_handler_run_supported_codecs ()</title>
<indexterm zone="tp-cli-media-stream-handler-run-supported-codecs"><primary sortas="tp_cli_media_stream_handler_run_supported_codecs">tp_cli_media_stream_handler_run_supported_codecs</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_media_stream_handler_run_supported_codecs
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Codecs,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method SupportedCodecs and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Inform the connection manager of the supported codecs for this session.         This is called after the connection manager has emitted SetRemoteCodecs         to notify what codecs are supported by the peer, and will thus be an         intersection of all locally supported codecs (passed to Ready)         and those supported by the peer.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpMediaStreamHandler"><type>TpMediaStreamHandler</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Codecs</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: Locally supported codecs.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-signal-callback-add-remote-candidate" role="function">
<title>tp_cli_media_stream_handler_signal_callback_add_remote_candidate ()</title>
<indexterm zone="tp-cli-media-stream-handler-signal-callback-add-remote-candidate"><primary sortas="tp_cli_media_stream_handler_signal_callback_add_remote_candidate">tp_cli_media_stream_handler_signal_callback_add_remote_candidate</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_media_stream_handler_signal_callback_add_remote_candidate)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg_Candidate_ID,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *arg_Transports,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal AddRemoteCandidate.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-media-stream-handler-connect-to-add-remote-candidate"><function>tp_cli_media_stream_handler_connect_to_add_remote_candidate()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Candidate_ID</parameter>&#160;:</term>
<listitem><simpara> String identifier for this candidate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Transports</parameter>&#160;:</term>
<listitem><simpara> Array of transports for this candidate with fields,           as defined in NewNativeCandidate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-connect-to-add-remote-candidate" role="function">
<title>tp_cli_media_stream_handler_connect_to_add_remote_candidate ()</title>
<indexterm zone="tp-cli-media-stream-handler-connect-to-add-remote-candidate"><primary sortas="tp_cli_media_stream_handler_connect_to_add_remote_candidate">tp_cli_media_stream_handler_connect_to_add_remote_candidate</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_media_stream_handler_connect_to_add_remote_candidate
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="tp-cli-media-stream-handler-signal-callback-add-remote-candidate">tp_cli_media_stream_handler_signal_callback_add_remote_candidate</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal AddRemoteCandidate.
</para>
<para>
Signal emitted when the connection manager wishes to inform the         client of a new remote candidate.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpMediaStreamHandler"><type>TpMediaStreamHandler</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-signal-callback-close" role="function">
<title>tp_cli_media_stream_handler_signal_callback_close ()</title>
<indexterm zone="tp-cli-media-stream-handler-signal-callback-close"><primary sortas="tp_cli_media_stream_handler_signal_callback_close">tp_cli_media_stream_handler_signal_callback_close</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_media_stream_handler_signal_callback_close)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal Close.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-media-stream-handler-connect-to-close"><function>tp_cli_media_stream_handler_connect_to_close()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-connect-to-close" role="function">
<title>tp_cli_media_stream_handler_connect_to_close ()</title>
<indexterm zone="tp-cli-media-stream-handler-connect-to-close"><primary sortas="tp_cli_media_stream_handler_connect_to_close">tp_cli_media_stream_handler_connect_to_close</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_media_stream_handler_connect_to_close
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="tp-cli-media-stream-handler-signal-callback-close">tp_cli_media_stream_handler_signal_callback_close</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal Close.
</para>
<para>
Signal emitted when the connection manager wishes the stream to be         closed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpMediaStreamHandler"><type>TpMediaStreamHandler</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-signal-callback-remove-remote-candidate" role="function">
<title>tp_cli_media_stream_handler_signal_callback_remove_remote_candidate ()</title>
<indexterm zone="tp-cli-media-stream-handler-signal-callback-remove-remote-candidate"><primary sortas="tp_cli_media_stream_handler_signal_callback_remove_remote_candidate">tp_cli_media_stream_handler_signal_callback_remove_remote_candidate</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_media_stream_handler_signal_callback_remove_remote_candidate)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg_Candidate_ID,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal RemoveRemoteCandidate.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-media-stream-handler-connect-to-remove-remote-candidate"><function>tp_cli_media_stream_handler_connect_to_remove_remote_candidate()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Candidate_ID</parameter>&#160;:</term>
<listitem><simpara> String identifier for remote candidate to drop
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-connect-to-remove-remote-candidate" role="function">
<title>tp_cli_media_stream_handler_connect_to_remove_remote_candidate ()</title>
<indexterm zone="tp-cli-media-stream-handler-connect-to-remove-remote-candidate"><primary sortas="tp_cli_media_stream_handler_connect_to_remove_remote_candidate">tp_cli_media_stream_handler_connect_to_remove_remote_candidate</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_media_stream_handler_connect_to_remove_remote_candidate
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="tp-cli-media-stream-handler-signal-callback-remove-remote-candidate">tp_cli_media_stream_handler_signal_callback_remove_remote_candidate</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal RemoveRemoteCandidate.
</para>
<para>
Signal emitted when the connection manager wishes to inform the         client that the remote end has removed a previously usable         candidate.          &lt;tp:rationale&gt;           It seemed like a good idea at the time, but wasn&apos;t.         &lt;/tp:rationale&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpMediaStreamHandler"><type>TpMediaStreamHandler</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-signal-callback-set-active-candidate-pair" role="function">
<title>tp_cli_media_stream_handler_signal_callback_set_active_candidate_pair ()</title>
<indexterm zone="tp-cli-media-stream-handler-signal-callback-set-active-candidate-pair"><primary sortas="tp_cli_media_stream_handler_signal_callback_set_active_candidate_pair">tp_cli_media_stream_handler_signal_callback_set_active_candidate_pair</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_media_stream_handler_signal_callback_set_active_candidate_pair)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg_Native_Candidate_ID,
                                                         const <link linkend="gchar">gchar</link> *arg_Remote_Candidate_ID,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal SetActiveCandidatePair.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-media-stream-handler-connect-to-set-active-candidate-pair"><function>tp_cli_media_stream_handler_connect_to_set_active_candidate_pair()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Native_Candidate_ID</parameter>&#160;:</term>
<listitem><simpara> (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Remote_Candidate_ID</parameter>&#160;:</term>
<listitem><simpara> (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-connect-to-set-active-candidate-pair" role="function">
<title>tp_cli_media_stream_handler_connect_to_set_active_candidate_pair ()</title>
<indexterm zone="tp-cli-media-stream-handler-connect-to-set-active-candidate-pair"><primary sortas="tp_cli_media_stream_handler_connect_to_set_active_candidate_pair">tp_cli_media_stream_handler_connect_to_set_active_candidate_pair</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_media_stream_handler_connect_to_set_active_candidate_pair
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="tp-cli-media-stream-handler-signal-callback-set-active-candidate-pair">tp_cli_media_stream_handler_signal_callback_set_active_candidate_pair</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal SetActiveCandidatePair.
</para>
<para>
Emitted by the connection manager to inform the client that a         valid candidate pair has been discovered by the remote end         and streaming is in progress.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpMediaStreamHandler"><type>TpMediaStreamHandler</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-signal-callback-set-remote-candidate-list" role="function">
<title>tp_cli_media_stream_handler_signal_callback_set_remote_candidate_list ()</title>
<indexterm zone="tp-cli-media-stream-handler-signal-callback-set-remote-candidate-list"><primary sortas="tp_cli_media_stream_handler_signal_callback_set_remote_candidate_list">tp_cli_media_stream_handler_signal_callback_set_remote_candidate_list</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_media_stream_handler_signal_callback_set_remote_candidate_list)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *arg_Remote_Candidates,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal SetRemoteCandidateList.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-media-stream-handler-connect-to-set-remote-candidate-list"><function>tp_cli_media_stream_handler_connect_to_set_remote_candidate_list()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Remote_Candidates</parameter>&#160;:</term>
<listitem><simpara> A list of candidate id and a list of transports         as defined in NewNativeCandidate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-connect-to-set-remote-candidate-list" role="function">
<title>tp_cli_media_stream_handler_connect_to_set_remote_candidate_list ()</title>
<indexterm zone="tp-cli-media-stream-handler-connect-to-set-remote-candidate-list"><primary sortas="tp_cli_media_stream_handler_connect_to_set_remote_candidate_list">tp_cli_media_stream_handler_connect_to_set_remote_candidate_list</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_media_stream_handler_connect_to_set_remote_candidate_list
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="tp-cli-media-stream-handler-signal-callback-set-remote-candidate-list">tp_cli_media_stream_handler_signal_callback_set_remote_candidate_list</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal SetRemoteCandidateList.
</para>
<para>
Signal emitted when the connection manager wishes to inform the         client of all the available remote candidates at once.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpMediaStreamHandler"><type>TpMediaStreamHandler</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-signal-callback-set-remote-codecs" role="function">
<title>tp_cli_media_stream_handler_signal_callback_set_remote_codecs ()</title>
<indexterm zone="tp-cli-media-stream-handler-signal-callback-set-remote-codecs"><primary sortas="tp_cli_media_stream_handler_signal_callback_set_remote_codecs">tp_cli_media_stream_handler_signal_callback_set_remote_codecs</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_media_stream_handler_signal_callback_set_remote_codecs)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *arg_Codecs,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal SetRemoteCodecs.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-media-stream-handler-connect-to-set-remote-codecs"><function>tp_cli_media_stream_handler_connect_to_set_remote_codecs()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Codecs</parameter>&#160;:</term>
<listitem><simpara> Codecs supported by the remote peer.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-connect-to-set-remote-codecs" role="function">
<title>tp_cli_media_stream_handler_connect_to_set_remote_codecs ()</title>
<indexterm zone="tp-cli-media-stream-handler-connect-to-set-remote-codecs"><primary sortas="tp_cli_media_stream_handler_connect_to_set_remote_codecs">tp_cli_media_stream_handler_connect_to_set_remote_codecs</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_media_stream_handler_connect_to_set_remote_codecs
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="tp-cli-media-stream-handler-signal-callback-set-remote-codecs">tp_cli_media_stream_handler_signal_callback_set_remote_codecs</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal SetRemoteCodecs.
</para>
<para>
Signal emitted when the connection manager wishes to inform the         client of the codecs supported by the remote end. 	If these codecs are compatible with the remote codecs, then the client         must call &lt;tp:member-ref&gt;SupportedCodecs&lt;/tp:member-ref&gt;,         otherwise call &lt;tp:member-ref&gt;Error&lt;/tp:member-ref&gt;.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpMediaStreamHandler"><type>TpMediaStreamHandler</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-signal-callback-set-stream-playing" role="function">
<title>tp_cli_media_stream_handler_signal_callback_set_stream_playing ()</title>
<indexterm zone="tp-cli-media-stream-handler-signal-callback-set-stream-playing"><primary sortas="tp_cli_media_stream_handler_signal_callback_set_stream_playing">tp_cli_media_stream_handler_signal_callback_set_stream_playing</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_media_stream_handler_signal_callback_set_stream_playing)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gboolean">gboolean</link> arg_Playing,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal SetStreamPlaying.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-media-stream-handler-connect-to-set-stream-playing"><function>tp_cli_media_stream_handler_connect_to_set_stream_playing()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Playing</parameter>&#160;:</term>
<listitem><simpara> (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-connect-to-set-stream-playing" role="function">
<title>tp_cli_media_stream_handler_connect_to_set_stream_playing ()</title>
<indexterm zone="tp-cli-media-stream-handler-connect-to-set-stream-playing"><primary sortas="tp_cli_media_stream_handler_connect_to_set_stream_playing">tp_cli_media_stream_handler_connect_to_set_stream_playing</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_media_stream_handler_connect_to_set_stream_playing
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="tp-cli-media-stream-handler-signal-callback-set-stream-playing">tp_cli_media_stream_handler_signal_callback_set_stream_playing</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal SetStreamPlaying.
</para>
<para>
If emitted with argument TRUE, this means that the connection manager         wishes to set the stream playing; this means that the streaming         implementation should expect to receive data. If emitted with argument         FALSE this signal is basically meaningless and should be ignored.          &lt;tp:rationale&gt;           We&apos;re very sorry.         &lt;/tp:rationale&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpMediaStreamHandler"><type>TpMediaStreamHandler</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-signal-callback-set-stream-sending" role="function">
<title>tp_cli_media_stream_handler_signal_callback_set_stream_sending ()</title>
<indexterm zone="tp-cli-media-stream-handler-signal-callback-set-stream-sending"><primary sortas="tp_cli_media_stream_handler_signal_callback_set_stream_sending">tp_cli_media_stream_handler_signal_callback_set_stream_sending</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_media_stream_handler_signal_callback_set_stream_sending)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gboolean">gboolean</link> arg_Sending,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal SetStreamSending.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-media-stream-handler-connect-to-set-stream-sending"><function>tp_cli_media_stream_handler_connect_to_set_stream_sending()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Sending</parameter>&#160;:</term>
<listitem><simpara> (Undocumented)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-connect-to-set-stream-sending" role="function">
<title>tp_cli_media_stream_handler_connect_to_set_stream_sending ()</title>
<indexterm zone="tp-cli-media-stream-handler-connect-to-set-stream-sending"><primary sortas="tp_cli_media_stream_handler_connect_to_set_stream_sending">tp_cli_media_stream_handler_connect_to_set_stream_sending</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_media_stream_handler_connect_to_set_stream_sending
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="tp-cli-media-stream-handler-signal-callback-set-stream-sending">tp_cli_media_stream_handler_signal_callback_set_stream_sending</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal SetStreamSending.
</para>
<para>
Signal emitted when the connection manager wishes to set whether or not         the stream sends to the remote end.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpMediaStreamHandler"><type>TpMediaStreamHandler</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-signal-callback-start-telephony-event" role="function">
<title>tp_cli_media_stream_handler_signal_callback_start_telephony_event ()</title>
<indexterm zone="tp-cli-media-stream-handler-signal-callback-start-telephony-event"><primary sortas="tp_cli_media_stream_handler_signal_callback_start_telephony_event">tp_cli_media_stream_handler_signal_callback_start_telephony_event</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_media_stream_handler_signal_callback_start_telephony_event)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="guchar">guchar</link> arg_Event,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal StartTelephonyEvent.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-media-stream-handler-connect-to-start-telephony-event"><function>tp_cli_media_stream_handler_connect_to_start_telephony_event()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Event</parameter>&#160;:</term>
<listitem><simpara> A telephony event code as defined by RFC 4733.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-connect-to-start-telephony-event" role="function">
<title>tp_cli_media_stream_handler_connect_to_start_telephony_event ()</title>
<indexterm zone="tp-cli-media-stream-handler-connect-to-start-telephony-event"><primary sortas="tp_cli_media_stream_handler_connect_to_start_telephony_event">tp_cli_media_stream_handler_connect_to_start_telephony_event</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_media_stream_handler_connect_to_start_telephony_event
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="tp-cli-media-stream-handler-signal-callback-start-telephony-event">tp_cli_media_stream_handler_signal_callback_start_telephony_event</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal StartTelephonyEvent.
</para>
<para>
Request that a telephony event (as defined by RFC 4733) is transmitted         over this stream until StopTelephonyEvent is called.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpMediaStreamHandler"><type>TpMediaStreamHandler</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-signal-callback-stop-telephony-event" role="function">
<title>tp_cli_media_stream_handler_signal_callback_stop_telephony_event ()</title>
<indexterm zone="tp-cli-media-stream-handler-signal-callback-stop-telephony-event"><primary sortas="tp_cli_media_stream_handler_signal_callback_stop_telephony_event">tp_cli_media_stream_handler_signal_callback_stop_telephony_event</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_media_stream_handler_signal_callback_stop_telephony_event)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal StopTelephonyEvent.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-media-stream-handler-connect-to-stop-telephony-event"><function>tp_cli_media_stream_handler_connect_to_stop_telephony_event()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-connect-to-stop-telephony-event" role="function">
<title>tp_cli_media_stream_handler_connect_to_stop_telephony_event ()</title>
<indexterm zone="tp-cli-media-stream-handler-connect-to-stop-telephony-event"><primary sortas="tp_cli_media_stream_handler_connect_to_stop_telephony_event">tp_cli_media_stream_handler_connect_to_stop_telephony_event</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_media_stream_handler_connect_to_stop_telephony_event
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="tp-cli-media-stream-handler-signal-callback-stop-telephony-event">tp_cli_media_stream_handler_signal_callback_stop_telephony_event</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal StopTelephonyEvent.
</para>
<para>
Request that any ongoing telephony events (as defined by RFC 4733)         being transmitted over this stream are stopped.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpMediaStreamHandler"><type>TpMediaStreamHandler</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-call-hold-state" role="function">
<title>tp_cli_media_stream_handler_call_hold_state ()</title>
<indexterm zone="tp-cli-media-stream-handler-call-hold-state"><primary sortas="tp_cli_media_stream_handler_call_hold_state">tp_cli_media_stream_handler_call_hold_state</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_media_stream_handler_call_hold_state
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="gboolean">gboolean</link> in_Held,
                                                         <link linkend="tp-cli-media-stream-handler-callback-for-hold-state">tp_cli_media_stream_handler_callback_for_hold_state</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a HoldState method call.
</para>
<para>
Notify the connection manager that the stream&apos;s hold state has         been changed successfully in response to SetStreamHeld.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Held</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: If true, the stream is now on hold.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-call-unhold-failure" role="function">
<title>tp_cli_media_stream_handler_call_unhold_failure ()</title>
<indexterm zone="tp-cli-media-stream-handler-call-unhold-failure"><primary sortas="tp_cli_media_stream_handler_call_unhold_failure">tp_cli_media_stream_handler_call_unhold_failure</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_media_stream_handler_call_unhold_failure
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-media-stream-handler-callback-for-unhold-failure">tp_cli_media_stream_handler_callback_for_unhold_failure</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a UnholdFailure method call.
</para>
<para>
Notify the connection manager that an attempt to reacquire the         necessary hardware or software resources to unhold the stream,         in response to SetStreamHeld, has failed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-callback-for-hold-state" role="function">
<title>tp_cli_media_stream_handler_callback_for_hold_state ()</title>
<indexterm zone="tp-cli-media-stream-handler-callback-for-hold-state"><primary sortas="tp_cli_media_stream_handler_callback_for_hold_state">tp_cli_media_stream_handler_callback_for_hold_state</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_media_stream_handler_callback_for_hold_state)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a HoldState method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-callback-for-unhold-failure" role="function">
<title>tp_cli_media_stream_handler_callback_for_unhold_failure ()</title>
<indexterm zone="tp-cli-media-stream-handler-callback-for-unhold-failure"><primary sortas="tp_cli_media_stream_handler_callback_for_unhold_failure">tp_cli_media_stream_handler_callback_for_unhold_failure</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_media_stream_handler_callback_for_unhold_failure)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a UnholdFailure method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-connect-to-set-stream-held" role="function">
<title>tp_cli_media_stream_handler_connect_to_set_stream_held ()</title>
<indexterm zone="tp-cli-media-stream-handler-connect-to-set-stream-held"><primary sortas="tp_cli_media_stream_handler_connect_to_set_stream_held">tp_cli_media_stream_handler_connect_to_set_stream_held</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_media_stream_handler_connect_to_set_stream_held
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="tp-cli-media-stream-handler-signal-callback-set-stream-held">tp_cli_media_stream_handler_signal_callback_set_stream_held</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal SetStreamHeld.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;Emitted when the connection manager wishes to place the stream on           hold (so the streaming client should free hardware or software           resources) or take the stream off hold (so the streaming client           should reacquire the necessary resources).&lt;/p&gt;          &lt;p&gt;When placing a channel&apos;s streams on hold, the connection manager           SHOULD notify the remote contact that this will be done (if           appropriate in the protocol) before it emits this signal.&lt;/p&gt;          &lt;tp:rationale&gt;           &lt;p&gt;It is assumed that relinquishing a resource will not fail.             If it does, the call is probably doomed anyway.&lt;/p&gt;         &lt;/tp:rationale&gt;          &lt;p&gt;When unholding a channel&apos;s streams, the connection manager           SHOULD emit this signal and wait for success to be indicated           via HoldState before it notifies the remote contact that the           channel has been taken off hold.&lt;/p&gt;          &lt;tp:rationale&gt;           &lt;p&gt;This means that if a resource is unavailable, the remote             contact will never even be told that we tried to acquire it.&lt;/p&gt;         &lt;/tp:rationale&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpMediaStreamHandler"><type>TpMediaStreamHandler</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-run-hold-state" role="function">
<title>tp_cli_media_stream_handler_run_hold_state ()</title>
<indexterm zone="tp-cli-media-stream-handler-run-hold-state"><primary sortas="tp_cli_media_stream_handler_run_hold_state">tp_cli_media_stream_handler_run_hold_state</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_media_stream_handler_run_hold_state
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="gboolean">gboolean</link> in_Held,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method HoldState and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Notify the connection manager that the stream&apos;s hold state has         been changed successfully in response to SetStreamHeld.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpMediaStreamHandler"><type>TpMediaStreamHandler</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Held</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: If true, the stream is now on hold.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-run-unhold-failure" role="function">
<title>tp_cli_media_stream_handler_run_unhold_failure ()</title>
<indexterm zone="tp-cli-media-stream-handler-run-unhold-failure"><primary sortas="tp_cli_media_stream_handler_run_unhold_failure">tp_cli_media_stream_handler_run_unhold_failure</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_media_stream_handler_run_unhold_failure
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method UnholdFailure and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Notify the connection manager that an attempt to reacquire the         necessary hardware or software resources to unhold the stream,         in response to SetStreamHeld, has failed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpMediaStreamHandler"><type>TpMediaStreamHandler</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-signal-callback-set-stream-held" role="function">
<title>tp_cli_media_stream_handler_signal_callback_set_stream_held ()</title>
<indexterm zone="tp-cli-media-stream-handler-signal-callback-set-stream-held"><primary sortas="tp_cli_media_stream_handler_signal_callback_set_stream_held">tp_cli_media_stream_handler_signal_callback_set_stream_held</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_media_stream_handler_signal_callback_set_stream_held)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gboolean">gboolean</link> arg_Held,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal SetStreamHeld.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-media-stream-handler-connect-to-set-stream-held"><function>tp_cli_media_stream_handler_connect_to_set_stream_held()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Held</parameter>&#160;:</term>
<listitem><simpara> If true, the stream is to be placed on hold.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-call-codecs-updated" role="function">
<title>tp_cli_media_stream_handler_call_codecs_updated ()</title>
<indexterm zone="tp-cli-media-stream-handler-call-codecs-updated"><primary sortas="tp_cli_media_stream_handler_call_codecs_updated">tp_cli_media_stream_handler_call_codecs_updated</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_media_stream_handler_call_codecs_updated
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Codecs,
                                                         <link linkend="tp-cli-media-stream-handler-callback-for-codecs-updated">tp_cli_media_stream_handler_callback_for_codecs_updated</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a CodecsUpdated method call.
</para>
<para>
Inform the connection manager that the parameters of the supported         codecs for this session have changed. The connection manager should         send the new parameters to the remote contact.          &lt;tp:rationale&gt;           This is required for H.264 and Theora, for example.         &lt;/tp:rationale&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Codecs</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: Locally supported codecs, which SHOULD be the same as were previously           in effect, but possibly with different parameters.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-callback-for-codecs-updated" role="function">
<title>tp_cli_media_stream_handler_callback_for_codecs_updated ()</title>
<indexterm zone="tp-cli-media-stream-handler-callback-for-codecs-updated"><primary sortas="tp_cli_media_stream_handler_callback_for_codecs_updated">tp_cli_media_stream_handler_callback_for_codecs_updated</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_media_stream_handler_callback_for_codecs_updated)
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a CodecsUpdated method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-media-stream-handler-run-codecs-updated" role="function">
<title>tp_cli_media_stream_handler_run_codecs_updated ()</title>
<indexterm zone="tp-cli-media-stream-handler-run-codecs-updated"><primary sortas="tp_cli_media_stream_handler_run_codecs_updated">tp_cli_media_stream_handler_run_codecs_updated</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cli_media_stream_handler_run_codecs_updated
                                                        (<link linkend="TpMediaStreamHandler">TpMediaStreamHandler</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         const <link linkend="GPtrArray">GPtrArray</link> *in_Codecs,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GMainLoop">GMainLoop</link> **loop);</programlisting>
<para>
Call the method CodecsUpdated and run the main loop
until it returns. Before calling this method, you must
add a reference to any borrowed objects you need to keep,
and generally ensure that everything is in a consistent
state.
</para>
<para>
Inform the connection manager that the parameters of the supported         codecs for this session have changed. The connection manager should         send the new parameters to the remote contact.          &lt;tp:rationale&gt;           This is required for H.264 and Theora, for example.         &lt;/tp:rationale&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpMediaStreamHandler"><type>TpMediaStreamHandler</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> Timeout in milliseconds, or -1 for default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Codecs</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: Locally supported codecs, which SHOULD be the same as were previously           in effect, but possibly with different parameters.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to return errors if <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
 is returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>loop</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, set before re-entering 
 the main loop, to point to a <link linkend="GMainLoop"><type>GMainLoop</type></link> 
 which can be used to cancel this call with 
 <link linkend="g-main-loop-quit"><function>g_main_loop_quit()</function></link>, causing a return of 
 <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> with <parameter>error</parameter> set to <link linkend="TP-DBUS-ERROR-CANCELLED--CAPS"><literal>TP_DBUS_ERROR_CANCELLED</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE and sets <parameter>error</parameter> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1 id="telepathy-glib-media-interfaces.see-also">
<title>See Also</title>
#TpChannel, <link linkend="TpProxy"><type>TpProxy</type></link>
</refsect1>

</refentry>
