<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-dbus-properties-mixin">
<refmeta>
<refentrytitle role="top_of_page" id="telepathy-glib-dbus-properties-mixin.top_of_page">TpDBusPropertiesMixin</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>TpDBusPropertiesMixin</refname>
<refpurpose>a mixin implementation of the DBus.Properties interface</refpurpose>
</refnamediv>

<refsynopsisdiv id="telepathy-glib-dbus-properties-mixin.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;telepathy-glib/dbus-properties-mixin.h&gt;

enum                <link linkend="TpDBusPropertiesMixinFlags">TpDBusPropertiesMixinFlags</link>;
                    <link linkend="TpDBusPropertiesMixinIfaceInfo">TpDBusPropertiesMixinIfaceInfo</link>;
                    <link linkend="TpDBusPropertiesMixinPropInfo">TpDBusPropertiesMixinPropInfo</link>;
<link linkend="void">void</link>                <link linkend="tp-svc-interface-set-dbus-properties-info">tp_svc_interface_set_dbus_properties_info</link>
                                                        (<link linkend="GType">GType</link> g_interface,
                                                         <link linkend="TpDBusPropertiesMixinIfaceInfo">TpDBusPropertiesMixinIfaceInfo</link> *info);

                    <link linkend="TpDBusPropertiesMixinClass">TpDBusPropertiesMixinClass</link>;
                    <link linkend="TpDBusPropertiesMixinIfaceImpl">TpDBusPropertiesMixinIfaceImpl</link>;
                    <link linkend="TpDBusPropertiesMixinPropImpl">TpDBusPropertiesMixinPropImpl</link>;
<link linkend="void">void</link>                (<link linkend="TpDBusPropertiesMixinGetter">*TpDBusPropertiesMixinGetter</link>)      (<link linkend="GObject">GObject</link> *object,
                                                         <link linkend="GQuark">GQuark</link> iface,
                                                         <link linkend="GQuark">GQuark</link> name,
                                                         <link linkend="GValue">GValue</link> *value,
                                                         <link linkend="gpointer">gpointer</link> getter_data);
<link linkend="void">void</link>                <link linkend="tp-dbus-properties-mixin-getter-gobject-properties">tp_dbus_properties_mixin_getter_gobject_properties</link>
                                                        (<link linkend="GObject">GObject</link> *object,
                                                         <link linkend="GQuark">GQuark</link> iface,
                                                         <link linkend="GQuark">GQuark</link> name,
                                                         <link linkend="GValue">GValue</link> *value,
                                                         <link linkend="gpointer">gpointer</link> getter_data);
<link linkend="gboolean">gboolean</link>            (<link linkend="TpDBusPropertiesMixinSetter">*TpDBusPropertiesMixinSetter</link>)      (<link linkend="GObject">GObject</link> *object,
                                                         <link linkend="GQuark">GQuark</link> iface,
                                                         <link linkend="GQuark">GQuark</link> name,
                                                         const <link linkend="GValue">GValue</link> *value,
                                                         <link linkend="gpointer">gpointer</link> setter_data,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-dbus-properties-mixin-setter-gobject-properties">tp_dbus_properties_mixin_setter_gobject_properties</link>
                                                        (<link linkend="GObject">GObject</link> *object,
                                                         <link linkend="GQuark">GQuark</link> iface,
                                                         <link linkend="GQuark">GQuark</link> name,
                                                         const <link linkend="GValue">GValue</link> *value,
                                                         <link linkend="gpointer">gpointer</link> setter_data,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                <link linkend="tp-dbus-properties-mixin-class-init">tp_dbus_properties_mixin_class_init</link> (<link linkend="GObjectClass">GObjectClass</link> *cls,
                                                         <link linkend="gsize">gsize</link> offset);
<link linkend="void">void</link>                <link linkend="tp-dbus-properties-mixin-implement-interface">tp_dbus_properties_mixin_implement_interface</link>
                                                        (<link linkend="GObjectClass">GObjectClass</link> *cls,
                                                         <link linkend="GQuark">GQuark</link> iface,
                                                         <link linkend="TpDBusPropertiesMixinGetter">TpDBusPropertiesMixinGetter</link> getter,
                                                         <link linkend="TpDBusPropertiesMixinSetter">TpDBusPropertiesMixinSetter</link> setter,
                                                         <link linkend="TpDBusPropertiesMixinPropImpl">TpDBusPropertiesMixinPropImpl</link> *props);
<link linkend="void">void</link>                <link linkend="tp-dbus-properties-mixin-iface-init">tp_dbus_properties_mixin_iface_init</link> (<link linkend="gpointer">gpointer</link> g_iface,
                                                         <link linkend="gpointer">gpointer</link> iface_data);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-dbus-properties-mixin-get">tp_dbus_properties_mixin_get</link>        (<link linkend="GObject">GObject</link> *self,
                                                         const <link linkend="gchar">gchar</link> *interface_name,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         <link linkend="GValue">GValue</link> *value,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="GHashTable">GHashTable</link> *        <link linkend="tp-dbus-properties-mixin-make-properties-hash">tp_dbus_properties_mixin_make_properties_hash</link>
                                                        (<link linkend="GObject">GObject</link> *object,
                                                         const <link linkend="gchar">gchar</link> *first_interface,
                                                         const <link linkend="gchar">gchar</link> *first_property,
                                                         ...);
</synopsis>
</refsynopsisdiv>









<refsect1 id="telepathy-glib-dbus-properties-mixin.description" role="desc">
<title role="desc.title">Description</title>
<para>
This mixin provides an implementation of the org.freedesktop.DBus.Properties
interface. It relies on the auto-generated service-side GInterfaces from
telepathy-glib &gt;= 0.7.3, or something similar, to register the abstract
properties and their GTypes; classes with the mixin can then register
an implementation of the properties.
</para>
<para>
To register D-Bus properties in a GInterface to be implementable with this
mixin, either use the code-generation tools from telepathy-glib &gt;= 0.7.3,
or call <link linkend="tp-svc-interface-set-properties-info"><function>tp_svc_interface_set_properties_info()</function></link> from a section of the
base_init function that only runs once.
</para>
<para>
To use this mixin, include a <link linkend="TpDBusPropertiesMixinClass"><type>TpDBusPropertiesMixinClass</type></link> somewhere
in your class structure, populate it with pointers to statically allocated
(or duplicated and never freed) data, and call
<link linkend="tp-dbus-properties-mixin-class-init"><function>tp_dbus_properties_mixin_class_init()</function></link> from your class_init implementation.
</para>
<para>
To use this mixin as the implementation of <link linkend="TpSvcDBusProperties"><type>TpSvcDBusProperties</type></link>,
call <literal>G_IMPLEMENT_INTERFACE (TP_TYPE_SVC_DBUS_PROPERTIES,
tp_dbus_properties_mixin_iface_init)</literal> in the fourth argument to
<literal>G_DEFINE_TYPE_WITH_CODE</literal>.</para>
<para>
</para>
</refsect1>

<refsect1 id="telepathy-glib-dbus-properties-mixin.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="TpDBusPropertiesMixinFlags" role="enum" condition="since:0.7.3">
<title>enum TpDBusPropertiesMixinFlags</title>
<indexterm zone="TpDBusPropertiesMixinFlags" role="0.7.3"><primary sortas="TpDBusPropertiesMixinFlags">TpDBusPropertiesMixinFlags</primary></indexterm><programlisting>typedef enum {
    TP_DBUS_PROPERTIES_MIXIN_FLAG_READ = 1,
    TP_DBUS_PROPERTIES_MIXIN_FLAG_WRITE = 2
} TpDBusPropertiesMixinFlags;
</programlisting>
<para>
Bitfield representing allowed access to a property.</para>
<para>
</para><variablelist role="enum">
<varlistentry id="TP-DBUS-PROPERTIES-MIXIN-FLAG-READ--CAPS" role="constant">
<term><literal>TP_DBUS_PROPERTIES_MIXIN_FLAG_READ</literal></term>
<listitem><simpara> The property can be read using Get and
 GetAll
</simpara></listitem>
</varlistentry>
<varlistentry id="TP-DBUS-PROPERTIES-MIXIN-FLAG-WRITE--CAPS" role="constant">
<term><literal>TP_DBUS_PROPERTIES_MIXIN_FLAG_WRITE</literal></term>
<listitem><simpara> The property can be written using Set
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since 0.7.3</para></refsect2>
<refsect2 id="TpDBusPropertiesMixinIfaceInfo" role="struct" condition="since:0.7.3">
<title>TpDBusPropertiesMixinIfaceInfo</title>
<indexterm zone="TpDBusPropertiesMixinIfaceInfo" role="0.7.3"><primary sortas="TpDBusPropertiesMixinIfaceInfo">TpDBusPropertiesMixinIfaceInfo</primary></indexterm><programlisting>typedef struct {
    GQuark dbus_interface;
    TpDBusPropertiesMixinPropInfo *props;
} TpDBusPropertiesMixinIfaceInfo;
</programlisting>
<para>
Semi-abstract description of an interface. Each service GInterface that
has properties must have one of these attached to it via
<link linkend="tp-svc-interface-set-dbus-properties-info"><function>tp_svc_interface_set_dbus_properties_info()</function></link> in its base_init function;
service GInterfaces that do not have properties may have one of these
with no properties.
</para>
<para>
This structure must either be statically allocated, or duplicated and never
freed, so it always remains valid.
</para>
<para>
In addition to the documented members, there are two private pointers
for future expansion, which must always be initialized to <link linkend="NULL--CAPS"><literal>NULL</literal></link>.</para>
<para>
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="GQuark">GQuark</link>&#160;<structfield>dbus_interface</structfield>;</term>
<listitem><simpara> Quark representing the interface's name
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpDBusPropertiesMixinPropInfo">TpDBusPropertiesMixinPropInfo</link>&#160;*<structfield>props</structfield>;</term>
<listitem><simpara> Array of property descriptions, terminated by one with
 <parameter>name</parameter> == <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since 0.7.3</para></refsect2>
<refsect2 id="TpDBusPropertiesMixinPropInfo" role="struct" condition="since:0.7.3">
<title>TpDBusPropertiesMixinPropInfo</title>
<indexterm zone="TpDBusPropertiesMixinPropInfo" role="0.7.3"><primary sortas="TpDBusPropertiesMixinPropInfo">TpDBusPropertiesMixinPropInfo</primary></indexterm><programlisting>typedef struct {
    GQuark name;
    TpDBusPropertiesMixinFlags flags;
    gchar *dbus_signature;
    GType type;
} TpDBusPropertiesMixinPropInfo;
</programlisting>
<para>
Semi-abstract description of a property, as attached to a service
GInterface. This structure must either be statically allocated, or
duplicated and never freed, so it always remains valid.
</para>
<para>
In addition to the documented members, there are two private pointers
for future expansion, which must always be initialized to <link linkend="NULL--CAPS"><literal>NULL</literal></link>.</para>
<para>
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="GQuark">GQuark</link>&#160;<structfield>name</structfield>;</term>
<listitem><simpara> Quark representing the property's name
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpDBusPropertiesMixinFlags">TpDBusPropertiesMixinFlags</link>&#160;<structfield>flags</structfield>;</term>
<listitem><simpara> Flags representing read/write access to the property
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gchar">gchar</link>&#160;*<structfield>dbus_signature</structfield>;</term>
<listitem><simpara> The D-Bus signature of the property
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GType">GType</link>&#160;<structfield>type</structfield>;</term>
<listitem><simpara> The GType used in a GValue to implement the property
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since 0.7.3</para></refsect2>
<refsect2 id="tp-svc-interface-set-dbus-properties-info" role="function" condition="since:0.7.3">
<title>tp_svc_interface_set_dbus_properties_info ()</title>
<indexterm zone="tp-svc-interface-set-dbus-properties-info" role="0.7.3"><primary sortas="tp_svc_interface_set_dbus_properties_info">tp_svc_interface_set_dbus_properties_info</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_interface_set_dbus_properties_info
                                                        (<link linkend="GType">GType</link> g_interface,
                                                         <link linkend="TpDBusPropertiesMixinIfaceInfo">TpDBusPropertiesMixinIfaceInfo</link> *info);</programlisting>
<para>
Declare that <parameter>g_interface</parameter> implements the given D-Bus interface, with the
given properties. This may only be called once per GInterface, usually from
a section of its base_init function that only runs once.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>g_interface</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="GType"><type>GType</type></link> of a service interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>info</parameter>&#160;:</term>
<listitem><simpara> an interface description
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.3</para></refsect2>
<refsect2 id="TpDBusPropertiesMixinClass" role="struct" condition="since:0.7.3">
<title>TpDBusPropertiesMixinClass</title>
<indexterm zone="TpDBusPropertiesMixinClass" role="0.7.3"><primary sortas="TpDBusPropertiesMixinClass">TpDBusPropertiesMixinClass</primary></indexterm><programlisting>typedef struct {
    TpDBusPropertiesMixinIfaceImpl *interfaces;
} TpDBusPropertiesMixinClass;
</programlisting>
<para>
Structure representing all of a class's property implementations. One of
these structures may be placed in the layout of an object class structure.
</para>
<para>
In addition to the documented fields, there are 7 pointers reserved for
future use, which must be initialized to <link linkend="NULL--CAPS"><literal>NULL</literal></link>.</para>
<para>
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="TpDBusPropertiesMixinIfaceImpl">TpDBusPropertiesMixinIfaceImpl</link>&#160;*<structfield>interfaces</structfield>;</term>
<listitem><simpara> An array of interface implementations, terminated by one with
 <parameter>name</parameter> equal to <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since 0.7.3</para></refsect2>
<refsect2 id="TpDBusPropertiesMixinIfaceImpl" role="struct" condition="since:0.7.3">
<title>TpDBusPropertiesMixinIfaceImpl</title>
<indexterm zone="TpDBusPropertiesMixinIfaceImpl" role="0.7.3"><primary sortas="TpDBusPropertiesMixinIfaceImpl">TpDBusPropertiesMixinIfaceImpl</primary></indexterm><programlisting>typedef struct {
    const gchar *name;
    TpDBusPropertiesMixinGetter getter;
    TpDBusPropertiesMixinSetter setter;
    TpDBusPropertiesMixinPropImpl *props;
} TpDBusPropertiesMixinIfaceImpl;
</programlisting>
<para>
Structure representing an implementation of an interface's properties.
</para>
<para>
In addition to the documented fields, there are four pointers which must
be initialized to <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</para>
<para>
This structure must either be statically allocated, or duplicated and never
freed, so it always remains valid.</para>
<para>
</para><variablelist role="struct">
<varlistentry>
<term>const&#160;<link linkend="gchar">gchar</link>&#160;*<structfield>name</structfield>;</term>
<listitem><simpara> The name of the interface
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpDBusPropertiesMixinGetter">TpDBusPropertiesMixinGetter</link>&#160;<structfield>getter</structfield>;</term>
<listitem><simpara> A callback to get the current value of the property, to which
 the <parameter>getter_data</parameter> from each property implementation will be passed
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpDBusPropertiesMixinSetter">TpDBusPropertiesMixinSetter</link>&#160;<structfield>setter</structfield>;</term>
<listitem><simpara> A callback to set a new value for the property, to which
 the <parameter>setter_data</parameter> from each property implementation will be passed
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpDBusPropertiesMixinPropImpl">TpDBusPropertiesMixinPropImpl</link>&#160;*<structfield>props</structfield>;</term>
<listitem><simpara> An array of property implementations, terminated by one with
 <parameter>name</parameter> equal to <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since 0.7.3</para></refsect2>
<refsect2 id="TpDBusPropertiesMixinPropImpl" role="struct" condition="since:0.7.3">
<title>TpDBusPropertiesMixinPropImpl</title>
<indexterm zone="TpDBusPropertiesMixinPropImpl" role="0.7.3"><primary sortas="TpDBusPropertiesMixinPropImpl">TpDBusPropertiesMixinPropImpl</primary></indexterm><programlisting>typedef struct {
    const gchar *name;
    gpointer getter_data;
    gpointer setter_data;
} TpDBusPropertiesMixinPropImpl;
</programlisting>
<para>
Structure representing an implementation of a property.
</para>
<para>
In addition to the documented fields, there are three pointers which must
be initialized to <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</para>
<para>
This structure must either be statically allocated, or duplicated and never
freed, so it always remains valid.</para>
<para>
</para><variablelist role="struct">
<varlistentry>
<term>const&#160;<link linkend="gchar">gchar</link>&#160;*<structfield>name</structfield>;</term>
<listitem><simpara> The name of the property as it appears on D-Bus
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gpointer">gpointer</link>&#160;<structfield>getter_data</structfield>;</term>
<listitem><simpara> Arbitrary user-supplied data for the getter function
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gpointer">gpointer</link>&#160;<structfield>setter_data</structfield>;</term>
<listitem><simpara> Arbitrary user-supplied data for the setter function
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since 0.7.3</para></refsect2>
<refsect2 id="TpDBusPropertiesMixinGetter" role="function">
<title>TpDBusPropertiesMixinGetter ()</title>
<indexterm zone="TpDBusPropertiesMixinGetter"><primary sortas="TpDBusPropertiesMixinGetter">TpDBusPropertiesMixinGetter</primary></indexterm><programlisting><link linkend="void">void</link>                (*TpDBusPropertiesMixinGetter)      (<link linkend="GObject">GObject</link> *object,
                                                         <link linkend="GQuark">GQuark</link> iface,
                                                         <link linkend="GQuark">GQuark</link> name,
                                                         <link linkend="GValue">GValue</link> *value,
                                                         <link linkend="gpointer">gpointer</link> getter_data);</programlisting>
<para>
Signature of a callback used to get the value of a property.
</para>
<para>
For simplicity, in this mixin we don't allow getting a property to fail;
implementations must always be prepared to return *something*.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara> The exported object with the properties
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iface</parameter>&#160;:</term>
<listitem><simpara> A quark representing the D-Bus interface name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> A quark representing the D-Bus property name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> A GValue pre-initialized to the right type, into which to put
 the value
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>getter_data</parameter>&#160;:</term>
<listitem><simpara> The getter_data from the <link linkend="TpDBusPropertiesMixinPropImpl"><type>TpDBusPropertiesMixinPropImpl</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-dbus-properties-mixin-getter-gobject-properties" role="function">
<title>tp_dbus_properties_mixin_getter_gobject_properties ()</title>
<indexterm zone="tp-dbus-properties-mixin-getter-gobject-properties"><primary sortas="tp_dbus_properties_mixin_getter_gobject_properties">tp_dbus_properties_mixin_getter_gobject_properties</primary></indexterm><programlisting><link linkend="void">void</link>                tp_dbus_properties_mixin_getter_gobject_properties
                                                        (<link linkend="GObject">GObject</link> *object,
                                                         <link linkend="GQuark">GQuark</link> iface,
                                                         <link linkend="GQuark">GQuark</link> name,
                                                         <link linkend="GValue">GValue</link> *value,
                                                         <link linkend="gpointer">gpointer</link> getter_data);</programlisting>
<para>
An implementation of <link linkend="TpDBusPropertiesMixinGetter"><type>TpDBusPropertiesMixinGetter</type></link> which assumes that
the <parameter>getter_data</parameter> is the name of a readable <link linkend="GObject"><type>GObject</type></link> property of an
appropriate type, and uses it for the value of the D-Bus property.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara> The exported object with the properties
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iface</parameter>&#160;:</term>
<listitem><simpara> A quark representing the D-Bus interface name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> A quark representing the D-Bus property name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> A GValue pre-initialized to the right type, into which to put
 the value
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>getter_data</parameter>&#160;:</term>
<listitem><simpara> The getter_data from the <link linkend="TpDBusPropertiesMixinPropImpl"><type>TpDBusPropertiesMixinPropImpl</type></link>,
 which must be a string containing the GObject property's name
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TpDBusPropertiesMixinSetter" role="function">
<title>TpDBusPropertiesMixinSetter ()</title>
<indexterm zone="TpDBusPropertiesMixinSetter"><primary sortas="TpDBusPropertiesMixinSetter">TpDBusPropertiesMixinSetter</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            (*TpDBusPropertiesMixinSetter)      (<link linkend="GObject">GObject</link> *object,
                                                         <link linkend="GQuark">GQuark</link> iface,
                                                         <link linkend="GQuark">GQuark</link> name,
                                                         const <link linkend="GValue">GValue</link> *value,
                                                         <link linkend="gpointer">gpointer</link> setter_data,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Signature of a callback used to get the value of a property.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara> The exported object with the properties
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iface</parameter>&#160;:</term>
<listitem><simpara> A quark representing the D-Bus interface name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> A quark representing the D-Bus property name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> The new value for the property
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>setter_data</parameter>&#160;:</term>
<listitem><simpara> The setter_data from the <link linkend="TpDBusPropertiesMixinPropImpl"><type>TpDBusPropertiesMixinPropImpl</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> Used to return an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> on success, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> (setting <parameter>error</parameter>) on failure
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-dbus-properties-mixin-setter-gobject-properties" role="function">
<title>tp_dbus_properties_mixin_setter_gobject_properties ()</title>
<indexterm zone="tp-dbus-properties-mixin-setter-gobject-properties"><primary sortas="tp_dbus_properties_mixin_setter_gobject_properties">tp_dbus_properties_mixin_setter_gobject_properties</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_dbus_properties_mixin_setter_gobject_properties
                                                        (<link linkend="GObject">GObject</link> *object,
                                                         <link linkend="GQuark">GQuark</link> iface,
                                                         <link linkend="GQuark">GQuark</link> name,
                                                         const <link linkend="GValue">GValue</link> *value,
                                                         <link linkend="gpointer">gpointer</link> setter_data,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
An implementation of <link linkend="TpDBusPropertiesMixinSetter"><type>TpDBusPropertiesMixinSetter</type></link> which assumes that the
<parameter>setter_data</parameter> is the name of a writable <link linkend="GObject"><type>GObject</type></link> property of an appropriate
type, and sets that property to the given value.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara> The exported object with the properties
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iface</parameter>&#160;:</term>
<listitem><simpara> A quark representing the D-Bus interface name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> A quark representing the D-Bus property name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> The new value for the property
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>setter_data</parameter>&#160;:</term>
<listitem><simpara> The setter_data from the <link linkend="TpDBusPropertiesMixinPropImpl"><type>TpDBusPropertiesMixinPropImpl</type></link>,
 which must be a string containing the GObject property's name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> Not used
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-dbus-properties-mixin-class-init" role="function" condition="since:0.7.3">
<title>tp_dbus_properties_mixin_class_init ()</title>
<indexterm zone="tp-dbus-properties-mixin-class-init" role="0.7.3"><primary sortas="tp_dbus_properties_mixin_class_init">tp_dbus_properties_mixin_class_init</primary></indexterm><programlisting><link linkend="void">void</link>                tp_dbus_properties_mixin_class_init (<link linkend="GObjectClass">GObjectClass</link> *cls,
                                                         <link linkend="gsize">gsize</link> offset);</programlisting>
<para>
Initialize the class <parameter>cls</parameter> to use the D-Bus Properties mixin.
The given struct member, of size sizeof(TpDBusPropertiesMixinClass),
will be used to store property implementation information.
</para>
<para>
Each property and each interface must have been declared as a member of
a GInterface implemented by <parameter>cls</parameter>, using
<link linkend="tp-svc-interface-set-dbus-properties-info"><function>tp_svc_interface_set_dbus_properties_info()</function></link>.
</para>
<para>
Before calling this function, the array <parameter>interfaces</parameter> must have been
placed in the <link linkend="TpDBusPropertiesMixinClass"><type>TpDBusPropertiesMixinClass</type></link> structure; if it would be empty,
it may instead be <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</para>
<para>
This function should be called from the class_init callback in such a way
that it will only be called once, even if the class is subclassed.
</para>
<para>
Changed in 0.7.9: TpDBusPropertiesMixinClass::interfaces may now be <link linkend="NULL--CAPS"><literal>NULL</literal></link>,
which means that only interfaces whose properties are set up using
<link linkend="tp-dbus-properties-mixin-implement-interface"><function>tp_dbus_properties_mixin_implement_interface()</function></link> will be used.
</para>
<para>
Changed in 0.7.15: <parameter>offset</parameter> may now be 0, in which case the
<link linkend="TpDBusPropertiesMixinClass"><type>TpDBusPropertiesMixinClass</type></link> can be omitted from <parameter>cls</parameter>.  It is treated as if
it were present, but with all fields (including
TpDBusPropertiesMixinClass::interfaces) being <link linkend="NULL--CAPS"><literal>NULL</literal></link>, so only interfaces
whose properties are set using
<link linkend="tp-dbus-properties-mixin-implement-interface"><function>tp_dbus_properties_mixin_implement_interface()</function></link> will be used.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cls</parameter>&#160;:</term>
<listitem><simpara> a subclass of <link linkend="GObjectClass"><type>GObjectClass</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&#160;:</term>
<listitem><simpara> the offset within <parameter>cls</parameter> of a TpDBusPropertiesMixinClass structure
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.3</para></refsect2>
<refsect2 id="tp-dbus-properties-mixin-implement-interface" role="function">
<title>tp_dbus_properties_mixin_implement_interface ()</title>
<indexterm zone="tp-dbus-properties-mixin-implement-interface"><primary sortas="tp_dbus_properties_mixin_implement_interface">tp_dbus_properties_mixin_implement_interface</primary></indexterm><programlisting><link linkend="void">void</link>                tp_dbus_properties_mixin_implement_interface
                                                        (<link linkend="GObjectClass">GObjectClass</link> *cls,
                                                         <link linkend="GQuark">GQuark</link> iface,
                                                         <link linkend="TpDBusPropertiesMixinGetter">TpDBusPropertiesMixinGetter</link> getter,
                                                         <link linkend="TpDBusPropertiesMixinSetter">TpDBusPropertiesMixinSetter</link> setter,
                                                         <link linkend="TpDBusPropertiesMixinPropImpl">TpDBusPropertiesMixinPropImpl</link> *props);</programlisting>
<para>
Declare that, in addition to any interfaces set in
<link linkend="tp-dbus-properties-mixin-class-init"><function>tp_dbus_properties_mixin_class_init()</function></link>, the given class (and its subclasses)
will implement the properties of the interface <parameter>iface</parameter> using the callbacks
<parameter>getter</parameter> and <parameter>setter</parameter> and the properties given by <parameter>props</parameter>.
</para>
<para>
This function should be called from the class_init callback in such a way
that it will only be called once, even if the class is subclassed.
</para>
<para>
Typically, the static array <parameter>interfaces</parameter> in the <link linkend="TpDBusPropertiesMixinClass"><type>TpDBusPropertiesMixinClass</type></link>
should be used for interfaces whose properties are implemented directly by
the class <parameter>cls</parameter>, and this function should be used for interfaces whose
properties are implemented by mixins.
</para>
<para>
It is an error for the same interface to appear in the array <parameter>interfaces</parameter>
in the <link linkend="TpDBusPropertiesMixinClass"><type>TpDBusPropertiesMixinClass</type></link>, and also be set up by this function.
</para>
<para>
If a class C and a subclass S both implement the properties of the same
interface, only the implementations from the subclass S will be used,
regardless of whether the implementations in C and/or S were set up by
this function or via the array <parameter>interfaces</parameter> in the
<link linkend="TpDBusPropertiesMixinClass"><type>TpDBusPropertiesMixinClass</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cls</parameter>&#160;:</term>
<listitem><simpara> a subclass of <link linkend="GObjectClass"><type>GObjectClass</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iface</parameter>&#160;:</term>
<listitem><simpara> a quark representing the the name of the interface to implement
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>getter</parameter>&#160;:</term>
<listitem><simpara> a callback to get properties on this interface, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if they
 are all write-only
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>setter</parameter>&#160;:</term>
<listitem><simpara> a callback to set properties on this interface, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if they
 are all read-only
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>props</parameter>&#160;:</term>
<listitem><simpara> an array of <link linkend="TpDBusPropertiesMixinPropImpl"><type>TpDBusPropertiesMixinPropImpl</type></link> representing individual
 properties, terminated by one with <parameter>name</parameter> == <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-dbus-properties-mixin-iface-init" role="function">
<title>tp_dbus_properties_mixin_iface_init ()</title>
<indexterm zone="tp-dbus-properties-mixin-iface-init"><primary sortas="tp_dbus_properties_mixin_iface_init">tp_dbus_properties_mixin_iface_init</primary></indexterm><programlisting><link linkend="void">void</link>                tp_dbus_properties_mixin_iface_init (<link linkend="gpointer">gpointer</link> g_iface,
                                                         <link linkend="gpointer">gpointer</link> iface_data);</programlisting>
<para>
Declare that the DBus.Properties interface represented by <parameter>g_iface</parameter>
is implemented using this mixin.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>g_iface</parameter>&#160;:</term>
<listitem><simpara> a pointer to a <link linkend="TpSvcDBusPropertiesClass"><type>TpSvcDBusPropertiesClass</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iface_data</parameter>&#160;:</term>
<listitem><simpara> ignored
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-dbus-properties-mixin-get" role="function" condition="since:0.7.13">
<title>tp_dbus_properties_mixin_get ()</title>
<indexterm zone="tp-dbus-properties-mixin-get" role="0.7.13"><primary sortas="tp_dbus_properties_mixin_get">tp_dbus_properties_mixin_get</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_dbus_properties_mixin_get        (<link linkend="GObject">GObject</link> *self,
                                                         const <link linkend="gchar">gchar</link> *interface_name,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         <link linkend="GValue">GValue</link> *value,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Initialize <parameter>value</parameter> with the type of the property <parameter>property_name</parameter> on
<parameter>interface_name</parameter>, and write the value of that property into it as if
by calling the D-Bus method org.freedesktop.DBus.Properties.Get.
</para>
<para>
If Get would return a D-Bus error, <parameter>value</parameter> remains unset and <parameter>error</parameter>
is filled in instead.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> an object with this mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>interface_name</parameter>&#160;:</term>
<listitem><simpara> a D-Bus interface name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&#160;:</term>
<listitem><simpara> a D-Bus property name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> an unset GValue (initialized to all zeroes)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> used to return an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> (filling <parameter>value</parameter>) on success, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> (setting <parameter>error</parameter>)
 on failure
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.13</para></refsect2>
<refsect2 id="tp-dbus-properties-mixin-make-properties-hash" role="function">
<title>tp_dbus_properties_mixin_make_properties_hash ()</title>
<indexterm zone="tp-dbus-properties-mixin-make-properties-hash"><primary sortas="tp_dbus_properties_mixin_make_properties_hash">tp_dbus_properties_mixin_make_properties_hash</primary></indexterm><programlisting><link linkend="GHashTable">GHashTable</link> *        tp_dbus_properties_mixin_make_properties_hash
                                                        (<link linkend="GObject">GObject</link> *object,
                                                         const <link linkend="gchar">gchar</link> *first_interface,
                                                         const <link linkend="gchar">gchar</link> *first_property,
                                                         ...);</programlisting>
<para>
Retrieves the values of several D-Bus properties from an object, and builds
a hash mapping the fully-qualified name of the property to its value.  This
is equivalent to calling <link linkend="tp-dbus-properties-mixin-get"><function>tp_dbus_properties_mixin_get()</function></link> for each property
and building the table yourself, with the proviso that this function will
<link linkend="g-assert"><function>g_assert()</function></link> if retrieving a property fails (for instance, because it does not
exist).
</para>
<para>
Additional keys and values can be inserted into the returned hash table;
if this is done, the inserted keys and values will be freed when the
hash table is destroyed. The keys must be allocated with <link linkend="g-strdup"><function>g_strdup()</function></link> or
equivalent, and the values must be slice-allocated (for instance with
<link linkend="tp-g-value-slice-new-string"><function>tp_g_value_slice_new_string()</function></link> or a similar function).
</para>
<para>
Note that in particular, <link linkend="tp-asv-set-string"><function>tp_asv_set_string()</function></link> and similar functions should
not be used with this hash table.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara> an object which uses the D-Bus properties mixin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_interface</parameter>&#160;:</term>
<listitem><simpara> the interface of the first property to be retrieved
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_property</parameter>&#160;:</term>
<listitem><simpara> the name of the first property to be retrieved
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> more (interface name, property name) pairs, terminated by <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a hash table mapping (gchar *) fully-qualified property names to
         GValues, which must be freed by the caller (at which point its
         contents will also be freed).
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1 id="telepathy-glib-dbus-properties-mixin.see-also">
<title>See Also</title>
#TpSvcDBusProperties
</refsect1>

</refentry>
