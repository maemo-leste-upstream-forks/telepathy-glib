<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-svc-channel-dispatch-operation">
<refmeta>
<refentrytitle role="top_of_page" id="telepathy-glib-svc-channel-dispatch-operation.top_of_page">Service-side Channel Dispatch Operation interface</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Service-side Channel Dispatch Operation interface</refname>
<refpurpose>GInterface for Telepathy ChannelDispatchOperation object</refpurpose>
</refnamediv>

<refsynopsisdiv id="telepathy-glib-svc-channel-dispatch-operation.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>
<anchor id="TpSvcChannelDispatchOperation"/>
<synopsis>

#include &lt;telepathy-glib/svc-channel-dispatch-operation.h&gt;

                    <link linkend="TpSvcChannelDispatchOperation-struct">TpSvcChannelDispatchOperation</link>;
                    <link linkend="TpSvcChannelDispatchOperationClass">TpSvcChannelDispatchOperationClass</link>;
<link linkend="void">void</link>                <link linkend="tp-svc-channel-dispatch-operation-return-from-claim">tp_svc_channel_dispatch_operation_return_from_claim</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-dispatch-operation-claim-impl">*tp_svc_channel_dispatch_operation_claim_impl</link>)
                                                        (<link linkend="TpSvcChannelDispatchOperation">TpSvcChannelDispatchOperation</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-dispatch-operation-implement-claim">tp_svc_channel_dispatch_operation_implement_claim</link>
                                                        (<link linkend="TpSvcChannelDispatchOperationClass">TpSvcChannelDispatchOperationClass</link> *klass,
                                                         <link linkend="tp-svc-channel-dispatch-operation-claim-impl">tp_svc_channel_dispatch_operation_claim_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-dispatch-operation-return-from-handle-with">tp_svc_channel_dispatch_operation_return_from_handle_with</link>
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                (<link linkend="tp-svc-channel-dispatch-operation-handle-with-impl">*tp_svc_channel_dispatch_operation_handle_with_impl</link>)
                                                        (<link linkend="TpSvcChannelDispatchOperation">TpSvcChannelDispatchOperation</link> *self,
                                                         const <link linkend="gchar">gchar</link> *in_Handler,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-dispatch-operation-implement-handle-with">tp_svc_channel_dispatch_operation_implement_handle_with</link>
                                                        (<link linkend="TpSvcChannelDispatchOperationClass">TpSvcChannelDispatchOperationClass</link> *klass,
                                                         <link linkend="tp-svc-channel-dispatch-operation-handle-with-impl">tp_svc_channel_dispatch_operation_handle_with_impl</link> impl);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-dispatch-operation-emit-channel-lost">tp_svc_channel_dispatch_operation_emit_channel_lost</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="gchar">gchar</link> *arg_Channel,
                                                         const <link linkend="gchar">gchar</link> *arg_Error,
                                                         const <link linkend="gchar">gchar</link> *arg_Message);
<link linkend="void">void</link>                <link linkend="tp-svc-channel-dispatch-operation-emit-finished">tp_svc_channel_dispatch_operation_emit_finished</link>
                                                        (<link linkend="gpointer">gpointer</link> instance);
</synopsis>
</refsynopsisdiv>

<refsect1 id="telepathy-glib-svc-channel-dispatch-operation.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GInterface">GInterface</link>
   +----TpSvcChannelDispatchOperation
</synopsis>
</refsect1>






<refsect1 id="telepathy-glib-svc-channel-dispatch-operation.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="TpSvcChannelDispatchOperation-channel-lost">channel-lost</link>&quot;                                   : Run Last / Has Details
  &quot;<link linkend="TpSvcChannelDispatchOperation-finished">finished</link>&quot;                                       : Run Last / Has Details
</synopsis>
</refsect1>


<refsect1 id="telepathy-glib-svc-channel-dispatch-operation.description" role="desc">
<title role="desc.title">Description</title>
<para>
This interface (auto-generated from the Telepathy
spec) makes it easier to export an object implementing the Telepathy
ChannelDispatchOperation interface, with the correct method and signal
signatures, and emit signals from that object in a type-safe way.
</para>
<para>
You don't need these interfaces unless you're implementing a
Telepathy ChannelDispatcher, such as Mission Control.</para>
<para>
</para>
</refsect1>

<refsect1 id="telepathy-glib-svc-channel-dispatch-operation.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="TpSvcChannelDispatchOperation-struct" role="struct">
<title>TpSvcChannelDispatchOperation</title>
<indexterm zone="TpSvcChannelDispatchOperation-struct"><primary sortas="TpSvcChannelDispatchOperation">TpSvcChannelDispatchOperation</primary></indexterm><programlisting>typedef struct _TpSvcChannelDispatchOperation TpSvcChannelDispatchOperation;</programlisting>
<para>
Dummy typedef representing any implementation of this interface.</para>
<para>
</para></refsect2>
<refsect2 id="TpSvcChannelDispatchOperationClass" role="struct">
<title>TpSvcChannelDispatchOperationClass</title>
<indexterm zone="TpSvcChannelDispatchOperationClass"><primary sortas="TpSvcChannelDispatchOperationClass">TpSvcChannelDispatchOperationClass</primary></indexterm><programlisting>typedef struct _TpSvcChannelDispatchOperationClass TpSvcChannelDispatchOperationClass;</programlisting>
<para>
The class of TpSvcChannelDispatchOperation.</para>
<para>
</para></refsect2>
<refsect2 id="tp-svc-channel-dispatch-operation-return-from-claim" role="function">
<title>tp_svc_channel_dispatch_operation_return_from_claim ()</title>
<indexterm zone="tp-svc-channel-dispatch-operation-return-from-claim"><primary sortas="tp_svc_channel_dispatch_operation_return_from_claim">tp_svc_channel_dispatch_operation_return_from_claim</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_dispatch_operation_return_from_claim
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-dispatch-operation-claim-impl" role="function">
<title>tp_svc_channel_dispatch_operation_claim_impl ()</title>
<indexterm zone="tp-svc-channel-dispatch-operation-claim-impl"><primary sortas="tp_svc_channel_dispatch_operation_claim_impl">tp_svc_channel_dispatch_operation_claim_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_dispatch_operation_claim_impl)
                                                        (<link linkend="TpSvcChannelDispatchOperation">TpSvcChannelDispatchOperation</link> *self,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
Claim on interface org.freedesktop.Telepathy.ChannelDispatchOperation.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-dispatch-operation-implement-claim" role="function">
<title>tp_svc_channel_dispatch_operation_implement_claim ()</title>
<indexterm zone="tp-svc-channel-dispatch-operation-implement-claim"><primary sortas="tp_svc_channel_dispatch_operation_implement_claim">tp_svc_channel_dispatch_operation_implement_claim</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_dispatch_operation_implement_claim
                                                        (<link linkend="TpSvcChannelDispatchOperationClass">TpSvcChannelDispatchOperationClass</link> *klass,
                                                         <link linkend="tp-svc-channel-dispatch-operation-claim-impl">tp_svc_channel_dispatch_operation_claim_impl</link> impl);</programlisting>
<para>
Register an implementation for the Claim method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the Claim D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-dispatch-operation-return-from-handle-with" role="function">
<title>tp_svc_channel_dispatch_operation_return_from_handle_with ()</title>
<indexterm zone="tp-svc-channel-dispatch-operation-return-from-handle-with"><primary sortas="tp_svc_channel_dispatch_operation_return_from_handle_with">tp_svc_channel_dispatch_operation_return_from_handle_with</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_dispatch_operation_return_from_handle_with
                                                        (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Return successfully by calling <link linkend="dbus-g-method-return"><function>dbus_g_method_return()</function></link>.
This inline function exists only to provide type-safety.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> The D-Bus method invocation context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-dispatch-operation-handle-with-impl" role="function">
<title>tp_svc_channel_dispatch_operation_handle_with_impl ()</title>
<indexterm zone="tp-svc-channel-dispatch-operation-handle-with-impl"><primary sortas="tp_svc_channel_dispatch_operation_handle_with_impl">tp_svc_channel_dispatch_operation_handle_with_impl</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_svc_channel_dispatch_operation_handle_with_impl)
                                                        (<link linkend="TpSvcChannelDispatchOperation">TpSvcChannelDispatchOperation</link> *self,
                                                         const <link linkend="gchar">gchar</link> *in_Handler,
                                                         <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
The signature of an implementation of the D-Bus method
HandleWith on interface org.freedesktop.Telepathy.ChannelDispatchOperation.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Handler</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> Used to return values or throw an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-dispatch-operation-implement-handle-with" role="function">
<title>tp_svc_channel_dispatch_operation_implement_handle_with ()</title>
<indexterm zone="tp-svc-channel-dispatch-operation-implement-handle-with"><primary sortas="tp_svc_channel_dispatch_operation_implement_handle_with">tp_svc_channel_dispatch_operation_implement_handle_with</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_dispatch_operation_implement_handle_with
                                                        (<link linkend="TpSvcChannelDispatchOperationClass">TpSvcChannelDispatchOperationClass</link> *klass,
                                                         <link linkend="tp-svc-channel-dispatch-operation-handle-with-impl">tp_svc_channel_dispatch_operation_handle_with_impl</link> impl);</programlisting>
<para>
Register an implementation for the HandleWith method in the vtable
of an implementation of this interface. To be called from
the interface init function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> A class whose instances implement this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl</parameter>&#160;:</term>
<listitem><simpara> A callback used to implement the HandleWith D-Bus method
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-dispatch-operation-emit-channel-lost" role="function">
<title>tp_svc_channel_dispatch_operation_emit_channel_lost ()</title>
<indexterm zone="tp-svc-channel-dispatch-operation-emit-channel-lost"><primary sortas="tp_svc_channel_dispatch_operation_emit_channel_lost">tp_svc_channel_dispatch_operation_emit_channel_lost</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_dispatch_operation_emit_channel_lost
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="gchar">gchar</link> *arg_Channel,
                                                         const <link linkend="gchar">gchar</link> *arg_Error,
                                                         const <link linkend="gchar">gchar</link> *arg_Message);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
ChannelLost signal on interface org.freedesktop.Telepathy.ChannelDispatchOperation.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Channel</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Error</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Message</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-svc-channel-dispatch-operation-emit-finished" role="function">
<title>tp_svc_channel_dispatch_operation_emit_finished ()</title>
<indexterm zone="tp-svc-channel-dispatch-operation-emit-finished"><primary sortas="tp_svc_channel_dispatch_operation_emit_finished">tp_svc_channel_dispatch_operation_emit_finished</primary></indexterm><programlisting><link linkend="void">void</link>                tp_svc_channel_dispatch_operation_emit_finished
                                                        (<link linkend="gpointer">gpointer</link> instance);</programlisting>
<para>
Type-safe wrapper around g_signal_emit to emit the
Finished signal on interface org.freedesktop.Telepathy.ChannelDispatchOperation.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&#160;:</term>
<listitem><simpara> The object implementing this interface
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

<refsect1 id="telepathy-glib-svc-channel-dispatch-operation.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="TpSvcChannelDispatchOperation-channel-lost" role="signal"><title>The <literal>&quot;channel-lost&quot;</literal> signal</title>
<indexterm zone="TpSvcChannelDispatchOperation-channel-lost"><primary sortas="TpSvcChannelDispatchOperation::channel-lost">TpSvcChannelDispatchOperation::channel-lost</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcChannelDispatchOperation">TpSvcChannelDispatchOperation</link> *arg_Channel,
                                                        <link linkend="DBusGObjectPath">DBusGObjectPath</link>               *arg_Error,
                                                        <link linkend="gchar">gchar</link>                         *arg_Message,
                                                        <link linkend="gchar">gchar</link>                         *arg3,
                                                        <link linkend="gpointer">gpointer</link>                       user_data)        : Run Last / Has Details</programlisting>
<para>
The ChannelLost D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>arg_Channel</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Error</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Message</parameter>&#160;:</term>
<listitem><simpara> const gchar * (FIXME, generate documentation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpSvcChannelDispatchOperation-finished" role="signal"><title>The <literal>&quot;finished&quot;</literal> signal</title>
<indexterm zone="TpSvcChannelDispatchOperation-finished"><primary sortas="TpSvcChannelDispatchOperation::finished">TpSvcChannelDispatchOperation::finished</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpSvcChannelDispatchOperation">TpSvcChannelDispatchOperation</link> *arg0,
                                                        <link linkend="gpointer">gpointer</link>                       user_data)      : Run Last / Has Details</programlisting>
<para>
The Finished D-Bus signal is emitted whenever this GObject signal is.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>



</refentry>
