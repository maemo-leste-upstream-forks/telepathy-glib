<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-util">
<refmeta>
<refentrytitle role="top_of_page" id="telepathy-glib-util.top_of_page">Utilities</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Utilities</refname>
<refpurpose>Non-Telepathy utility functions</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv id="telepathy-glib-util.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;telepathy-glib/util.h&gt;

<link linkend="gboolean">gboolean</link>            <link linkend="tp-g-ptr-array-contains">tp_g_ptr_array_contains</link>             (<link linkend="GPtrArray">GPtrArray</link> *haystack,
                                                         <link linkend="gpointer">gpointer</link> needle);
<link linkend="GValue">GValue</link>*             <link linkend="tp-g-value-slice-new">tp_g_value_slice_new</link>                (<link linkend="GType">GType</link> type);
<link linkend="void">void</link>                <link linkend="tp-g-value-slice-free">tp_g_value_slice_free</link>               (<link linkend="GValue">GValue</link> *value);
<link linkend="GValue">GValue</link>*             <link linkend="tp-g-value-slice-dup">tp_g_value_slice_dup</link>                (const <link linkend="GValue">GValue</link> *value);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-strdiff">tp_strdiff</link>                          (const <link linkend="gchar">gchar</link> *left,
                                                         const <link linkend="gchar">gchar</link> *right);
<link linkend="gpointer">gpointer</link>            <link linkend="tp-mixin-offset-cast">tp_mixin_offset_cast</link>                (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> offset);
<link linkend="gchar">gchar</link>*              <link linkend="tp-escape-as-identifier">tp_escape_as_identifier</link>             (const <link linkend="gchar">gchar</link> *name);
</synopsis>
</refsynopsisdiv>









<refsect1 id="telepathy-glib-util.description" role="desc">
<title role="desc.title">Description</title>
<para>
Some utility functions used in telepathy-glib which could have been in
GLib, but aren't.</para>
<para>

</para>
</refsect1>

<refsect1 id="telepathy-glib-util.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="tp-g-ptr-array-contains" role="function">
<title>tp_g_ptr_array_contains ()</title>
<indexterm zone="tp-g-ptr-array-contains"><primary>tp_g_ptr_array_contains</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_g_ptr_array_contains             (<link linkend="GPtrArray">GPtrArray</link> *haystack,
                                                         <link linkend="gpointer">gpointer</link> needle);</programlisting>
<para>
<!--no further documentation needed--></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>haystack</parameter>&nbsp;:</term>
<listitem><simpara> The pointer array to be searched
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>needle</parameter>&nbsp;:</term>
<listitem><simpara> The pointer to look for
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>needle</parameter> is one of the elements of <parameter>haystack</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-g-value-slice-new" role="function" condition="since:0.5.14">
<title>tp_g_value_slice_new ()</title>
<indexterm zone="tp-g-value-slice-new" role="0.5.14"><primary>tp_g_value_slice_new</primary></indexterm><programlisting><link linkend="GValue">GValue</link>*             tp_g_value_slice_new                (<link linkend="GType">GType</link> type);</programlisting>
<para>
<!-- 'Returns' says it all --></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> The type desired for the new GValue
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a newly allocated, newly initialized <link linkend="GValue"><type>GValue</type></link>, to be freed with
<link linkend="tp-g-value-slice-free"><function>tp_g_value_slice_free()</function></link> or <link linkend="g-slice-free"><function>g_slice_free()</function></link>.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.5.14
</para></refsect2>
<refsect2 id="tp-g-value-slice-free" role="function">
<title>tp_g_value_slice_free ()</title>
<indexterm zone="tp-g-value-slice-free"><primary>tp_g_value_slice_free</primary></indexterm><programlisting><link linkend="void">void</link>                tp_g_value_slice_free               (<link linkend="GValue">GValue</link> *value);</programlisting>
<para>
Unset and free a slice-allocated GValue.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> A GValue which was allocated with the g_slice API
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-g-value-slice-dup" role="function" condition="since:0.5.14">
<title>tp_g_value_slice_dup ()</title>
<indexterm zone="tp-g-value-slice-dup" role="0.5.14"><primary>tp_g_value_slice_dup</primary></indexterm><programlisting><link linkend="GValue">GValue</link>*             tp_g_value_slice_dup                (const <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
<!-- 'Returns' says it all --></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> A GValue
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a newly allocated copy of <parameter>value</parameter>, to be freed with
<link linkend="tp-g-value-slice-free"><function>tp_g_value_slice_free()</function></link> or <link linkend="g-slice-free"><function>g_slice_free()</function></link>.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.5.14
</para></refsect2>
<refsect2 id="tp-strdiff" role="function">
<title>tp_strdiff ()</title>
<indexterm zone="tp-strdiff"><primary>tp_strdiff</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_strdiff                          (const <link linkend="gchar">gchar</link> *left,
                                                         const <link linkend="gchar">gchar</link> *right);</programlisting>
<para>
Return <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the given strings are different. Unlike <link linkend="strcmp"><type>strcmp</type></link> this
function will handle null pointers, treating them as distinct from any
string.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>left</parameter>&nbsp;:</term>
<listitem><simpara> The first string to compare (may be NULL)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>right</parameter>&nbsp;:</term>
<listitem><simpara> The second string to compare (may be NULL)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if <parameter>left</parameter> and <parameter>right</parameter> are both <link linkend="NULL:CAPS"><literal>NULL</literal></link>, or if
         neither is <link linkend="NULL:CAPS"><literal>NULL</literal></link> and both have the same contents; <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> otherwise
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-mixin-offset-cast" role="function">
<title>tp_mixin_offset_cast ()</title>
<indexterm zone="tp-mixin-offset-cast"><primary>tp_mixin_offset_cast</primary></indexterm><programlisting><link linkend="gpointer">gpointer</link>            tp_mixin_offset_cast                (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="guint">guint</link> offset);</programlisting>
<para>
Extend a pointer by an offset, provided the offset is not 0.
This is used to cast from an object instance to one of the telepathy-glib
mixin classes.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> A pointer to a structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara> The offset of a structure member in bytes, which must not be 0
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a pointer <parameter>offset</parameter> bytes beyond <parameter>instance</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-escape-as-identifier" role="function">
<title>tp_escape_as_identifier ()</title>
<indexterm zone="tp-escape-as-identifier"><primary>tp_escape_as_identifier</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*              tp_escape_as_identifier             (const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Escape an arbitrary string so it follows the rules for a C identifier,
and hence an object path component, interface element component,
bus name component or member name in D-Bus.
</para>
<para>
Unlike g_strcanon this is a reversible encoding, so it preserves
distinctness.
</para>
<para>
The escaping consists of replacing all non-alphanumerics, and the first
character if it's a digit, with an underscore and two lower-case hex
digits:
</para>
<para>
   "0123abc_xyz\x01\xff" -> _30123abc_5fxyz_01_ff
</para>
<para>
i.e. similar to URI encoding, but with _ taking the role of %, and a
smaller allowed set.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> The string to be escaped
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the escaped string, which must be freed by the caller with <link linkend="g-free"><type>g_free</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
