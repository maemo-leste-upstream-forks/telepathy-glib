<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="TpChannelManager">
<refmeta>
<refentrytitle role="top_of_page" id="TpChannelManager.top_of_page">TpChannelManager</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>TpChannelManager</refname>
<refpurpose>interface for creating and tracking channels</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv id="TpChannelManager.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;telepathy-glib/channel-manager.h&gt;

<link linkend="void">void</link>                (<link linkend="TpChannelManagerChannelClassFunc">*TpChannelManagerChannelClassFunc</link>) (<link linkend="TpChannelManager">TpChannelManager</link> *manager,
                                                         <link linkend="GHashTable">GHashTable</link> *fixed_properties,
                                                         const <link linkend="gchar">gchar</link> * const *allowed_properties,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                (<link linkend="TpChannelManagerForeachChannelClassFunc">*TpChannelManagerForeachChannelClassFunc</link>)
                                                        (<link linkend="TpChannelManager">TpChannelManager</link> *manager,
                                                         <link linkend="TpChannelManagerChannelClassFunc">TpChannelManagerChannelClassFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                (<link linkend="TpChannelManagerForeachChannelFunc">*TpChannelManagerForeachChannelFunc</link>)
                                                        (<link linkend="TpChannelManager">TpChannelManager</link> *manager,
                                                         <link linkend="TpExportableChannelFunc">TpExportableChannelFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="gboolean">gboolean</link>            (<link linkend="TpChannelManagerRequestFunc">*TpChannelManagerRequestFunc</link>)      (<link linkend="TpChannelManager">TpChannelManager</link> *manager,
                                                         <link linkend="gpointer">gpointer</link> request_token,
                                                         <link linkend="GHashTable">GHashTable</link> *request_properties);
                    <link linkend="TpChannelManager-struct">TpChannelManager</link>;
                    <link linkend="TpChannelManagerIface">TpChannelManagerIface</link>;
<link linkend="gboolean">gboolean</link>            <link linkend="tp-channel-manager-asv-has-unknown-properties">tp_channel_manager_asv_has_unknown_properties</link>
                                                        (<link linkend="GHashTable">GHashTable</link> *properties,
                                                         const <link linkend="gchar">gchar</link> * const *fixed,
                                                         const <link linkend="gchar">gchar</link> * const *allowed,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-channel-manager-create-channel">tp_channel_manager_create_channel</link>   (<link linkend="TpChannelManager">TpChannelManager</link> *manager,
                                                         <link linkend="gpointer">gpointer</link> request_token,
                                                         <link linkend="GHashTable">GHashTable</link> *request_properties);
<link linkend="void">void</link>                <link linkend="tp-channel-manager-emit-channel-closed">tp_channel_manager_emit_channel_closed</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="gchar">gchar</link> *path);
<link linkend="void">void</link>                <link linkend="tp-channel-manager-emit-channel-closed-for-object">tp_channel_manager_emit_channel_closed_for_object</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="TpExportableChannel">TpExportableChannel</link> *channel);
<link linkend="void">void</link>                <link linkend="tp-channel-manager-emit-new-channel">tp_channel_manager_emit_new_channel</link> (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="TpExportableChannel">TpExportableChannel</link> *channel,
                                                         <link linkend="GSList">GSList</link> *request_tokens);
<link linkend="void">void</link>                <link linkend="tp-channel-manager-emit-new-channels">tp_channel_manager_emit_new_channels</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="GHashTable">GHashTable</link> *channels);
<link linkend="void">void</link>                <link linkend="tp-channel-manager-emit-request-already-satisfied">tp_channel_manager_emit_request_already_satisfied</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="gpointer">gpointer</link> request_token,
                                                         <link linkend="TpExportableChannel">TpExportableChannel</link> *channel);
<link linkend="void">void</link>                <link linkend="tp-channel-manager-emit-request-failed">tp_channel_manager_emit_request_failed</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="gpointer">gpointer</link> request_token,
                                                         <link linkend="GQuark">GQuark</link> domain,
                                                         <link linkend="gint">gint</link> code,
                                                         const <link linkend="gchar">gchar</link> *message);
<link linkend="void">void</link>                <link linkend="tp-channel-manager-emit-request-failed-printf">tp_channel_manager_emit_request_failed_printf</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="gpointer">gpointer</link> request_token,
                                                         <link linkend="GQuark">GQuark</link> domain,
                                                         <link linkend="gint">gint</link> code,
                                                         const <link linkend="gchar">gchar</link> *format,
                                                         ...);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-channel-manager-ensure-channel">tp_channel_manager_ensure_channel</link>   (<link linkend="TpChannelManager">TpChannelManager</link> *manager,
                                                         <link linkend="gpointer">gpointer</link> request_token,
                                                         <link linkend="GHashTable">GHashTable</link> *request_properties);
<link linkend="void">void</link>                <link linkend="tp-channel-manager-foreach-channel">tp_channel_manager_foreach_channel</link>  (<link linkend="TpChannelManager">TpChannelManager</link> *manager,
                                                         <link linkend="TpExportableChannelFunc">TpExportableChannelFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="tp-channel-manager-foreach-channel-class">tp_channel_manager_foreach_channel_class</link>
                                                        (<link linkend="TpChannelManager">TpChannelManager</link> *manager,
                                                         <link linkend="TpChannelManagerChannelClassFunc">TpChannelManagerChannelClassFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-channel-manager-request-channel">tp_channel_manager_request_channel</link>  (<link linkend="TpChannelManager">TpChannelManager</link> *manager,
                                                         <link linkend="gpointer">gpointer</link> request_token,
                                                         <link linkend="GHashTable">GHashTable</link> *request_properties);
</synopsis>
</refsynopsisdiv>

<refsect1 id="TpChannelManager.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GInterface">GInterface</link>
   +----TpChannelManager
</synopsis>

</refsect1>






<refsect1 id="TpChannelManager.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="TpChannelManager-channel-closed">channel-closed</link>&quot;                                 : Run Last / Has Details
  &quot;<link linkend="TpChannelManager-new-channels">new-channels</link>&quot;                                   : Run Last / Has Details
  &quot;<link linkend="TpChannelManager-request-already-satisfied">request-already-satisfied</link>&quot;                      : Run Last / Has Details
  &quot;<link linkend="TpChannelManager-request-failed">request-failed</link>&quot;                                 : Run Last / Has Details
</synopsis>
</refsect1>


<refsect1 id="TpChannelManager.description" role="desc">
<title role="desc.title">Description</title>
<para>
A channel manager is attached to a connection. It carries out channel
requests from the connection, and responds to channel-related events on the
underlying network connection, for particular classes of channel (for
example, incoming and outgoing calls, respectively). It also tracks
currently-open channels of the relevant kinds.
</para>
<para>
The connection has an array of channel managers. In response to a call to
CreateChannel or RequestChannel, the channel request is offered to each
channel manager in turn, until one accepts the request. In a trivial
implementation there might be a single channel manager which handles all
requests and all incoming events, but in general, there will be multiple
channel managers handling different types of channel.
</para>
<para>
For example, at the time of writing, Gabble has a roster channel manager
which handles contact lists and groups, an IM channel manager which
handles one-to-one messaging, a MUC channel manager which handles
multi-user chat rooms, the index of chat rooms and MUC tubes, a media
channel manager which handles VoIP calls, and a 1-1 tubes channel manager.</para>
<para>

</para>
</refsect1>

<refsect1 id="TpChannelManager.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="TpChannelManagerChannelClassFunc" role="function">
<title>TpChannelManagerChannelClassFunc ()</title>
<indexterm zone="TpChannelManagerChannelClassFunc"><primary>TpChannelManagerChannelClassFunc</primary></indexterm><programlisting><link linkend="void">void</link>                (*TpChannelManagerChannelClassFunc) (<link linkend="TpChannelManager">TpChannelManager</link> *manager,
                                                         <link linkend="GHashTable">GHashTable</link> *fixed_properties,
                                                         const <link linkend="gchar">gchar</link> * const *allowed_properties,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Signature of callbacks which act on each channel class supported by <parameter>manager</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>manager</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing <link linkend="TpChannelManager"><type>TpChannelManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fixed_properties</parameter>&nbsp;:</term>
<listitem><simpara> A table mapping (const gchar *) property names to
 GValues, representing the values those properties must take to request
 channels of a particular class.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>allowed_properties</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="NULL:CAPS"><literal>NULL</literal></link>-terminated array of property names which may
 appear in requests for a particular channel class.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> Arbitrary user-supplied data.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TpChannelManagerForeachChannelClassFunc" role="function">
<title>TpChannelManagerForeachChannelClassFunc ()</title>
<indexterm zone="TpChannelManagerForeachChannelClassFunc"><primary>TpChannelManagerForeachChannelClassFunc</primary></indexterm><programlisting><link linkend="void">void</link>                (*TpChannelManagerForeachChannelClassFunc)
                                                        (<link linkend="TpChannelManager">TpChannelManager</link> *manager,
                                                         <link linkend="TpChannelManagerChannelClassFunc">TpChannelManagerChannelClassFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Signature of an implementation of foreach_channel_class, which must call
func(manager, fixed, allowed, user_data) for each channel class understood
by <parameter>manager</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>manager</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing <link linkend="TpChannelManager"><type>TpChannelManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara> A function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> Arbitrary data to be passed as the final argument of <parameter>func</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TpChannelManagerForeachChannelFunc" role="function">
<title>TpChannelManagerForeachChannelFunc ()</title>
<indexterm zone="TpChannelManagerForeachChannelFunc"><primary>TpChannelManagerForeachChannelFunc</primary></indexterm><programlisting><link linkend="void">void</link>                (*TpChannelManagerForeachChannelFunc)
                                                        (<link linkend="TpChannelManager">TpChannelManager</link> *manager,
                                                         <link linkend="TpExportableChannelFunc">TpExportableChannelFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Signature of an implementation of foreach_channel, which must call
func(channel, user_data) for each channel managed by this channel manager.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>manager</parameter>&nbsp;:</term>
<listitem><simpara> an object implementing <link linkend="TpChannelManager"><type>TpChannelManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara> A function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> Arbitrary data to be passed as the second argument of <parameter>func</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TpChannelManagerRequestFunc" role="function">
<title>TpChannelManagerRequestFunc ()</title>
<indexterm zone="TpChannelManagerRequestFunc"><primary>TpChannelManagerRequestFunc</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            (*TpChannelManagerRequestFunc)      (<link linkend="TpChannelManager">TpChannelManager</link> *manager,
                                                         <link linkend="gpointer">gpointer</link> request_token,
                                                         <link linkend="GHashTable">GHashTable</link> *request_properties);</programlisting>
<para>
Signature of an implementation of <link linkend="TpChannelManagerIface-create-channel"><type>"create_channel"</type></link> and
<link linkend="TpChannelManagerIface-request-channel"><type>"request_channel"</type></link>.
</para>
<para>
Implementations should inspect the contents of <parameter>request_properties</parameter> to see if
it matches a channel class handled by this manager.  If so, they should
return <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> to accept responsibility for the request, and ultimately emit
exactly one of the <link linkend="TpChannelManagerIface-new-channels"><type>"new-channels"</type></link>,
<link linkend="TpChannelManagerIface-already-satisfied"><type>"already-satisfied"</type></link> and
<link linkend="TpChannelManagerIface-request-failed"><type>"request-failed"</type></link> signals (including <parameter>request_token</parameter> in
the appropriate argument).
</para>
<para>
If the implementation does not want to handle the request, it should return
<link linkend="FALSE:CAPS"><literal>FALSE</literal></link> to allow the request to be offered to another channel manager.
</para>
<para>
Implementations may assume the following of <parameter>request_properties</parameter>:
</para>
<para>
<itemizedlist>
  <listitem>
     the ChannelType property is present, and is a (const gchar *)
  </listitem>
  <listitem>
    the TargetHandleType property is a valid <link linkend="TpHandleType"><type>TpHandleType</type></link>, if present
  </listitem>
  <listitem>
    if TargetHandleType is None, TargetHandle is omitted
  </listitem>
  <listitem>
    if TargetHandleType is not None, TargetHandle is a valid <link linkend="TpHandle"><type>TpHandle</type></link> of
    that <link linkend="TpHandleType"><type>TpHandleType</type></link>
  </listitem>
  <listitem>
    the TargetID property is not present (if supplied by the client, it will
    be converted to a TargetHandle before being passed to this function)
  </listitem>
</itemizedlist></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>manager</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing <link linkend="TpChannelManager"><type>TpChannelManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request_token</parameter>&nbsp;:</term>
<listitem><simpara> An opaque pointer representing this pending request.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request_properties</parameter>&nbsp;:</term>
<listitem><simpara> A table mapping (const gchar *) property names to
 GValue, representing the desired properties of a channel requested by a
 Telepathy client. The hash table will be freed after the function returns;
 if the channel manager wants to keep it around, it must copy it.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>manager</parameter> will handle this request, else <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TpChannelManager-struct" role="struct">
<title>TpChannelManager</title>
<indexterm zone="TpChannelManager-struct"><primary>TpChannelManager</primary></indexterm><programlisting>typedef struct _TpChannelManager TpChannelManager;</programlisting>
<para>
Opaque typedef representing any channel manager implementation.</para>
<para>

</para></refsect2>
<refsect2 id="TpChannelManagerIface" role="struct" condition="since:0.7.15">
<title>TpChannelManagerIface</title>
<indexterm zone="TpChannelManagerIface" role="0.7.15"><primary>TpChannelManagerIface</primary></indexterm><programlisting>typedef struct {
    GTypeInterface parent;

    TpChannelManagerForeachChannelFunc foreach_channel;

    TpChannelManagerForeachChannelClassFunc foreach_channel_class;

    TpChannelManagerRequestFunc create_channel;
    TpChannelManagerRequestFunc request_channel;
    TpChannelManagerRequestFunc ensure_channel;
} TpChannelManagerIface;
</programlisting>
<para>
The vtable for a channel manager implementation.
</para>
<para>
In addition to the fields documented here there are several GCallback
fields which must currently be <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="GTypeInterface">GTypeInterface</link>&nbsp;<structfield>parent</structfield>;</term>
<listitem><simpara> Fields shared with GTypeInterface.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpChannelManagerForeachChannelFunc">TpChannelManagerForeachChannelFunc</link>&nbsp;<structfield>foreach_channel</structfield>;</term>
<listitem><simpara> Call func(channel, user_data) for each channel managed by
 this manager. If not implemented, the manager is assumed to manage no
 channels.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpChannelManagerForeachChannelClassFunc">TpChannelManagerForeachChannelClassFunc</link>&nbsp;<structfield>foreach_channel_class</structfield>;</term>
<listitem><simpara> Call func(manager, fixed, allowed, user_data) for
 each class of channel that this manager can create. If not implemented, the
 manager is assumed to be able to create no classes of channels.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpChannelManagerRequestFunc">TpChannelManagerRequestFunc</link>&nbsp;<structfield>create_channel</structfield>;</term>
<listitem><simpara> Respond to a request for a new channel made with the
 Connection.Interface.Requests.CreateChannel method. See
 <link linkend="TpChannelManagerRequestFunc"><type>TpChannelManagerRequestFunc</type></link> for details.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpChannelManagerRequestFunc">TpChannelManagerRequestFunc</link>&nbsp;<structfield>request_channel</structfield>;</term>
<listitem><simpara> Respond to a request for a (new or existing) channel made
 with the Connection.RequestChannel method. See <link linkend="TpChannelManagerRequestFunc"><type>TpChannelManagerRequestFunc</type></link>
 for details.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpChannelManagerRequestFunc">TpChannelManagerRequestFunc</link>&nbsp;<structfield>ensure_channel</structfield>;</term>
<listitem><simpara> Respond to a request for a (new or existing) channel made
 with the Connection.Interface.Requests.EnsureChannel method. See
 <link linkend="TpChannelManagerRequestFunc"><type>TpChannelManagerRequestFunc</type></link> for details.
 Since: 0.7.16
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since  0.7.15
</para></refsect2>
<refsect2 id="tp-channel-manager-asv-has-unknown-properties" role="function" condition="since:0.7.15">
<title>tp_channel_manager_asv_has_unknown_properties ()</title>
<indexterm zone="tp-channel-manager-asv-has-unknown-properties" role="0.7.15"><primary>tp_channel_manager_asv_has_unknown_properties</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_channel_manager_asv_has_unknown_properties
                                                        (<link linkend="GHashTable">GHashTable</link> *properties,
                                                         const <link linkend="gchar">gchar</link> * const *fixed,
                                                         const <link linkend="gchar">gchar</link> * const *allowed,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Checks whether the keys of <parameter>properties</parameter> are elements of one of <parameter>fixed</parameter> and
<parameter>allowed</parameter>.  This is intended to be used by implementations of
<link linkend="TpChannelManager-create-channel"><type>"create_channel"</type></link> which have decided to accept a request,
to conform with the specification's requirement that unknown requested
properties must cause a request to fail, not be silently ignored.
</para>
<para>
On encountering unknown properties, this function will return <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>, and
set <parameter>error</parameter> to a <link linkend="GError"><type>GError</type></link> that could be used as a D-Bus method error.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>properties</parameter>&nbsp;:</term>
<listitem><simpara> a table mapping (const gchar *) property names to GValues,
             as passed to methods of <link linkend="TpChannelManager"><type>TpChannelManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fixed</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="NULL:CAPS"><literal>NULL</literal></link>-terminated array of property names
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>allowed</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="NULL:CAPS"><literal>NULL</literal></link>-terminated array of property names
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> an address at which to store an error suitable for returning from
        the D-Bus method when <parameter>properties</parameter> contains unknown properties
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if all of the keys of <parameter>properties</parameter> are elements of <parameter>fixed</parameter> or
         <parameter>allowed</parameter>; else <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7.15
</para></refsect2>
<refsect2 id="tp-channel-manager-create-channel" role="function" condition="since:0.7.15">
<title>tp_channel_manager_create_channel ()</title>
<indexterm zone="tp-channel-manager-create-channel" role="0.7.15"><primary>tp_channel_manager_create_channel</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_channel_manager_create_channel   (<link linkend="TpChannelManager">TpChannelManager</link> *manager,
                                                         <link linkend="gpointer">gpointer</link> request_token,
                                                         <link linkend="GHashTable">GHashTable</link> *request_properties);</programlisting>
<para>
Offers an incoming CreateChannel call to <parameter>manager</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>manager</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing <link linkend="TpChannelManager"><type>TpChannelManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request_token</parameter>&nbsp;:</term>
<listitem><simpara> An opaque pointer representing this pending request.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request_properties</parameter>&nbsp;:</term>
<listitem><simpara> A table mapping (const gchar *) property names to
 GValue, representing the desired properties of a channel requested by a
 Telepathy client.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if this request will be handled by <parameter>manager</parameter>; else <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7.15
</para></refsect2>
<refsect2 id="tp-channel-manager-emit-channel-closed" role="function" condition="since:0.7.15">
<title>tp_channel_manager_emit_channel_closed ()</title>
<indexterm zone="tp-channel-manager-emit-channel-closed" role="0.7.15"><primary>tp_channel_manager_emit_channel_closed</primary></indexterm><programlisting><link linkend="void">void</link>                tp_channel_manager_emit_channel_closed
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         const <link linkend="gchar">gchar</link> *path);</programlisting>
<para>
Emit the <link linkend="TpChannelManager-channel-closed"><type>"channel-closed"</type></link> signal indicating that
the channel at the given object path has been closed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing <link linkend="TpChannelManager"><type>TpChannelManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara> A channel's object-path
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7.15
</para></refsect2>
<refsect2 id="tp-channel-manager-emit-channel-closed-for-object" role="function" condition="since:0.7.15">
<title>tp_channel_manager_emit_channel_closed_for_object ()</title>
<indexterm zone="tp-channel-manager-emit-channel-closed-for-object" role="0.7.15"><primary>tp_channel_manager_emit_channel_closed_for_object</primary></indexterm><programlisting><link linkend="void">void</link>                tp_channel_manager_emit_channel_closed_for_object
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="TpExportableChannel">TpExportableChannel</link> *channel);</programlisting>
<para>
Emit the <link linkend="TpChannelManager-channel-closed"><type>"channel-closed"</type></link> signal indicating that
the given channel has been closed. (This is a convenient shortcut for
calling <link linkend="tp-channel-manager-emit-channel-closed"><function>tp_channel_manager_emit_channel_closed()</function></link> with the
<link linkend="TpExportableChannel--object-path"><type>"object-path"</type></link> property of <parameter>channel</parameter>.)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing <link linkend="TpChannelManager"><type>TpChannelManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>channel</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpExportableChannel"><type>TpExportableChannel</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7.15
</para></refsect2>
<refsect2 id="tp-channel-manager-emit-new-channel" role="function" condition="since:0.7.15">
<title>tp_channel_manager_emit_new_channel ()</title>
<indexterm zone="tp-channel-manager-emit-new-channel" role="0.7.15"><primary>tp_channel_manager_emit_new_channel</primary></indexterm><programlisting><link linkend="void">void</link>                tp_channel_manager_emit_new_channel (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="TpExportableChannel">TpExportableChannel</link> *channel,
                                                         <link linkend="GSList">GSList</link> *request_tokens);</programlisting>
<para>
Emit the <link linkend="TpChannelManager-new-channels"><type>"new-channels"</type></link> signal indicating that the
channel has been created. (This is a convenient shortcut for calling
<link linkend="tp-channel-manager-emit-new-channels"><function>tp_channel_manager_emit_new_channels()</function></link> with a one-entry hash table.)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing <link linkend="TpChannelManager"><type>TpChannelManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>channel</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="TpExportableChannel"><type>TpExportableChannel</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request_tokens</parameter>&nbsp;:</term>
<listitem><simpara> the request tokens (opaque pointers) satisfied by this
                 channel
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7.15
</para></refsect2>
<refsect2 id="tp-channel-manager-emit-new-channels" role="function" condition="since:0.7.15">
<title>tp_channel_manager_emit_new_channels ()</title>
<indexterm zone="tp-channel-manager-emit-new-channels" role="0.7.15"><primary>tp_channel_manager_emit_new_channels</primary></indexterm><programlisting><link linkend="void">void</link>                tp_channel_manager_emit_new_channels
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="GHashTable">GHashTable</link> *channels);</programlisting>
<para>
If <parameter>channels</parameter> is non-empty, emit the <link linkend="TpChannelManager-new-channels"><type>"new-channels"</type></link>
signal indicating that those channels have been created.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing <link linkend="TpChannelManager"><type>TpChannelManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>channels</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GHashTable"><type>GHashTable</type></link> where the keys are
 <link linkend="TpExportableChannel"><type>TpExportableChannel</type></link> instances (hashed and compared
 by <link linkend="g-direct-hash"><function>g_direct_hash()</function></link> and <link linkend="g-direct-equal"><function>g_direct_equal()</function></link>) and the values are
 linked lists (<link linkend="GSList"><type>GSList</type></link>) of request tokens (opaque pointers) satisfied by
 these channels
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7.15
</para></refsect2>
<refsect2 id="tp-channel-manager-emit-request-already-satisfied" role="function" condition="since:0.7.15">
<title>tp_channel_manager_emit_request_already_satisfied ()</title>
<indexterm zone="tp-channel-manager-emit-request-already-satisfied" role="0.7.15"><primary>tp_channel_manager_emit_request_already_satisfied</primary></indexterm><programlisting><link linkend="void">void</link>                tp_channel_manager_emit_request_already_satisfied
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="gpointer">gpointer</link> request_token,
                                                         <link linkend="TpExportableChannel">TpExportableChannel</link> *channel);</programlisting>
<para>
Emit the <link linkend="TpChannelManager-request-already-satisfied"><type>"request-already-satisfied"</type></link> signal indicating
that the pre-existing channel <parameter>channel</parameter> satisfies <parameter>request_token</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing <link linkend="TpChannelManager"><type>TpChannelManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request_token</parameter>&nbsp;:</term>
<listitem><simpara> An opaque pointer representing the request that
 succeeded
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>channel</parameter>&nbsp;:</term>
<listitem><simpara> The channel that satisfies the request
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7.15
</para></refsect2>
<refsect2 id="tp-channel-manager-emit-request-failed" role="function" condition="since:0.7.15">
<title>tp_channel_manager_emit_request_failed ()</title>
<indexterm zone="tp-channel-manager-emit-request-failed" role="0.7.15"><primary>tp_channel_manager_emit_request_failed</primary></indexterm><programlisting><link linkend="void">void</link>                tp_channel_manager_emit_request_failed
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="gpointer">gpointer</link> request_token,
                                                         <link linkend="GQuark">GQuark</link> domain,
                                                         <link linkend="gint">gint</link> code,
                                                         const <link linkend="gchar">gchar</link> *message);</programlisting>
<para>
Emit the <link linkend="TpChannelManager-request-failed"><type>"request-failed"</type></link> signal indicating that
the request <parameter>request_token</parameter> failed for the given reason.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing <link linkend="TpChannelManager"><type>TpChannelManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request_token</parameter>&nbsp;:</term>
<listitem><simpara> An opaque pointer representing the request that failed
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>domain</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GError"><type>GError</type></link> domain
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>code</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GError"><type>GError</type></link> code appropriate for <parameter>domain</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&nbsp;:</term>
<listitem><simpara> the error message
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7.15
</para></refsect2>
<refsect2 id="tp-channel-manager-emit-request-failed-printf" role="function" condition="since:0.7.15">
<title>tp_channel_manager_emit_request_failed_printf ()</title>
<indexterm zone="tp-channel-manager-emit-request-failed-printf" role="0.7.15"><primary>tp_channel_manager_emit_request_failed_printf</primary></indexterm><programlisting><link linkend="void">void</link>                tp_channel_manager_emit_request_failed_printf
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="gpointer">gpointer</link> request_token,
                                                         <link linkend="GQuark">GQuark</link> domain,
                                                         <link linkend="gint">gint</link> code,
                                                         const <link linkend="gchar">gchar</link> *format,
                                                         ...);</programlisting>
<para>
Emit the <link linkend="TpChannelManager-request-failed"><type>"request-failed"</type></link> signal indicating that
the request <parameter>request_token</parameter> failed for the given reason.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing <link linkend="TpChannelManager"><type>TpChannelManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request_token</parameter>&nbsp;:</term>
<listitem><simpara> An opaque pointer representing the request that failed
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>domain</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GError"><type>GError</type></link> domain
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>code</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GError"><type>GError</type></link> code appropriate for <parameter>domain</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara> a printf-style format string for the error message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara> arguments for the format string
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7.15
</para></refsect2>
<refsect2 id="tp-channel-manager-ensure-channel" role="function" condition="since:0.7.16">
<title>tp_channel_manager_ensure_channel ()</title>
<indexterm zone="tp-channel-manager-ensure-channel" role="0.7.16"><primary>tp_channel_manager_ensure_channel</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_channel_manager_ensure_channel   (<link linkend="TpChannelManager">TpChannelManager</link> *manager,
                                                         <link linkend="gpointer">gpointer</link> request_token,
                                                         <link linkend="GHashTable">GHashTable</link> *request_properties);</programlisting>
<para>
Offers an incoming EnsureChannel call to <parameter>manager</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>manager</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing <link linkend="TpChannelManager"><type>TpChannelManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request_token</parameter>&nbsp;:</term>
<listitem><simpara> An opaque pointer representing this pending request.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request_properties</parameter>&nbsp;:</term>
<listitem><simpara> A table mapping (const gchar *) property names to
 GValue, representing the desired properties of a channel requested by a
 Telepathy client.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if this request will be handled by <parameter>manager</parameter>; else <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7.16
</para></refsect2>
<refsect2 id="tp-channel-manager-foreach-channel" role="function" condition="since:0.7.15">
<title>tp_channel_manager_foreach_channel ()</title>
<indexterm zone="tp-channel-manager-foreach-channel" role="0.7.15"><primary>tp_channel_manager_foreach_channel</primary></indexterm><programlisting><link linkend="void">void</link>                tp_channel_manager_foreach_channel  (<link linkend="TpChannelManager">TpChannelManager</link> *manager,
                                                         <link linkend="TpExportableChannelFunc">TpExportableChannelFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Calls func(channel, user_data) for each channel managed by <parameter>manager</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>manager</parameter>&nbsp;:</term>
<listitem><simpara> an object implementing <link linkend="TpChannelManager"><type>TpChannelManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara> A function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> Arbitrary data to be passed as the second argument of <parameter>func</parameter>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7.15
</para></refsect2>
<refsect2 id="tp-channel-manager-foreach-channel-class" role="function" condition="since:0.7.15">
<title>tp_channel_manager_foreach_channel_class ()</title>
<indexterm zone="tp-channel-manager-foreach-channel-class" role="0.7.15"><primary>tp_channel_manager_foreach_channel_class</primary></indexterm><programlisting><link linkend="void">void</link>                tp_channel_manager_foreach_channel_class
                                                        (<link linkend="TpChannelManager">TpChannelManager</link> *manager,
                                                         <link linkend="TpChannelManagerChannelClassFunc">TpChannelManagerChannelClassFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Calls func(manager, fixed, allowed, user_data) for each channel class
understood by <parameter>manager</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>manager</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing <link linkend="TpChannelManager"><type>TpChannelManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara> A function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> Arbitrary data to be passed as the final argument of <parameter>func</parameter>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7.15
</para></refsect2>
<refsect2 id="tp-channel-manager-request-channel" role="function" condition="since:0.7.15">
<title>tp_channel_manager_request_channel ()</title>
<indexterm zone="tp-channel-manager-request-channel" role="0.7.15"><primary>tp_channel_manager_request_channel</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_channel_manager_request_channel  (<link linkend="TpChannelManager">TpChannelManager</link> *manager,
                                                         <link linkend="gpointer">gpointer</link> request_token,
                                                         <link linkend="GHashTable">GHashTable</link> *request_properties);</programlisting>
<para>
Offers an incoming RequestChannel call to <parameter>manager</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>manager</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing <link linkend="TpChannelManager"><type>TpChannelManager</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request_token</parameter>&nbsp;:</term>
<listitem><simpara> An opaque pointer representing this pending request.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request_properties</parameter>&nbsp;:</term>
<listitem><simpara> A table mapping (const gchar *) property names to
 GValue, representing the desired properties of a channel requested by a
 Telepathy client.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if this request will be handled by <parameter>manager</parameter>; else <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7.15
</para></refsect2>

</refsect1>

<refsect1 id="TpChannelManager.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="TpChannelManager-channel-closed"><title>The <literal>&quot;channel-closed&quot;</literal> signal</title>
<indexterm zone="TpChannelManager-channel-closed"><primary>TpChannelManager::channel-closed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpChannelManager">TpChannelManager</link> *self,
                                                        <link linkend="gchar">gchar</link>            *path,
                                                        <link linkend="gpointer">gpointer</link>          user_data)      : Run Last / Has Details</programlisting>
<para>
Emitted when a channel has been closed. The Connection should
generally respond to this signal by emitting ChannelClosed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> the channel manager
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara> the channel's object-path
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpChannelManager-new-channels"><title>The <literal>&quot;new-channels&quot;</literal> signal</title>
<indexterm zone="TpChannelManager-new-channels"><primary>TpChannelManager::new-channels</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpChannelManager">TpChannelManager</link> *self,
                                                        <link linkend="gpointer">gpointer</link>          channels,
                                                        <link linkend="gpointer">gpointer</link>          user_data)      : Run Last / Has Details</programlisting>
<para>
Emitted when new channels have been created. The Connection should
generally emit NewChannels (and NewChannel) in response to this
signal, and then return from pending CreateChannel, EnsureChannel
and/or RequestChannel calls if appropriate.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> the channel manager
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>channels</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GHashTable"><type>GHashTable</type></link> where the keys are
 <link linkend="TpExportableChannel"><type>TpExportableChannel</type></link> instances (hashed and compared
 by <link linkend="g-direct-hash"><function>g_direct_hash()</function></link> and <link linkend="g-direct-equal"><function>g_direct_equal()</function></link>) and the values are
 linked lists (<link linkend="GSList"><type>GSList</type></link>) of request tokens (opaque pointers) satisfied
 by these channels
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpChannelManager-request-already-satisfied"><title>The <literal>&quot;request-already-satisfied&quot;</literal> signal</title>
<indexterm zone="TpChannelManager-request-already-satisfied"><primary>TpChannelManager::request-already-satisfied</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpChannelManager">TpChannelManager</link> *self,
                                                        <link linkend="gpointer">gpointer</link>          request_token,
                                                        <link linkend="GObject">GObject</link>          *channel,
                                                        <link linkend="gpointer">gpointer</link>          user_data)          : Run Last / Has Details</programlisting>
<para>
Emitted when a channel request is satisfied by an existing channel.
The Connection should generally respond to this signal by returning
success from EnsureChannel or RequestChannel.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> the channel manager
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request_token</parameter>&nbsp;:</term>
<listitem><simpara> opaque pointer supplied by the requester,
 representing a request
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>channel</parameter>&nbsp;:</term>
<listitem><simpara> the existing <link linkend="TpExportableChannel"><type>TpExportableChannel</type></link> that satisfies the
 request
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="TpChannelManager-request-failed"><title>The <literal>&quot;request-failed&quot;</literal> signal</title>
<indexterm zone="TpChannelManager-request-failed"><primary>TpChannelManager::request-failed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpChannelManager">TpChannelManager</link> *self,
                                                        <link linkend="gpointer">gpointer</link>          request_token,
                                                        <link linkend="guint">guint</link>             domain,
                                                        <link linkend="gint">gint</link>              code,
                                                        <link linkend="gchar">gchar</link>            *message,
                                                        <link linkend="gpointer">gpointer</link>          user_data)          : Run Last / Has Details</programlisting>
<para>
Emitted when a channel request has failed. The Connection should
generally respond to this signal by returning failure from
CreateChannel, EnsureChannel or RequestChannel.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> the channel manager
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request_token</parameter>&nbsp;:</term>
<listitem><simpara> opaque pointer supplied by the requester,
 representing a request
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>domain</parameter>&nbsp;:</term>
<listitem><simpara> the domain of a <link linkend="GError"><type>GError</type></link> indicating why the request
 failed
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>code</parameter>&nbsp;:</term>
<listitem><simpara> the error code of a <link linkend="GError"><type>GError</type></link> indicating why the request
 failed
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&nbsp;:</term>
<listitem><simpara> the string part of a <link linkend="GError"><type>GError</type></link> indicating why the request
 failed
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>


<refsect1 id="TpChannelManager.see-also">
<title>See Also</title>
<link linkend="TpSvcConnection"><type>TpSvcConnection</type></link>
</refsect1>

</refentry>
