<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-debug-sender">
<refmeta>
<refentrytitle role="top_of_page" id="telepathy-glib-debug-sender.top_of_page">TpDebugSender</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>TpDebugSender</refname>
<refpurpose>object for exposing Telepathy debug interface</refpurpose>
</refnamediv>

<refsynopsisdiv id="telepathy-glib-debug-sender.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>
<anchor id="TpDebugSender"/>
<synopsis>

#include &lt;telepathy-glib/debug-sender.h&gt;

                    <link linkend="TpDebugSender-struct">TpDebugSender</link>;
<link linkend="TpDebugSender">TpDebugSender</link> *     <link linkend="tp-debug-sender-dup">tp_debug_sender_dup</link>                 (void);
<link linkend="void">void</link>                <link linkend="tp-debug-sender-add-message">tp_debug_sender_add_message</link>         (<link linkend="TpDebugSender">TpDebugSender</link> *self,
                                                         <link linkend="GTimeVal">GTimeVal</link> *timestamp,
                                                         const <link linkend="gchar">gchar</link> *domain,
                                                         <link linkend="GLogLevelFlags">GLogLevelFlags</link> level,
                                                         const <link linkend="gchar">gchar</link> *string);
<link linkend="void">void</link>                <link linkend="tp-debug-sender-log-handler">tp_debug_sender_log_handler</link>         (const <link linkend="gchar">gchar</link> *log_domain,
                                                         <link linkend="GLogLevelFlags">GLogLevelFlags</link> log_level,
                                                         const <link linkend="gchar">gchar</link> *message,
                                                         <link linkend="gpointer">gpointer</link> exclude);
</synopsis>
</refsynopsisdiv>

<refsect1 id="telepathy-glib-debug-sender.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----TpDebugSender
</synopsis>
</refsect1>



<refsect1 id="telepathy-glib-debug-sender.implemented-interfaces" role="impl_interfaces">
<title role="impl_interfaces.title">Implemented Interfaces</title>
<para>
TpDebugSender implements
 <link linkend="TpSvcDBusProperties">TpSvcDBusProperties</link> and  <link linkend="TpSvcDebug">TpSvcDebug</link>.</para>
</refsect1>


<refsect1 id="telepathy-glib-debug-sender.properties" role="properties">
<title role="properties.title">Properties</title>
<synopsis>
  &quot;<link linkend="TpDebugSender--enabled">enabled</link>&quot;                  <link linkend="gboolean">gboolean</link>              : Read / Write
</synopsis>
</refsect1>



<refsect1 id="telepathy-glib-debug-sender.description" role="desc">
<title role="desc.title">Description</title>
<para>
A <link linkend="TpDebugSender"><type>TpDebugSender</type></link> object is an object exposing the Telepathy debug interface.
There should be one object per process as it registers the object path
/org/freedesktop/Telepathy/debug. Once the object exists and has the object
path, messages can be passed to it using tp_debug_sender_add_message and
signals will automatically be fired.
</para>
<para>
<link linkend="TpDebugSender"><type>TpDebugSender</type></link> is primarily designed for use in Connection Managers, but can
be used by any other part of the Telepathy stack which wants to expose its
debugging information over the debug interface.
</para>
<para>
In a Connection Manager, one would probably keep a ref to the <link linkend="TpDebugSender"><type>TpDebugSender</type></link>
in the connection manager object, and when this said object is finalized, so
is the process's <link linkend="TpDebugSender"><type>TpDebugSender</type></link>. A GLib log handler is also provided:
<link linkend="tp-debug-sender-log-handler"><function>tp_debug_sender_log_handler()</function></link>.</para>
<para>
</para>
</refsect1>

<refsect1 id="telepathy-glib-debug-sender.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="TpDebugSender-struct" role="struct">
<title>TpDebugSender</title>
<indexterm zone="TpDebugSender-struct" role="0.7.36"><primary sortas="TpDebugSender">TpDebugSender</primary></indexterm><programlisting>typedef struct _TpDebugSender TpDebugSender;</programlisting>
<para>
An object for exposing the Telepathy debug interface.</para>
<para>
</para><variablelist role="struct">
</variablelist><para role="since">Since 0.7.36</para></refsect2>
<refsect2 id="tp-debug-sender-dup" role="function" condition="since:0.7.36">
<title>tp_debug_sender_dup ()</title>
<indexterm zone="tp-debug-sender-dup" role="0.7.36"><primary sortas="tp_debug_sender_dup">tp_debug_sender_dup</primary></indexterm><programlisting><link linkend="TpDebugSender">TpDebugSender</link> *     tp_debug_sender_dup                 (void);</programlisting>
<para>
Returns a <link linkend="TpDebugSender"><type>TpDebugSender</type></link> instance on the bus this process was activated by
(if it was launched by D-Bus service activation), or the session bus
(otherwise).
</para>
<para>
The returned <link linkend="TpDebugSender"><type>TpDebugSender</type></link> is cached; the same <link linkend="TpDebugSender"><type>TpDebugSender</type></link> object will
be returned by this function repeatedly, as long as at least one reference
exists.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a reference to the <link linkend="TpDebugSender"><type>TpDebugSender</type></link> instance for the current starter
         bus daemon

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.36</para></refsect2>
<refsect2 id="tp-debug-sender-add-message" role="function" condition="since:0.7.36">
<title>tp_debug_sender_add_message ()</title>
<indexterm zone="tp-debug-sender-add-message" role="0.7.36"><primary sortas="tp_debug_sender_add_message">tp_debug_sender_add_message</primary></indexterm><programlisting><link linkend="void">void</link>                tp_debug_sender_add_message         (<link linkend="TpDebugSender">TpDebugSender</link> *self,
                                                         <link linkend="GTimeVal">GTimeVal</link> *timestamp,
                                                         const <link linkend="gchar">gchar</link> *domain,
                                                         <link linkend="GLogLevelFlags">GLogLevelFlags</link> level,
                                                         const <link linkend="gchar">gchar</link> *string);</programlisting>
<para>
Adds a new message to the debug sender message queue. If the
<link linkend="TpDebugSender--enabled"><type>"enabled"</type></link> property is set to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>, then a NewDebugMessage
signal will be fired too.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpDebugSender"><type>TpDebugSender</type></link> instance
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timestamp</parameter>&#160;:</term>
<listitem><simpara> Time of the message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>domain</parameter>&#160;:</term>
<listitem><simpara> Message domain
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>level</parameter>&#160;:</term>
<listitem><simpara> The message level
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>string</parameter>&#160;:</term>
<listitem><simpara> The message string itself
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.36</para></refsect2>
<refsect2 id="tp-debug-sender-log-handler" role="function" condition="since:0.7.36">
<title>tp_debug_sender_log_handler ()</title>
<indexterm zone="tp-debug-sender-log-handler" role="0.7.36"><primary sortas="tp_debug_sender_log_handler">tp_debug_sender_log_handler</primary></indexterm><programlisting><link linkend="void">void</link>                tp_debug_sender_log_handler         (const <link linkend="gchar">gchar</link> *log_domain,
                                                         <link linkend="GLogLevelFlags">GLogLevelFlags</link> log_level,
                                                         const <link linkend="gchar">gchar</link> *message,
                                                         <link linkend="gpointer">gpointer</link> exclude);</programlisting>
<para>
A generic log handler designed to be used by CMs. It initially calls
<link linkend="g-log-default-handler"><function>g_log_default_handler()</function></link>, and then sends the message on the bus
<link linkend="TpDebugSender"><type>TpDebugSender</type></link>.
</para>
<para>
The <parameter>exclude</parameter> parameter is designed to allow filtering one domain, instead of
sending every message to the <link linkend="TpDebugSender--"><type>""</type></link> typical usage is for a
process to filter out messages from its own <link linkend="G-LOG-DOMAIN--CAPS"><literal>G_LOG_DOMAIN</literal></link>, so that it can
append a category to its own messages and pass them directly to
tp_debug_sender_add_message. Note that every message, regardless of
domain, is given to <link linkend="g-log-default-handler"><function>g_log_default_handler()</function></link>.
</para>
<para>
Note that a ref to a <link linkend="TpDebugSender"><type>TpDebugSender</type></link> must be kept at all times otherwise
no messages given to the handler will be sent to the Telepathy debug
interface.
</para>
<para>
An example of its usage, taking in mind the notes above, follows:
<informalexample><programlisting>
/<!-- -->* Create a main loop and debug sender *<!-- -->/
GMainLoop *loop = g_main_loop_new (NULL, FALSE);
TpDebugSender *sender = tp_debug_sender_dup ();

/<!-- -->* Set the default handler *<!-- -->/
g_log_set_default_handler (tp_debug_sender_log_handler, G_LOG_DOMAIN);

/<!-- -->* Run the main loop, but keeping a ref on the TpDebugSender from
 * the beginning of this code sample. *<!-- -->/
g_main_loop_run (loop);

/<!-- -->* g_main_loop_quit was called, so only now can we clean up the
 * TpDebugSender. *<!-- -->/
g_object_unref (sender);
</programlisting></informalexample>
</para>
<para>
(In a connection manager, replace <link linkend="g-main-loop-run"><function>g_main_loop_run()</function></link> in the above example
with <link linkend="tp-run-connection-manager"><function>tp_run_connection_manager()</function></link>.)
</para>
<para>
This function is merely for convenience if it meets the requirements.
It can easily be re-implemented in services, and does not need to be
used.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>log_domain</parameter>&#160;:</term>
<listitem><simpara> domain of the message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>log_level</parameter>&#160;:</term>
<listitem><simpara> log leve of the message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> the message itself
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>exclude</parameter>&#160;:</term>
<listitem><simpara> a log domain string to exclude from the <link linkend="TpDebugSender"><type>TpDebugSender</type></link>, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.7.36</para></refsect2>

</refsect1>
<refsect1 id="telepathy-glib-debug-sender.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="TpDebugSender--enabled" role="property"><title>The <literal>&quot;enabled&quot;</literal> property</title>
<indexterm zone="TpDebugSender--enabled"><primary sortas="TpDebugSender:enabled">TpDebugSender:enabled</primary></indexterm><programlisting>  &quot;enabled&quot;                  <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>
<link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the NewDebugMessage signal should be emitted when a new debug
message is generated.</para>
<para>
</para><para>Default value: FALSE</para>
</refsect2>
</refsect1>




</refentry>
