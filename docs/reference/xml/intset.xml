<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-TpIntSet">
<refmeta>
<refentrytitle role="top_of_page">TpIntSet</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>TpIntSet</refname>
<refpurpose>a set of unsigned integers</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;telepathy-glib/intset.h&gt;


                    <link linkend="TpIntSet">TpIntSet</link>;
<link linkend="void">void</link>                (<link linkend="TpIntFunc">*TpIntFunc</link>)                        (<link linkend="guint">guint</link> i,
                                                         <link linkend="gpointer">gpointer</link> userdata);
<link linkend="TpIntSet">TpIntSet</link>*           <link linkend="tp-intset-sized-new">tp_intset_sized_new</link>                 (<link linkend="guint">guint</link> size);
<link linkend="TpIntSet">TpIntSet</link>*           <link linkend="tp-intset-new">tp_intset_new</link>                       (void);
<link linkend="void">void</link>                <link linkend="tp-intset-destroy">tp_intset_destroy</link>                   (<link linkend="TpIntSet">TpIntSet</link> *set);
<link linkend="void">void</link>                <link linkend="tp-intset-clear">tp_intset_clear</link>                     (<link linkend="TpIntSet">TpIntSet</link> *set);
<link linkend="void">void</link>                <link linkend="tp-intset-add">tp_intset_add</link>                       (<link linkend="TpIntSet">TpIntSet</link> *set,
                                                         <link linkend="guint">guint</link> element);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-intset-remove">tp_intset_remove</link>                    (<link linkend="TpIntSet">TpIntSet</link> *set,
                                                         <link linkend="guint">guint</link> element);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-intset-is-member">tp_intset_is_member</link>                 (const <link linkend="TpIntSet">TpIntSet</link> *set,
                                                         <link linkend="guint">guint</link> element);
<link linkend="void">void</link>                <link linkend="tp-intset-foreach">tp_intset_foreach</link>                   (const <link linkend="TpIntSet">TpIntSet</link> *set,
                                                         <link linkend="TpIntFunc">TpIntFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> userdata);
<link linkend="GArray">GArray</link>*             <link linkend="tp-intset-to-array">tp_intset_to_array</link>                  (<link linkend="TpIntSet">TpIntSet</link> *set);
<link linkend="TpIntSet">TpIntSet</link>*           <link linkend="tp-intset-from-array">tp_intset_from_array</link>                (<link linkend="GArray">GArray</link> *array);
<link linkend="guint">guint</link>               <link linkend="tp-intset-size">tp_intset_size</link>                      (const <link linkend="TpIntSet">TpIntSet</link> *set);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-intset-is-equal">tp_intset_is_equal</link>                  (const <link linkend="TpIntSet">TpIntSet</link> *left,
                                                         const <link linkend="TpIntSet">TpIntSet</link> *right);
<link linkend="TpIntSet">TpIntSet</link>*           <link linkend="tp-intset-copy">tp_intset_copy</link>                      (const <link linkend="TpIntSet">TpIntSet</link> *orig);
<link linkend="TpIntSet">TpIntSet</link>*           <link linkend="tp-intset-intersection">tp_intset_intersection</link>              (const <link linkend="TpIntSet">TpIntSet</link> *left,
                                                         const <link linkend="TpIntSet">TpIntSet</link> *right);
<link linkend="TpIntSet">TpIntSet</link>*           <link linkend="tp-intset-union">tp_intset_union</link>                     (const <link linkend="TpIntSet">TpIntSet</link> *left,
                                                         const <link linkend="TpIntSet">TpIntSet</link> *right);
<link linkend="TpIntSet">TpIntSet</link>*           <link linkend="tp-intset-difference">tp_intset_difference</link>                (const <link linkend="TpIntSet">TpIntSet</link> *left,
                                                         const <link linkend="TpIntSet">TpIntSet</link> *right);
<link linkend="TpIntSet">TpIntSet</link>*           <link linkend="tp-intset-symmetric-difference">tp_intset_symmetric_difference</link>      (const <link linkend="TpIntSet">TpIntSet</link> *left,
                                                         const <link linkend="TpIntSet">TpIntSet</link> *right);
<link linkend="gchar">gchar</link>*              <link linkend="tp-intset-dump">tp_intset_dump</link>                      (const <link linkend="TpIntSet">TpIntSet</link> *set);
#define             <link linkend="TP-INTSET-ITER-INIT:CAPS">TP_INTSET_ITER_INIT</link>                 (set)
                    <link linkend="TpIntSetIter">TpIntSetIter</link>;
<link linkend="gboolean">gboolean</link>            <link linkend="tp-intset-iter-next">tp_intset_iter_next</link>                 (<link linkend="TpIntSetIter">TpIntSetIter</link> *iter);
</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
A <link linkend="TpIntSet"><type>TpIntSet</type></link> is a set of unsigned integers, implemented as a
dynamically-allocated bitfield.</para>
<para>

</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="TpIntSet" role="struct"/>TpIntSet</title>
<indexterm><primary>TpIntSet</primary></indexterm><programlisting>typedef struct _TpIntSet TpIntSet;</programlisting>
<para>
Opaque type representing a set of unsigned integers.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="TpIntFunc" role="function"/>TpIntFunc ()</title>
<indexterm><primary>TpIntFunc</primary></indexterm><programlisting><link linkend="void">void</link>                (*TpIntFunc)                        (<link linkend="guint">guint</link> i,
                                                         <link linkend="gpointer">gpointer</link> userdata);</programlisting>
<para>
A callback function acting on unsigned integers.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>i</parameter>&nbsp;:</term>
<listitem><simpara> The relevant integer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>userdata</parameter>&nbsp;:</term>
<listitem><simpara> Opaque user data
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-intset-sized-new" role="function"/>tp_intset_sized_new ()</title>
<indexterm><primary>tp_intset_sized_new</primary></indexterm><programlisting><link linkend="TpIntSet">TpIntSet</link>*           tp_intset_sized_new                 (<link linkend="guint">guint</link> size);</programlisting>
<para>
Allocate an integer set just large enough to store the given number of bits,
rounded up as necessary.
</para>
<para>
The set will still expand automatically if you store larger integers;
this is just an optimization to avoid wasting memory (if the set is too
large) or time (if the set is too small and needs reallocation).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara> 1 more than the largest integer you expect to store
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new, empty integer set to be destroyed with <link linkend="tp-intset-destroy"><function>tp_intset_destroy()</function></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-intset-new" role="function"/>tp_intset_new ()</title>
<indexterm><primary>tp_intset_new</primary></indexterm><programlisting><link linkend="TpIntSet">TpIntSet</link>*           tp_intset_new                       (void);</programlisting>
<para>
Allocate a new integer set with a default memory allocation.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new, empty integer set to be destroyed with <link linkend="tp-intset-destroy"><function>tp_intset_destroy()</function></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-intset-destroy" role="function"/>tp_intset_destroy ()</title>
<indexterm><primary>tp_intset_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                tp_intset_destroy                   (<link linkend="TpIntSet">TpIntSet</link> *set);</programlisting>
<para>
Free all memory used by the set.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>set</parameter>&nbsp;:</term>
<listitem><simpara> set
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-intset-clear" role="function"/>tp_intset_clear ()</title>
<indexterm><primary>tp_intset_clear</primary></indexterm><programlisting><link linkend="void">void</link>                tp_intset_clear                     (<link linkend="TpIntSet">TpIntSet</link> *set);</programlisting>
<para>
Unset every integer in the set.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>set</parameter>&nbsp;:</term>
<listitem><simpara> set
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-intset-add" role="function"/>tp_intset_add ()</title>
<indexterm><primary>tp_intset_add</primary></indexterm><programlisting><link linkend="void">void</link>                tp_intset_add                       (<link linkend="TpIntSet">TpIntSet</link> *set,
                                                         <link linkend="guint">guint</link> element);</programlisting>
<para>
Add an integer into a TpIntSet.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>set</parameter>&nbsp;:</term>
<listitem><simpara> set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>element</parameter>&nbsp;:</term>
<listitem><simpara> integer to add
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-intset-remove" role="function"/>tp_intset_remove ()</title>
<indexterm><primary>tp_intset_remove</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_intset_remove                    (<link linkend="TpIntSet">TpIntSet</link> *set,
                                                         <link linkend="guint">guint</link> element);</programlisting>
<para>
Remove an integer from a TpIntSet</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>set</parameter>&nbsp;:</term>
<listitem><simpara> set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>element</parameter>&nbsp;:</term>
<listitem><simpara> integer to add
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>element</parameter> was previously in <parameter>set</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-intset-is-member" role="function"/>tp_intset_is_member ()</title>
<indexterm><primary>tp_intset_is_member</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_intset_is_member                 (const <link linkend="TpIntSet">TpIntSet</link> *set,
                                                         <link linkend="guint">guint</link> element);</programlisting>
<para>
Tests if <parameter>element</parameter> is a member of <parameter>set</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>set</parameter>&nbsp;:</term>
<listitem><simpara> set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>element</parameter>&nbsp;:</term>
<listitem><simpara> integer to test
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>element</parameter> is in <parameter>set</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-intset-foreach" role="function"/>tp_intset_foreach ()</title>
<indexterm><primary>tp_intset_foreach</primary></indexterm><programlisting><link linkend="void">void</link>                tp_intset_foreach                   (const <link linkend="TpIntSet">TpIntSet</link> *set,
                                                         <link linkend="TpIntFunc">TpIntFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> userdata);</programlisting>
<para>
Call <parameter>func</parameter>(element, <parameter>userdata</parameter>) for each element of <parameter>set</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>set</parameter>&nbsp;:</term>
<listitem><simpara> set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara> <parameter>TpIntFunc</parameter> to use to iterate the set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>userdata</parameter>&nbsp;:</term>
<listitem><simpara> user data to pass to each call of <parameter>func</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-intset-to-array" role="function"/>tp_intset_to_array ()</title>
<indexterm><primary>tp_intset_to_array</primary></indexterm><programlisting><link linkend="GArray">GArray</link>*             tp_intset_to_array                  (<link linkend="TpIntSet">TpIntSet</link> *set);</programlisting>
<para>
<!--Returns: says it all--></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>set</parameter>&nbsp;:</term>
<listitem><simpara> set to convert
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a GArray of guint (which must be freed by the caller) containing
the same integers as <parameter>set</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-intset-from-array" role="function"/>tp_intset_from_array ()</title>
<indexterm><primary>tp_intset_from_array</primary></indexterm><programlisting><link linkend="TpIntSet">TpIntSet</link>*           tp_intset_from_array                (<link linkend="GArray">GArray</link> *array);</programlisting>
<para>
<!--Returns: says it all--></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>array</parameter>&nbsp;:</term>
<listitem><simpara> An array of guint
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> A set containing the same integers as <parameter>array</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-intset-size" role="function"/>tp_intset_size ()</title>
<indexterm><primary>tp_intset_size</primary></indexterm><programlisting><link linkend="guint">guint</link>               tp_intset_size                      (const <link linkend="TpIntSet">TpIntSet</link> *set);</programlisting>
<para>
<!--Returns: says it all--></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>set</parameter>&nbsp;:</term>
<listitem><simpara> A set of integers
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The number of integers in <parameter>set</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-intset-is-equal" role="function"/>tp_intset_is_equal ()</title>
<indexterm><primary>tp_intset_is_equal</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_intset_is_equal                  (const <link linkend="TpIntSet">TpIntSet</link> *left,
                                                         const <link linkend="TpIntSet">TpIntSet</link> *right);</programlisting>
<para>
<!--Returns: says it all--></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>left</parameter>&nbsp;:</term>
<listitem><simpara> A set of integers
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>right</parameter>&nbsp;:</term>
<listitem><simpara> A set of integers
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>left</parameter> and <parameter>right</parameter> contain the same bits
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-intset-copy" role="function"/>tp_intset_copy ()</title>
<indexterm><primary>tp_intset_copy</primary></indexterm><programlisting><link linkend="TpIntSet">TpIntSet</link>*           tp_intset_copy                      (const <link linkend="TpIntSet">TpIntSet</link> *orig);</programlisting>
<para>
<!--Returns: says it all--></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>orig</parameter>&nbsp;:</term>
<listitem><simpara> A set of integers
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> A set containing the same integers as <parameter>orig</parameter>, to be freed with
<link linkend="tp-intset-destroy"><function>tp_intset_destroy()</function></link> by the caller
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-intset-intersection" role="function"/>tp_intset_intersection ()</title>
<indexterm><primary>tp_intset_intersection</primary></indexterm><programlisting><link linkend="TpIntSet">TpIntSet</link>*           tp_intset_intersection              (const <link linkend="TpIntSet">TpIntSet</link> *left,
                                                         const <link linkend="TpIntSet">TpIntSet</link> *right);</programlisting>
<para>
<!--Returns: says it all--></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>left</parameter>&nbsp;:</term>
<listitem><simpara> The left operand
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>right</parameter>&nbsp;:</term>
<listitem><simpara> The right operand
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The set of those integers which are in both <parameter>left</parameter> and <parameter>right</parameter>
(analogous to the bitwise operation left &amp; right), to be freed with
<link linkend="tp-intset-destroy"><function>tp_intset_destroy()</function></link> by the caller
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-intset-union" role="function"/>tp_intset_union ()</title>
<indexterm><primary>tp_intset_union</primary></indexterm><programlisting><link linkend="TpIntSet">TpIntSet</link>*           tp_intset_union                     (const <link linkend="TpIntSet">TpIntSet</link> *left,
                                                         const <link linkend="TpIntSet">TpIntSet</link> *right);</programlisting>
<para>
<!--Returns: says it all--></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>left</parameter>&nbsp;:</term>
<listitem><simpara> The left operand
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>right</parameter>&nbsp;:</term>
<listitem><simpara> The right operand
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The set of those integers which are in either <parameter>left</parameter> or <parameter>right</parameter>
(analogous to the bitwise operation left | right), to be freed with
<link linkend="tp-intset-destroy"><function>tp_intset_destroy()</function></link> by the caller
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-intset-difference" role="function"/>tp_intset_difference ()</title>
<indexterm><primary>tp_intset_difference</primary></indexterm><programlisting><link linkend="TpIntSet">TpIntSet</link>*           tp_intset_difference                (const <link linkend="TpIntSet">TpIntSet</link> *left,
                                                         const <link linkend="TpIntSet">TpIntSet</link> *right);</programlisting>
<para>
<!--Returns: says it all--></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>left</parameter>&nbsp;:</term>
<listitem><simpara> The left operand
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>right</parameter>&nbsp;:</term>
<listitem><simpara> The right operand
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The set of those integers which are in <parameter>left</parameter> and not in <parameter>right</parameter>
(analogous to the bitwise operation left &amp; (~right)), to be freed with
<link linkend="tp-intset-destroy"><function>tp_intset_destroy()</function></link> by the caller
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-intset-symmetric-difference" role="function"/>tp_intset_symmetric_difference ()</title>
<indexterm><primary>tp_intset_symmetric_difference</primary></indexterm><programlisting><link linkend="TpIntSet">TpIntSet</link>*           tp_intset_symmetric_difference      (const <link linkend="TpIntSet">TpIntSet</link> *left,
                                                         const <link linkend="TpIntSet">TpIntSet</link> *right);</programlisting>
<para>
<!--Returns: says it all--></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>left</parameter>&nbsp;:</term>
<listitem><simpara> The left operand
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>right</parameter>&nbsp;:</term>
<listitem><simpara> The right operand
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The set of those integers which are in either <parameter>left</parameter> or <parameter>right</parameter>
but not both (analogous to the bitwise operation left ^ right), to be freed
with <link linkend="tp-intset-destroy"><function>tp_intset_destroy()</function></link> by the caller
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-intset-dump" role="function"/>tp_intset_dump ()</title>
<indexterm><primary>tp_intset_dump</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*              tp_intset_dump                      (const <link linkend="TpIntSet">TpIntSet</link> *set);</programlisting>
<para>
<!--Returns: says it all--></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>set</parameter>&nbsp;:</term>
<listitem><simpara> An integer set
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a string which the caller must free with g_free, listing the
numbers in <parameter>set</parameter> in a human-readable format
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="TP-INTSET-ITER-INIT:CAPS" role="macro"/>TP_INTSET_ITER_INIT()</title>
<indexterm><primary>TP_INTSET_ITER_INIT</primary></indexterm><programlisting>#define TP_INTSET_ITER_INIT(set) { (set), (guint)(-1) }
</programlisting>
<para>
A suitable static initializer for a <link linkend="TpIntSetIter"><type>TpIntSetIter</type></link>, to be used as follows:
</para>
<para>
<informalexample><programlisting>
void
do_something (const TpIntSet *intset)
{
  TpIntSetIter iter = TP_INTSET_ITER_INIT (intset);
  /<!-- -->* ... do something with iter ... *<!-- -->/
}
</programlisting></informalexample></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>set</parameter>&nbsp;:</term>
<listitem><simpara> A set of integers
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="TpIntSetIter" role="struct"/>TpIntSetIter</title>
<indexterm><primary>TpIntSetIter</primary></indexterm><programlisting>typedef struct {
    const TpIntSet *set;
    guint element;
} TpIntSetIter;
</programlisting>
<para>
A structure representing iteration over a set of integers. Must be
initialized with either <link linkend="TP-INTSET-ITER-INIT:CAPS"><function>TP_INTSET_ITER_INIT()</function></link> or <link linkend="tp-intset-iter-init"><function>tp_intset_iter_init()</function></link>.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term>const&nbsp;<link linkend="TpIntSet">TpIntSet</link>&nbsp;*<structfield>set</structfield>;</term>
<listitem><simpara> The set iterated over.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint">guint</link>&nbsp;<structfield>element</structfield>;</term>
<listitem><simpara> Must be (guint)(-1) before iteration starts. Set to the next
 element in the set by <link linkend="tp-intset-iter-next"><function>tp_intset_iter_next()</function></link>; undefined after
 <link linkend="tp-intset-iter-next"><function>tp_intset_iter_next()</function></link> returns <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-intset-iter-next" role="function"/>tp_intset_iter_next ()</title>
<indexterm><primary>tp_intset_iter_next</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_intset_iter_next                 (<link linkend="TpIntSetIter">TpIntSetIter</link> *iter);</programlisting>
<para>
If there are integers in (<parameter>iter->set</parameter>) higher than (<parameter>iter->element</parameter>), set
(iter->element) to the next one and return <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>. Otherwise return <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>.
</para>
<para>
Usage:
</para>
<para>
<informalexample><programlisting>
TpIntSetIter iter = TP_INTSET_INIT (intset);
while (tp_intset_iter_next (&amp;iter))
{
  printf ("%u is in the intset\n", iter.element);
}
</programlisting></informalexample></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara> An iterator originally initialized with TP_INTSET_INIT(set)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if (<parameter>iter->element</parameter>) has been advanced
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1>
<title>See Also</title>
<link linkend="TpHandleSet"><type>TpHandleSet</type></link>
</refsect1>


<refsect1><refsect2 /><refsect2 /></refsect1>
</refentry>
