<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-run">
<refmeta>
<refentrytitle role="top_of_page">Connection manager life cycle</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Connection manager life cycle</refname>
<refpurpose>entry point for telepathy-glib connection managers</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;telepathy-glib/run.h&gt;


<link linkend="int">int</link>                 <link linkend="tp-run-connection-manager">tp_run_connection_manager</link>           (const <link linkend="char">char</link> *prog_name,
                                                         const <link linkend="char">char</link> *version,
                                                         <link linkend="TpBaseConnectionManager">TpBaseConnectionManager</link>* (construct_cmvoid) (),
                                                         <link linkend="int">int</link> argc,
                                                         <link linkend="char">char</link> **argv);
</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
<link linkend="tp-run-connection-manager"><function>tp_run_connection_manager()</function></link> provides a convenient entry point for
telepathy-glib connection managers. It initializes most of the
functionality the CM will need, constructs a connection manager object
and lets it run.
</para>
<para>
This function also manages the connection manager's lifetime - if there
are no new connections for a while, it times out and exits.</para>
<para>

</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="tp-run-connection-manager" role="function"/>tp_run_connection_manager ()</title>
<indexterm><primary>tp_run_connection_manager</primary></indexterm><programlisting><link linkend="int">int</link>                 tp_run_connection_manager           (const <link linkend="char">char</link> *prog_name,
                                                         const <link linkend="char">char</link> *version,
                                                         <link linkend="TpBaseConnectionManager">TpBaseConnectionManager</link>* (construct_cmvoid) (),
                                                         <link linkend="int">int</link> argc,
                                                         <link linkend="char">char</link> **argv);</programlisting>
<para>
Run the connection manager by initializing libraries, constructing
a main loop, instantiating a connection manager and running the main
loop. When this function returns, the program should exit.
</para>
<para>
If the connection manager does not create a connection within a
short arbitrary time (currently 5 seconds), either on startup or after
the last open connection is disconnected, and the PERSIST debug
flag is not set, return 0.
</para>
<para>
If registering the connection manager on D-Bus fails, return 1.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>prog_name</parameter>&nbsp;:</term>
<listitem><simpara> The program name to be used in debug messages etc.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>version</parameter>&nbsp;:</term>
<listitem><simpara> The program version
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>construct_cm</parameter>&nbsp;:</term>
<listitem><simpara> A function which will return the connection manager
               object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>argc</parameter>&nbsp;:</term>
<listitem><simpara> The number of arguments passed to the program
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>argv</parameter>&nbsp;:</term>
<listitem><simpara> The arguments passed to the program
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the status code with which the process should exit
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>





<refsect1><refsect2 /><refsect2 /></refsect1>
</refentry>
