<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="TpBaseConnectionManager">
<refmeta>
<refentrytitle role="top_of_page" id="TpBaseConnectionManager.top_of_page">TpBaseConnectionManager</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>TpBaseConnectionManager</refname>
<refpurpose>base class for <link linkend="TpSvcConnectionManager"><type>TpSvcConnectionManager</type></link> implementations</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv id="TpBaseConnectionManager.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;telepathy-glib/base-connection-manager.h&gt;

<link linkend="gboolean">gboolean</link>            (<link linkend="TpCMParamFilter">*TpCMParamFilter</link>)                  (const <link linkend="TpCMParamSpec">TpCMParamSpec</link> *paramspec,
                                                         <link linkend="GValue">GValue</link> *value,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cm-param-filter-string-nonempty">tp_cm_param_filter_string_nonempty</link>  (const <link linkend="TpCMParamSpec">TpCMParamSpec</link> *paramspec,
                                                         <link linkend="GValue">GValue</link> *value,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-cm-param-filter-uint-nonzero">tp_cm_param_filter_uint_nonzero</link>     (const <link linkend="TpCMParamSpec">TpCMParamSpec</link> *paramspec,
                                                         <link linkend="GValue">GValue</link> *value,
                                                         <link linkend="GError">GError</link> **error);
                    <link linkend="TpCMParamSpec">TpCMParamSpec</link>;
                    <link linkend="TpCMProtocolSpec">TpCMProtocolSpec</link>;
                    <link linkend="TpBaseConnectionManager-struct">TpBaseConnectionManager</link>;
                    <link linkend="TpBaseConnectionManagerClass">TpBaseConnectionManagerClass</link>;
<link linkend="TpBaseConnection">TpBaseConnection</link>*   (<link linkend="TpBaseConnectionManagerNewConnFunc">*TpBaseConnectionManagerNewConnFunc</link>)
                                                        (<link linkend="TpBaseConnectionManager">TpBaseConnectionManager</link> *self,
                                                         const <link linkend="gchar">gchar</link> *proto,
                                                         <link linkend="TpIntSet">TpIntSet</link> *params_present,
                                                         <link linkend="void">void</link> *parsed_params,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="tp-base-connection-manager-register">tp_base_connection_manager_register</link> (<link linkend="TpBaseConnectionManager">TpBaseConnectionManager</link> *self);
#define             <link linkend="TP-CM-BUS-NAME-BASE:CAPS">TP_CM_BUS_NAME_BASE</link>
#define             <link linkend="TP-CM-OBJECT-PATH-BASE:CAPS">TP_CM_OBJECT_PATH_BASE</link>
</synopsis>
</refsynopsisdiv>

<refsect1 id="TpBaseConnectionManager.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----TpBaseConnectionManager
</synopsis>

</refsect1>



<refsect1 id="TpBaseConnectionManager.implemented-interfaces" role="impl_interfaces">
<title role="impl_interfaces.title">Implemented Interfaces</title>
<para>
TpBaseConnectionManager implements
 <link linkend="TpSvcConnectionManager">TpSvcConnectionManager</link>.</para>

</refsect1>



<refsect1 id="TpBaseConnectionManager.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="TpBaseConnectionManager-no-more-connections">no-more-connections</link>&quot;                            : Run Last / Has Details
</synopsis>
</refsect1>


<refsect1 id="TpBaseConnectionManager.description" role="desc">
<title role="desc.title">Description</title>
<para>
This base class makes it easier to write <link linkend="TpSvcConnectionManager"><type>TpSvcConnectionManager</type></link>
implementations by managing the D-Bus object path and bus name,
and maintaining a table of active connections. Subclasses should usually
only need to override the members of the class data structure.</para>
<para>

</para>
</refsect1>

<refsect1 id="TpBaseConnectionManager.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="TpCMParamFilter" role="function">
<title>TpCMParamFilter ()</title>
<indexterm zone="TpCMParamFilter"><primary>TpCMParamFilter</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            (*TpCMParamFilter)                  (const <link linkend="TpCMParamSpec">TpCMParamSpec</link> *paramspec,
                                                         <link linkend="GValue">GValue</link> *value,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Signature of a callback used to validate and/or normalize user-provided
CM parameter values.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>paramspec</parameter>&nbsp;:</term>
<listitem><simpara> The parameter specification. The filter is likely to use
 name (for the error message if the value is invalid) and filter_data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> The value for that parameter provided by the user.
 May be changed to contain a different value of the same type, if
 some sort of normalization is required
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> Used to raise <link linkend="TP-ERROR-INVALID-ARGUMENT:CAPS"><literal>TP_ERROR_INVALID_ARGUMENT</literal></link> if the given value is
 rejected
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> to accept, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> (with <parameter>error</parameter> set) to reject
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cm-param-filter-string-nonempty" role="function">
<title>tp_cm_param_filter_string_nonempty ()</title>
<indexterm zone="tp-cm-param-filter-string-nonempty"><primary>tp_cm_param_filter_string_nonempty</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cm_param_filter_string_nonempty  (const <link linkend="TpCMParamSpec">TpCMParamSpec</link> *paramspec,
                                                         <link linkend="GValue">GValue</link> *value,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
A <link linkend="TpCMParamFilter"><type>TpCMParamFilter</type></link> which rejects empty strings.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>paramspec</parameter>&nbsp;:</term>
<listitem><simpara> The parameter specification for a string parameter
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> A GValue containing a string, which will not be altered
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an error if the string is empty
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> to accept, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> (with <parameter>error</parameter> set) to reject
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cm-param-filter-uint-nonzero" role="function">
<title>tp_cm_param_filter_uint_nonzero ()</title>
<indexterm zone="tp-cm-param-filter-uint-nonzero"><primary>tp_cm_param_filter_uint_nonzero</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_cm_param_filter_uint_nonzero     (const <link linkend="TpCMParamSpec">TpCMParamSpec</link> *paramspec,
                                                         <link linkend="GValue">GValue</link> *value,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
A <link linkend="TpCMParamFilter"><type>TpCMParamFilter</type></link> which rejects zero, useful for server port numbers.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>paramspec</parameter>&nbsp;:</term>
<listitem><simpara> The parameter specification for a guint parameter
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> A GValue containing a guint, which will not be altered
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> Used to return an error if the guint is 0
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> to accept, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> (with <parameter>error</parameter> set) to reject
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TpCMParamSpec" role="struct">
<title>TpCMParamSpec</title>
<indexterm zone="TpCMParamSpec"><primary>TpCMParamSpec</primary></indexterm><programlisting>typedef struct {
    const gchar *name;
    const gchar *dtype;
    GType gtype;
    guint flags;
    gconstpointer def;
    gsize offset;

    TpCMParamFilter filter;
    gconstpointer filter_data;
} TpCMParamSpec;
</programlisting>
<para>
Structure representing a connection manager parameter, as accepted by
RequestConnection.
</para>
<para>
In addition to the fields documented here, there are two gpointer fields
which must currently be <link linkend="NULL:CAPS"><literal>NULL</literal></link>. A meaning may be defined for these in a
future version of telepathy-glib.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term>const&nbsp;<link linkend="gchar">gchar</link>&nbsp;*<structfield>name</structfield>;</term>
<listitem><simpara> Name as passed over D-Bus
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>const&nbsp;<link linkend="gchar">gchar</link>&nbsp;*<structfield>dtype</structfield>;</term>
<listitem><simpara> D-Bus type signature. We currently support 16- and 32-bit integers
        (<parameter>gtype</parameter> is INT), 16- and 32-bit unsigned integers (gtype is UINT),
        strings (gtype is STRING) and booleans (gtype is BOOLEAN).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GType">GType</link>&nbsp;<structfield>gtype</structfield>;</term>
<listitem><simpara> GLib type, derived from <parameter>dtype</parameter> as above
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint">guint</link>&nbsp;<structfield>flags</structfield>;</term>
<listitem><simpara> Some combination of TP_CONN_MGR_PARAM_FLAG_foo
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gconstpointer">gconstpointer</link>&nbsp;<structfield>def</structfield>;</term>
<listitem><simpara> Default value, as a (const gchar *) for string parameters, or
         using <link linkend="GINT-TO-POINTER:CAPS"><type>GINT_TO_POINTER</type></link> or <link linkend="GUINT-TO-POINTER:CAPS"><type>GUINT_TO_POINTER</type></link> for integer parameters
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gsize">gsize</link>&nbsp;<structfield>offset</structfield>;</term>
<listitem><simpara> Offset of the parameter in the opaque data structure. The member
         at that offset is expected to be a gint, guint, (gchar *) or
         gboolean, depending on <parameter>gtype</parameter>. Alternatively, this may be
         G_MAXSIZE, which means the parameter is obsolete, and is
         accepted but ignored.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpCMParamFilter">TpCMParamFilter</link>&nbsp;<structfield>filter</structfield>;</term>
<listitem><simpara> A callback which is used to validate or normalize the user-provided
         value before it is written into the opaque data structure
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gconstpointer">gconstpointer</link>&nbsp;<structfield>filter_data</structfield>;</term>
<listitem><simpara> Arbitrary opaque data intended for use by the filter function
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="TpCMProtocolSpec" role="struct">
<title>TpCMProtocolSpec</title>
<indexterm zone="TpCMProtocolSpec"><primary>TpCMProtocolSpec</primary></indexterm><programlisting>typedef struct {
    const gchar *name;
    const TpCMParamSpec *parameters;
    gpointer (*params_new) (void);
    void (*params_free) (gpointer);
} TpCMProtocolSpec;
</programlisting>
<para>
Structure representing a connection manager protocol.
</para>
<para>
In addition to the fields documented here, there are four gpointer fields
which must currently be <link linkend="NULL:CAPS"><literal>NULL</literal></link>. A meaning may be defined for these in a
future version of telepathy-glib.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term>const&nbsp;<link linkend="gchar">gchar</link>&nbsp;*<structfield>name</structfield>;</term>
<listitem><simpara> The name which should be passed to RequestConnection for this
       protocol.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>const&nbsp;<link linkend="TpCMParamSpec">TpCMParamSpec</link>&nbsp;*<structfield>parameters</structfield>;</term>
<listitem><simpara> An array of <link linkend="TpCMParamSpec"><type>TpCMParamSpec</type></link> representing the valid parameters
             for this protocol, terminated by a <link linkend="TpCMParamSpec"><type>TpCMParamSpec</type></link> whose name
             entry is NULL.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>params_new</structfield>&nbsp;()</term>
<listitem><simpara> A function which allocates an opaque data structure to store
             the parsed parameters for this protocol. The offset fields
             in the members of the <parameter>parameters</parameter> array refer to offsets
             within this opaque structure.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>params_free</structfield>&nbsp;()</term>
<listitem><simpara> A function which deallocates the opaque data structure
              provided by <link linkend="params-new"><type>params_new</type></link>, including deallocating its
              data members (currently, only strings) if necessary.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="TpBaseConnectionManager-struct" role="struct">
<title>TpBaseConnectionManager</title>
<indexterm zone="TpBaseConnectionManager-struct"><primary>TpBaseConnectionManager</primary></indexterm><programlisting>typedef struct _TpBaseConnectionManager TpBaseConnectionManager;</programlisting>
<para>
A base class for connection managers. There are no interesting public
fields in the instance structure.</para>
<para>

</para><variablelist role="struct">
</variablelist></refsect2>
<refsect2 id="TpBaseConnectionManagerClass" role="struct">
<title>TpBaseConnectionManagerClass</title>
<indexterm zone="TpBaseConnectionManagerClass"><primary>TpBaseConnectionManagerClass</primary></indexterm><programlisting>typedef struct {
    GObjectClass parent_class;

    const char *cm_dbus_name;
    const TpCMProtocolSpec *protocol_params;
    TpBaseConnectionManagerNewConnFunc new_connection;
} TpBaseConnectionManagerClass;
</programlisting>
<para>
The class structure for <link linkend="TpBaseConnectionManager"><type>TpBaseConnectionManager</type></link>.
</para>
<para>
In addition to the fields documented here, there are four gpointer fields
which must currently be <link linkend="NULL:CAPS"><literal>NULL</literal></link> (a meaning may be defined for these in a
future version of telepathy-glib), and a pointer to opaque private data.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="GObjectClass">GObjectClass</link>&nbsp;<structfield>parent_class</structfield>;</term>
<listitem><simpara> The parent class
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>const&nbsp;<link linkend="char">char</link>&nbsp;*<structfield>cm_dbus_name</structfield>;</term>
<listitem><simpara> The name of this connection manager, as used to construct
 D-Bus object paths and bus names. Must contain only letters, digits
 and underscores, and may not start with a digit. Must be filled in by
 subclasses in their class_init function.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>const&nbsp;<link linkend="TpCMProtocolSpec">TpCMProtocolSpec</link>&nbsp;*<structfield>protocol_params</structfield>;</term>
<listitem><simpara> An array of <link linkend="TpCMProtocolSpec"><type>TpCMProtocolSpec</type></link> structures representing
 the protocols this connection manager supports, terminated by a structure
 whose name member is <link linkend="NULL:CAPS"><literal>NULL</literal></link>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpBaseConnectionManagerNewConnFunc">TpBaseConnectionManagerNewConnFunc</link>&nbsp;<structfield>new_connection</structfield>;</term>
<listitem><simpara> A <link linkend="TpBaseConnectionManagerNewConnFunc"><type>TpBaseConnectionManagerNewConnFunc</type></link> used to construct
 new connections. Must be filled in by subclasses in their class_init
 function.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="TpBaseConnectionManagerNewConnFunc" role="function">
<title>TpBaseConnectionManagerNewConnFunc ()</title>
<indexterm zone="TpBaseConnectionManagerNewConnFunc"><primary>TpBaseConnectionManagerNewConnFunc</primary></indexterm><programlisting><link linkend="TpBaseConnection">TpBaseConnection</link>*   (*TpBaseConnectionManagerNewConnFunc)
                                                        (<link linkend="TpBaseConnectionManager">TpBaseConnectionManager</link> *self,
                                                         const <link linkend="gchar">gchar</link> *proto,
                                                         <link linkend="TpIntSet">TpIntSet</link> *params_present,
                                                         <link linkend="void">void</link> *parsed_params,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
A function that will return a new connection according to the
parsed parameters; used to implement RequestConnection.
</para>
<para>
The connection manager base class will register the bus name for the
new connection, and place a reference to it in its table of
connections until the connection's shutdown process finishes.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The connection manager implementation
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>proto</parameter>&nbsp;:</term>
<listitem><simpara> The protocol name from the D-Bus request
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>params_present</parameter>&nbsp;:</term>
<listitem><simpara> A set of integers representing the indexes into the
                 array of <link linkend="TpCMParamSpec"><type>TpCMParamSpec</type></link> of those parameters that were
                 present in the request
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parsed_params</parameter>&nbsp;:</term>
<listitem><simpara> An opaque data structure as returned by the protocol's
                params_new function, populated according to the
                parameter specifications
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> if not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, used to indicate the error if <link linkend="NULL:CAPS"><literal>NULL</literal></link> is returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the new connection object, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-base-connection-manager-register" role="function">
<title>tp_base_connection_manager_register ()</title>
<indexterm zone="tp-base-connection-manager-register"><primary>tp_base_connection_manager_register</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            tp_base_connection_manager_register (<link linkend="TpBaseConnectionManager">TpBaseConnectionManager</link> *self);</programlisting>
<para>
Register the connection manager with an appropriate object path as
determined from its <parameter>cm_dbus_name</parameter>, and register the appropriate well-known
bus name.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> The connection manager implementation
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> on success, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> (having emitted a warning to stderr)
         on failure
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TP-CM-BUS-NAME-BASE:CAPS" role="macro">
<title>TP_CM_BUS_NAME_BASE</title>
<indexterm zone="TP-CM-BUS-NAME-BASE:CAPS"><primary>TP_CM_BUS_NAME_BASE</primary></indexterm><programlisting>#define TP_CM_BUS_NAME_BASE    "org.freedesktop.Telepathy.ConnectionManager."
</programlisting>
<para>
The prefix for a connection manager's bus name, to which the CM's name
(e.g. "gabble") should be appended.</para>
<para>

</para></refsect2>
<refsect2 id="TP-CM-OBJECT-PATH-BASE:CAPS" role="macro">
<title>TP_CM_OBJECT_PATH_BASE</title>
<indexterm zone="TP-CM-OBJECT-PATH-BASE:CAPS"><primary>TP_CM_OBJECT_PATH_BASE</primary></indexterm><programlisting>#define TP_CM_OBJECT_PATH_BASE "/org/freedesktop/Telepathy/ConnectionManager/"
</programlisting>
<para>
The prefix for a connection manager's object path, to which the CM's name
(e.g. "gabble") should be appended.</para>
<para>

</para></refsect2>

</refsect1>

<refsect1 id="TpBaseConnectionManager.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="TpBaseConnectionManager-no-more-connections"><title>The <literal>&quot;no-more-connections&quot;</literal> signal</title>
<indexterm zone="TpBaseConnectionManager-no-more-connections"><primary>TpBaseConnectionManager::no-more-connections</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpBaseConnectionManager">TpBaseConnectionManager</link> *arg0,
                                                        <link linkend="gpointer">gpointer</link>                 user_data)      : Run Last / Has Details</programlisting>
<para>
Emitted when the table of active connections becomes empty.
<link linkend="tp-run-connection-manager"><function>tp_run_connection_manager()</function></link> uses this to detect when to shut down the
connection manager.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>


<refsect1 id="TpBaseConnectionManager.see-also">
<title>See Also</title>
<link linkend="TpBaseConnection"><type>TpBaseConnection</type></link>, <link linkend="TpSvcConnectionManager"><type>TpSvcConnectionManager</type></link>, <link linkend="run"><type>run</type></link>
</refsect1>

</refentry>
