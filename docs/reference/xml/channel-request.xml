<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-channel-request">
<refmeta>
<refentrytitle role="top_of_page" id="telepathy-glib-channel-request.top_of_page">TpChannelRequest</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>TpChannelRequest</refname>
<refpurpose>proxy object for a request to the Telepathy channel
 dispatcher</refpurpose>
</refnamediv>

<refsynopsisdiv id="telepathy-glib-channel-request.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>
<anchor id="TpChannelRequest"/>
<synopsis>

#include &lt;telepathy-glib/channel-request.h&gt;

                    <link linkend="TpChannelRequest-struct">TpChannelRequest</link>;
                    <link linkend="TpChannelRequestClass">TpChannelRequestClass</link>;
<link linkend="TpChannelRequest">TpChannelRequest</link> *  <link linkend="tp-channel-request-new">tp_channel_request_new</link>              (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *bus_daemon,
                                                         const <link linkend="gchar">gchar</link> *object_path,
                                                         <link linkend="GHashTable">GHashTable</link> *immutable_properties,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                <link linkend="tp-channel-request-init-known-interfaces">tp_channel_request_init_known_interfaces</link>
                                                        (void);

<link linkend="void">void</link>                (<link linkend="tp-cli-channel-request-callback-for-cancel">*tp_cli_channel_request_callback_for_cancel</link>)
                                                        (<link linkend="TpChannelRequest">TpChannelRequest</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-channel-request-call-cancel">tp_cli_channel_request_call_cancel</link> (<link linkend="TpChannelRequest">TpChannelRequest</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-channel-request-callback-for-cancel">tp_cli_channel_request_callback_for_cancel</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-request-callback-for-proceed">*tp_cli_channel_request_callback_for_proceed</link>)
                                                        (<link linkend="TpChannelRequest">TpChannelRequest</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="tp-cli-channel-request-call-proceed">tp_cli_channel_request_call_proceed</link>
                                                        (<link linkend="TpChannelRequest">TpChannelRequest</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-channel-request-callback-for-proceed">tp_cli_channel_request_callback_for_proceed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-request-signal-callback-failed">*tp_cli_channel_request_signal_callback_failed</link>)
                                                        (<link linkend="TpChannelRequest">TpChannelRequest</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg_Error,
                                                         const <link linkend="gchar">gchar</link> *arg_Message,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-channel-request-connect-to-failed">tp_cli_channel_request_connect_to_failed</link>
                                                        (<link linkend="TpChannelRequest">TpChannelRequest</link> *proxy,
                                                         <link linkend="tp-cli-channel-request-signal-callback-failed">tp_cli_channel_request_signal_callback_failed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                (<link linkend="tp-cli-channel-request-signal-callback-succeeded">*tp_cli_channel_request_signal_callback_succeeded</link>)
                                                        (<link linkend="TpChannelRequest">TpChannelRequest</link> *proxy,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="tp-cli-channel-request-connect-to-succeeded">tp_cli_channel_request_connect_to_succeeded</link>
                                                        (<link linkend="TpChannelRequest">TpChannelRequest</link> *proxy,
                                                         <link linkend="tp-cli-channel-request-signal-callback-succeeded">tp_cli_channel_request_signal_callback_succeeded</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
</synopsis>
</refsynopsisdiv>

<refsect1 id="telepathy-glib-channel-request.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="TpProxy">TpProxy</link>
         +----TpChannelRequest
</synopsis>
</refsect1>






<refsect1 id="telepathy-glib-channel-request.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="TpChannelRequest-succeeded">succeeded</link>&quot;                                      : Run Last / Has Details
</synopsis>
</refsect1>


<refsect1 id="telepathy-glib-channel-request.description" role="desc">
<title role="desc.title">Description</title>
<para>
Requesting a channel from the channel dispatcher can take some time, so an
object is created in the channel dispatcher to represent each request.
Objects of the <link linkend="TpChannelRequest"><type>TpChannelRequest</type></link> class provide access to one of those
objects.</para>
<para>
</para>
</refsect1>

<refsect1 id="telepathy-glib-channel-request.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="TpChannelRequest-struct" role="struct">
<title>TpChannelRequest</title>
<indexterm zone="TpChannelRequest-struct" role="0.7.UNRELEASED"><primary sortas="TpChannelRequest">TpChannelRequest</primary></indexterm><programlisting>typedef struct _TpChannelRequest TpChannelRequest;</programlisting>
<para>
Requesting a channel from the channel dispatcher can take some time, so an
object is created in the channel dispatcher to represent each request. This
proxy represents one of those objects.
</para>
<para>
Any client can call <link linkend="tp-cli-channel-request-call-cancel"><function>tp_cli_channel_request_call_cancel()</function></link> at any time to
attempt to cancel the request.
</para>
<para>
On success, the <link linkend="TpChannelRequest-succeeded"><type>"succeeded"</type></link> signal will be emitted.
Immediately after that, the <link linkend="TpProxy-invalidated"><type>"invalidated"</type></link> signal will be emitted,
with the domain <link linkend="TP-DBUS-ERRORS--CAPS"><literal>TP_DBUS_ERRORS</literal></link> and the error code
<link linkend="TP-DBUS-ERROR-OBJECT-REMOVED--CAPS"><literal>TP_DBUS_ERROR_OBJECT_REMOVED</literal></link> (this is not an error condition, it merely
indicates that the channel request no longer exists).
</para>
<para>
On failure, the <link linkend="TpProxy-invalidated"><type>"invalidated"</type></link> signal will be emitted with some
other suitable error, usually from the <link linkend="TP-ERRORS--CAPS"><literal>TP_ERRORS</literal></link> domain.
</para>
<para>
If the channel dispatcher crashes or exits, the <link linkend="TpProxy-invalidated"><type>"invalidated"</type></link>
signal will be emitted with the domain <link linkend="TP-DBUS-ERRORS--CAPS"><literal>TP_DBUS_ERRORS</literal></link> and the error code
<link linkend="TP-DBUS-ERROR-NAME-OWNER-LOST--CAPS"><literal>TP_DBUS_ERROR_NAME_OWNER_LOST</literal></link>.
</para>
<para>
This proxy is usable but incomplete: accessors for the Account,
UserActionTime, PreferredHandler, Requests and Interfaces properties will
be added in a later version of telepathy-glib, along with a mechanism
similar to <link linkend="tp-connection-call-when-ready"><function>tp_connection_call_when_ready()</function></link>.
</para>
<para>
Until suitable convenience methods are implemented, the generic
<link linkend="tp-cli-dbus-properties-call-get-all"><function>tp_cli_dbus_properties_call_get_all()</function></link> method can be used to get those
properties.</para>
<para>
</para><para role="since">Since 0.7.UNRELEASED</para></refsect2>
<refsect2 id="TpChannelRequestClass" role="struct">
<title>TpChannelRequestClass</title>
<indexterm zone="TpChannelRequestClass"><primary sortas="TpChannelRequestClass">TpChannelRequestClass</primary></indexterm><programlisting>typedef struct {
} TpChannelRequestClass;
</programlisting>
<para>
The class of a <link linkend="TpChannelRequest"><type>TpChannelRequest</type></link>.</para>
<para>
</para></refsect2>
<refsect2 id="tp-channel-request-new" role="function">
<title>tp_channel_request_new ()</title>
<indexterm zone="tp-channel-request-new"><primary sortas="tp_channel_request_new">tp_channel_request_new</primary></indexterm><programlisting><link linkend="TpChannelRequest">TpChannelRequest</link> *  tp_channel_request_new              (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *bus_daemon,
                                                         const <link linkend="gchar">gchar</link> *object_path,
                                                         <link linkend="GHashTable">GHashTable</link> *immutable_properties,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Convenience function to create a new channel request proxy.
</para>
<para>
If the channel request was newly created, the client making the request
is responsible for calling <link linkend="tp-cli-channel-request-call-proceed"><function>tp_cli_channel_request_call_proceed()</function></link> when it
is ready for the channel request to proceed.
</para>
<para>
The <parameter>immutable_properties</parameter> argument is not yet used.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bus_daemon</parameter>&#160;:</term>
<listitem><simpara> Proxy for the D-Bus daemon
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object_path</parameter>&#160;:</term>
<listitem><simpara> The non-NULL object path of this channel request
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>immutable_properties</parameter>&#160;:</term>
<listitem><simpara> As many as are known of the immutable D-Bus
 properties of this channel request, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if none are known
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> Used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a new reference to an channel request proxy, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if
   <parameter>object_path</parameter> is not syntactically valid or the channel dispatcher is
   not running
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-channel-request-init-known-interfaces" role="function" condition="since:0.7.UNRELEASED">
<title>tp_channel_request_init_known_interfaces ()</title>
<indexterm zone="tp-channel-request-init-known-interfaces" role="0.7.UNRELEASED"><primary sortas="tp_channel_request_init_known_interfaces">tp_channel_request_init_known_interfaces</primary></indexterm><programlisting><link linkend="void">void</link>                tp_channel_request_init_known_interfaces
                                                        (void);</programlisting>
<para>
Ensure that the known interfaces for TpChannelRequest have been set up.
This is done automatically when necessary, but for correct
overriding of library interfaces by local extensions, you should
call this function before calling
<link linkend="tp-proxy-or-subclass-hook-on-interface-add"><function>tp_proxy_or_subclass_hook_on_interface_add()</function></link> with first argument
<link linkend="TP-TYPE-CHANNEL-REQUEST--CAPS"><literal>TP_TYPE_CHANNEL_REQUEST</literal></link>.</para>
<para>
</para><para role="since">Since 0.7.UNRELEASED</para></refsect2>
<refsect2 id="tp-cli-channel-request-callback-for-cancel" role="function">
<title>tp_cli_channel_request_callback_for_cancel ()</title>
<indexterm zone="tp-cli-channel-request-callback-for-cancel"><primary sortas="tp_cli_channel_request_callback_for_cancel">tp_cli_channel_request_callback_for_cancel</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_request_callback_for_cancel)
                                                        (<link linkend="TpChannelRequest">TpChannelRequest</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a Cancel method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-request-call-cancel" role="function">
<title>tp_cli_channel_request_call_cancel ()</title>
<indexterm zone="tp-cli-channel-request-call-cancel"><primary sortas="tp_cli_channel_request_call_cancel">tp_cli_channel_request_call_cancel</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_channel_request_call_cancel (<link linkend="TpChannelRequest">TpChannelRequest</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-channel-request-callback-for-cancel">tp_cli_channel_request_callback_for_cancel</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a Cancel method call.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;Cancel the channel request. The precise effect depends on the           current progress of the request.&lt;/p&gt;          &lt;p&gt;If the connection manager has not already been asked to create           a channel, then &lt;tp:member-ref&gt;Failed&lt;/tp:member-ref&gt; is emitted           immediately, and the channel request is removed.&lt;/p&gt;          &lt;p&gt;If the connection manager has already been asked to create a           channel but has not produced one yet (e.g. if &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy&quot;&gt;Connection.Interface.Requests.CreateChannel&lt;/tp:dbus-ref&gt;           has been called, but has not yet returned), then the           ChannelDispatcher will remember that the request has been cancelled.           When the channel appears, it will be closed (if it was newly           created and can be closed), and will not be dispatched to a           handler.&lt;/p&gt;          &lt;p&gt;If the connection manager has already returned a channel, but the           channel has not yet been dispatched to a handler           then the channel dispatcher will not dispatch that           channel to a handler. If the channel was newly created for this           request, the channel dispatcher will close it with &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.Channel&quot;&gt;Close&lt;/tp:dbus-ref&gt;;           otherwise, the channel dispatcher will ignore it. In either case,           &lt;tp:member-ref&gt;Failed&lt;/tp:member-ref&gt; will be emitted when processing           has been completed.&lt;/p&gt;          &lt;p&gt;If &lt;tp:member-ref&gt;Failed&lt;/tp:member-ref&gt; is emitted in response to           this method, the error SHOULD be           &lt;code&gt;org.freedesktop.Telepathy.Error.Cancelled&lt;/code&gt;.&lt;/p&gt;          &lt;p&gt;If the channel has already been dispatched to a handler, then           it&apos;s too late to call this method, and the channel request will           no longer exist.&lt;/p&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-request-callback-for-proceed" role="function">
<title>tp_cli_channel_request_callback_for_proceed ()</title>
<indexterm zone="tp-cli-channel-request-callback-for-proceed"><primary sortas="tp_cli_channel_request_callback_for_proceed">tp_cli_channel_request_callback_for_proceed</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_request_callback_for_proceed)
                                                        (<link linkend="TpChannelRequest">TpChannelRequest</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a Proceed method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-request-call-proceed" role="function">
<title>tp_cli_channel_request_call_proceed ()</title>
<indexterm zone="tp-cli-channel-request-call-proceed"><primary sortas="tp_cli_channel_request_call_proceed">tp_cli_channel_request_call_proceed</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * tp_cli_channel_request_call_proceed
                                                        (<link linkend="TpChannelRequest">TpChannelRequest</link> *proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="tp-cli-channel-request-callback-for-proceed">tp_cli_channel_request_callback_for_proceed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a Proceed method call.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;Proceed with the channel request.&lt;/p&gt;          &lt;tp:rationale&gt;           &lt;p&gt;The client that created this object calls this method             when it has connected signal handlers for             &lt;tp:member-ref&gt;Succeeded&lt;/tp:member-ref&gt; and             &lt;tp:member-ref&gt;Failed&lt;/tp:member-ref&gt;.&lt;/p&gt;         &lt;/tp:rationale&gt;          &lt;p&gt;Clients other than the client which created the ChannelRequest           MUST NOT call this method.&lt;/p&gt;          &lt;p&gt;This method SHOULD return immediately; on success, the request           might still fail, but this will be indicated asynchronously           by the &lt;tp:member-ref&gt;Failed&lt;/tp:member-ref&gt; signal.&lt;/p&gt;          &lt;p&gt;Proceed cannot fail, unless clients have got the life-cycle           of a ChannelRequest seriously wrong (e.g. a client calls this           method twice, or a client that did not create the ChannelRequest           calls this method). If it fails, clients SHOULD assume that the           whole ChannelRequest has become useless.&lt;/p&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-request-signal-callback-failed" role="function">
<title>tp_cli_channel_request_signal_callback_failed ()</title>
<indexterm zone="tp-cli-channel-request-signal-callback-failed"><primary sortas="tp_cli_channel_request_signal_callback_failed">tp_cli_channel_request_signal_callback_failed</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_request_signal_callback_failed)
                                                        (<link linkend="TpChannelRequest">TpChannelRequest</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> *arg_Error,
                                                         const <link linkend="gchar">gchar</link> *arg_Message,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal Failed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-channel-request-connect-to-failed"><function>tp_cli_channel_request_connect_to_failed()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Error</parameter>&#160;:</term>
<listitem><simpara> &lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;           &lt;p&gt;The name of a D-Bus error. This can come from various sources,             including the error raised by &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.Connection.Interface.Requests&quot;&gt;CreateChannel&lt;/tp:dbus-ref&gt;,             or an error generated             to represent failure to establish the &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy&quot;&gt;Connection&lt;/tp:dbus-ref&gt;.&lt;/p&gt;
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Message</parameter>&#160;:</term>
<listitem><simpara> If the first argument of the D-Bus error message was a string,           that string. Otherwise, an empty string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-request-connect-to-failed" role="function">
<title>tp_cli_channel_request_connect_to_failed ()</title>
<indexterm zone="tp-cli-channel-request-connect-to-failed"><primary sortas="tp_cli_channel_request_connect_to_failed">tp_cli_channel_request_connect_to_failed</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_channel_request_connect_to_failed
                                                        (<link linkend="TpChannelRequest">TpChannelRequest</link> *proxy,
                                                         <link linkend="tp-cli-channel-request-signal-callback-failed">tp_cli_channel_request_signal_callback_failed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal Failed.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;The channel request has failed. It is no longer present,           and further methods must not be called on it.&lt;/p&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpChannelRequest"><type>TpChannelRequest</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-request-signal-callback-succeeded" role="function">
<title>tp_cli_channel_request_signal_callback_succeeded ()</title>
<indexterm zone="tp-cli-channel-request-signal-callback-succeeded"><primary sortas="tp_cli_channel_request_signal_callback_succeeded">tp_cli_channel_request_signal_callback_succeeded</primary></indexterm><programlisting><link linkend="void">void</link>                (*tp_cli_channel_request_signal_callback_succeeded)
                                                        (<link linkend="TpChannelRequest">TpChannelRequest</link> *proxy,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal Succeeded.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="tp-cli-channel-request-connect-to-succeeded"><function>tp_cli_channel_request_connect_to_succeeded()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="tp-cli-channel-request-connect-to-succeeded" role="function">
<title>tp_cli_channel_request_connect_to_succeeded ()</title>
<indexterm zone="tp-cli-channel-request-connect-to-succeeded"><primary sortas="tp_cli_channel_request_connect_to_succeeded">tp_cli_channel_request_connect_to_succeeded</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * tp_cli_channel_request_connect_to_succeeded
                                                        (<link linkend="TpChannelRequest">TpChannelRequest</link> *proxy,
                                                         <link linkend="tp-cli-channel-request-signal-callback-succeeded">tp_cli_channel_request_signal_callback_succeeded</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal Succeeded.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;The channel request has succeeded. It is no longer present,           and further methods must not be called on it.&lt;/p&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpChannelRequest"><type>TpChannelRequest</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

<refsect1 id="telepathy-glib-channel-request.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="TpChannelRequest-succeeded" role="signal"><title>The <literal>&quot;succeeded&quot;</literal> signal</title>
<indexterm zone="TpChannelRequest-succeeded"><primary sortas="TpChannelRequest::succeeded">TpChannelRequest::succeeded</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="TpChannelRequest">TpChannelRequest</link> *self,
                                                        <link linkend="gpointer">gpointer</link>          user_data)      : Run Last / Has Details</programlisting>
<para>
Emitted when the channel request succeeds.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> the channel request proxy
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>


<refsect1 id="telepathy-glib-channel-request.see-also">
<title>See Also</title>
#TpChannelDispatcher
</refsect1>

</refentry>
