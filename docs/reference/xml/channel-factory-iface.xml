<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="telepathy-glib-TpChannelFactoryIface">
<refmeta>
<refentrytitle role="top_of_page">TpChannelFactoryIface</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>TELEPATHY-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>TpChannelFactoryIface</refname>
<refpurpose>interface for channel allocation/tracking</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;telepathy-glib/channel-factory-iface.h&gt;


<link linkend="void">void</link>                (<link linkend="TpChannelFactoryIfaceForeachImpl">*TpChannelFactoryIfaceForeachImpl</link>) (<link linkend="TpChannelFactoryIface">TpChannelFactoryIface</link> *self,
                                                         <link linkend="TpChannelFunc">TpChannelFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> data);
<link linkend="void">void</link>                (<link linkend="TpChannelFactoryIfaceProc">*TpChannelFactoryIfaceProc</link>)        (<link linkend="TpChannelFactoryIface">TpChannelFactoryIface</link> *self);
<link linkend="TpChannelFactoryRequestStatus">TpChannelFactoryRequestStatus</link> (<link linkend="TpChannelFactoryIfaceRequestImpl">*TpChannelFactoryIfaceRequestImpl</link>)
                                                        (<link linkend="TpChannelFactoryIface">TpChannelFactoryIface</link> *self,
                                                         const <link linkend="gchar">gchar</link> *chan_type,
                                                         <link linkend="TpHandleType">TpHandleType</link> handle_type,
                                                         <link linkend="guint">guint</link> handle,
                                                         <link linkend="gpointer">gpointer</link> request,
                                                         <link linkend="TpChannelIface">TpChannelIface</link> **ret,
                                                         <link linkend="GError">GError</link> **error);
enum                <link linkend="TpChannelFactoryRequestStatus">TpChannelFactoryRequestStatus</link>;
                    <link linkend="TpChannelFactoryIface">TpChannelFactoryIface</link>;
                    <link linkend="TpChannelFactoryIfaceClass">TpChannelFactoryIfaceClass</link>;
<link linkend="void">void</link>                <link linkend="tp-channel-factory-iface-close-all">tp_channel_factory_iface_close_all</link>  (<link linkend="TpChannelFactoryIface">TpChannelFactoryIface</link> *self);
<link linkend="void">void</link>                <link linkend="tp-channel-factory-iface-connecting">tp_channel_factory_iface_connecting</link> (<link linkend="TpChannelFactoryIface">TpChannelFactoryIface</link> *self);
<link linkend="void">void</link>                <link linkend="tp-channel-factory-iface-connected">tp_channel_factory_iface_connected</link>  (<link linkend="TpChannelFactoryIface">TpChannelFactoryIface</link> *self);
<link linkend="void">void</link>                <link linkend="tp-channel-factory-iface-disconnected">tp_channel_factory_iface_disconnected</link>
                                                        (<link linkend="TpChannelFactoryIface">TpChannelFactoryIface</link> *self);
<link linkend="void">void</link>                <link linkend="tp-channel-factory-iface-foreach">tp_channel_factory_iface_foreach</link>    (<link linkend="TpChannelFactoryIface">TpChannelFactoryIface</link> *self,
                                                         <link linkend="TpChannelFunc">TpChannelFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> data);
<link linkend="TpChannelFactoryRequestStatus">TpChannelFactoryRequestStatus</link> <link linkend="tp-channel-factory-iface-request">tp_channel_factory_iface_request</link>
                                                        (<link linkend="TpChannelFactoryIface">TpChannelFactoryIface</link> *self,
                                                         const <link linkend="gchar">gchar</link> *chan_type,
                                                         <link linkend="TpHandleType">TpHandleType</link> handle_type,
                                                         <link linkend="guint">guint</link> handle,
                                                         <link linkend="gpointer">gpointer</link> request,
                                                         <link linkend="TpChannelIface">TpChannelIface</link> **ret,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                <link linkend="tp-channel-factory-iface-emit-new-channel">tp_channel_factory_iface_emit_new_channel</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="TpChannelIface">TpChannelIface</link> *channel,
                                                         <link linkend="gpointer">gpointer</link> request);
<link linkend="void">void</link>                <link linkend="tp-channel-factory-iface-emit-channel-error">tp_channel_factory_iface_emit_channel_error</link>
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="TpChannelIface">TpChannelIface</link> *channel,
                                                         <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> request);

</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
A channel factory is attached to a connection. It carries out channel
requests from the connection, and responds to channel-related events
on the underlying network connection (e.g. incoming calls).
</para>
<para>
The connection has an array of channel factories. In a trivial
implementation there might be a single channel factory which handles
all requests and all incoming events, but in general, there will be
multiple channel factories handling different types of channel.
</para>
<para>
For example, at the time of writing, Gabble has a roster channel factory
which handles contact lists and groups, an IM channel factory which
handles one-to-one messaging, a MUC channel factory which handles
multi-user chat rooms and the index of chat rooms, and a media channel
factory which handles VoIP calls.</para>
<para>

</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="TpChannelFactoryIfaceForeachImpl" role="function"/>TpChannelFactoryIfaceForeachImpl ()</title>
<indexterm><primary>TpChannelFactoryIfaceForeachImpl</primary></indexterm><programlisting><link linkend="void">void</link>                (*TpChannelFactoryIfaceForeachImpl) (<link linkend="TpChannelFactoryIface">TpChannelFactoryIface</link> *self,
                                                         <link linkend="TpChannelFunc">TpChannelFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Signature of an implementation of foreach, which must call
func(channel, data) for each channel managed by this factory.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing <link linkend="TpChannelFactoryIface"><type>TpChannelFactoryIface</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara> A function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> Arbitrary data to pass to <parameter>func</parameter> as the second argument
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="TpChannelFactoryIfaceProc" role="function"/>TpChannelFactoryIfaceProc ()</title>
<indexterm><primary>TpChannelFactoryIfaceProc</primary></indexterm><programlisting><link linkend="void">void</link>                (*TpChannelFactoryIfaceProc)        (<link linkend="TpChannelFactoryIface">TpChannelFactoryIface</link> *self);</programlisting>
<para>
A virtual method on a channel factory that takes no extra parameters
and returns nothing.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing <link linkend="TpChannelFactoryIface"><type>TpChannelFactoryIface</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="TpChannelFactoryIfaceRequestImpl" role="function"/>TpChannelFactoryIfaceRequestImpl ()</title>
<indexterm><primary>TpChannelFactoryIfaceRequestImpl</primary></indexterm><programlisting><link linkend="TpChannelFactoryRequestStatus">TpChannelFactoryRequestStatus</link> (*TpChannelFactoryIfaceRequestImpl)
                                                        (<link linkend="TpChannelFactoryIface">TpChannelFactoryIface</link> *self,
                                                         const <link linkend="gchar">gchar</link> *chan_type,
                                                         <link linkend="TpHandleType">TpHandleType</link> handle_type,
                                                         <link linkend="guint">guint</link> handle,
                                                         <link linkend="gpointer">gpointer</link> request,
                                                         <link linkend="TpChannelIface">TpChannelIface</link> **ret,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Signature of an implementation of RequestChannel.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing <link linkend="TpChannelFactoryIface"><type>TpChannelFactoryIface</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>chan_type</parameter>&nbsp;:</term>
<listitem><simpara> The channel type, e.g. <link linkend="TP-IFACE-CHANNEL-TYPE-TEXT:CAPS"><literal>TP_IFACE_CHANNEL_TYPE_TEXT</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handle_type</parameter>&nbsp;:</term>
<listitem><simpara> The handle type of the channel's associated handle,
              or 0 if the channel has no associated handle
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handle</parameter>&nbsp;:</term>
<listitem><simpara> The channel's associated handle, of type <parameter>handle_type</parameter>,
         or 0 if the channel has no associated handle
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request</parameter>&nbsp;:</term>
<listitem><simpara> An opaque data structure representing the channel request;
          if this request is satisfied by a newly created channel,
          this structure MUST be included in the new-channel signal
          if the newly created channel has handle 0, and MAY be
          included in the signal if the newly created channel has
          nonzero handle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&nbsp;:</term>
<listitem><simpara> Set to the new channel if it is available immediately, as
      documented in the description of <link linkend="TpChannelFactoryRequestStatus"><type>TpChannelFactoryRequestStatus</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> Set to the error if the return is
        <link linkend="TP-CHANNEL-FACTORY-REQUEST-STATUS-ERROR:CAPS"><literal>TP_CHANNEL_FACTORY_REQUEST_STATUS_ERROR</literal></link>, unset otherwise
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> one of the values of <link linkend="TpChannelFactoryRequestStatus"><type>TpChannelFactoryRequestStatus</type></link>, and
         behaves as documented for that return value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="TpChannelFactoryRequestStatus" role="enum"/>enum TpChannelFactoryRequestStatus</title>
<indexterm><primary>TpChannelFactoryRequestStatus</primary></indexterm><programlisting>typedef enum {
  TP_CHANNEL_FACTORY_REQUEST_STATUS_NOT_IMPLEMENTED = 0,
  TP_CHANNEL_FACTORY_REQUEST_STATUS_NOT_AVAILABLE,
  TP_CHANNEL_FACTORY_REQUEST_STATUS_INVALID_HANDLE,
  TP_CHANNEL_FACTORY_REQUEST_STATUS_ERROR,
  TP_CHANNEL_FACTORY_REQUEST_STATUS_CREATED,
  TP_CHANNEL_FACTORY_REQUEST_STATUS_QUEUED,
  TP_CHANNEL_FACTORY_REQUEST_STATUS_EXISTING
} TpChannelFactoryRequestStatus;
</programlisting>
<para>
Indicates the result of a channel request.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="TP-CHANNEL-FACTORY-REQUEST-STATUS-NOT-IMPLEMENTED:CAPS" role="constant"/><literal>TP_CHANNEL_FACTORY_REQUEST_STATUS_NOT_IMPLEMENTED</literal></term>
<listitem><simpara> Same as the Telepathy
 error NotImplemented. The connection will try the next factory in its
 list; if all return this, the overall result of the request will be
 NotImplemented. *<parameter>ret</parameter> and *<parameter>error</parameter> are not set
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="TP-CHANNEL-FACTORY-REQUEST-STATUS-NOT-AVAILABLE:CAPS" role="constant"/><literal>TP_CHANNEL_FACTORY_REQUEST_STATUS_NOT_AVAILABLE</literal></term>
<listitem><simpara> Same as the Telepathy
 error NotAvailable. *<parameter>ret</parameter> and *<parameter>error</parameter> are not set
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="TP-CHANNEL-FACTORY-REQUEST-STATUS-INVALID-HANDLE:CAPS" role="constant"/><literal>TP_CHANNEL_FACTORY_REQUEST_STATUS_INVALID_HANDLE</literal></term>
<listitem><simpara> Same as the Telepathy
 error InvalidHandle. *<parameter>ret</parameter> and *<parameter>error</parameter> are not set
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="TP-CHANNEL-FACTORY-REQUEST-STATUS-ERROR:CAPS" role="constant"/><literal>TP_CHANNEL_FACTORY_REQUEST_STATUS_ERROR</literal></term>
<listitem><simpara> An error other than the above.
 *<parameter>ret</parameter> is not set, *<parameter>error</parameter> is set
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="TP-CHANNEL-FACTORY-REQUEST-STATUS-CREATED:CAPS" role="constant"/><literal>TP_CHANNEL_FACTORY_REQUEST_STATUS_CREATED</literal></term>
<listitem><simpara> A new channel was created
 (possibly in response to more than one request). new-channel has already
 been emitted and *<parameter>ret</parameter> is set to the new channel.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="TP-CHANNEL-FACTORY-REQUEST-STATUS-QUEUED:CAPS" role="constant"/><literal>TP_CHANNEL_FACTORY_REQUEST_STATUS_QUEUED</literal></term>
<listitem><simpara> A new channel will be created,
 or was created but is not ready yet. Either new-channel or channel-error
 will be emitted later. *<parameter>ret</parameter> and *<parameter>error</parameter> are not set.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="TP-CHANNEL-FACTORY-REQUEST-STATUS-EXISTING:CAPS" role="constant"/><literal>TP_CHANNEL_FACTORY_REQUEST_STATUS_EXISTING</literal></term>
<listitem><simpara> An existing channel
 satisfies the request: new-channel was not emitted. *<parameter>ret</parameter> is set to the
 existing channel.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="TpChannelFactoryIface" role="struct"/>TpChannelFactoryIface</title>
<indexterm><primary>TpChannelFactoryIface</primary></indexterm><programlisting>typedef struct _TpChannelFactoryIface TpChannelFactoryIface;</programlisting>
<para>
Opaque typedef representing any channel factory implementation.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="TpChannelFactoryIfaceClass" role="struct"/>TpChannelFactoryIfaceClass</title>
<indexterm><primary>TpChannelFactoryIfaceClass</primary></indexterm><programlisting>typedef struct {
  GTypeInterface parent_class;

  TpChannelFactoryIfaceProc close_all;
  TpChannelFactoryIfaceProc connecting;
  TpChannelFactoryIfaceProc connected;
  TpChannelFactoryIfaceProc disconnected;
  TpChannelFactoryIfaceForeachImpl foreach;
  TpChannelFactoryIfaceRequestImpl request;
} TpChannelFactoryIfaceClass;
</programlisting>
<para>
The class structure and vtable for a channel factory implementation.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="GTypeInterface">GTypeInterface</link>&nbsp;<structfield>parent_class</structfield>;</term>
<listitem><simpara> Fields shared with GTypeInterface
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpChannelFactoryIfaceProc">TpChannelFactoryIfaceProc</link>&nbsp;<structfield>close_all</structfield>;</term>
<listitem><simpara> Close all channels and shut down the channel factory. It is not
 expected to be usable afterwards. This is called when the connection goes
 to disconnected state, before emitting the StatusChanged signal or calling
 <link linkend="disconnected"><function>disconnected()</function></link>. Must be filled in by implementations.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpChannelFactoryIfaceProc">TpChannelFactoryIfaceProc</link>&nbsp;<structfield>connecting</structfield>;</term>
<listitem><simpara> Called just after the connection goes from disconnected to
 connecting state. May be NULL if nothing special needs to happen.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpChannelFactoryIfaceProc">TpChannelFactoryIfaceProc</link>&nbsp;<structfield>connected</structfield>;</term>
<listitem><simpara> Called just after the connection goes from connecting to
 connected state. May be NULL if nothing special needs to happen.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpChannelFactoryIfaceProc">TpChannelFactoryIfaceProc</link>&nbsp;<structfield>disconnected</structfield>;</term>
<listitem><simpara> Called just after the connection goes to disconnected state.
 This is always called after <link linkend="close-all"><function>close_all()</function></link>. May be NULL if nothing special
 needs to happen.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpChannelFactoryIfaceForeachImpl">TpChannelFactoryIfaceForeachImpl</link>&nbsp;<structfield>foreach</structfield>;</term>
<listitem><simpara> Call func(channel, data) for each channel managed by this
 factory. Must be filled in by implementations.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="TpChannelFactoryIfaceRequestImpl">TpChannelFactoryIfaceRequestImpl</link>&nbsp;<structfield>request</structfield>;</term>
<listitem><simpara> Respond to a request for a channel. Must be filled in by
 implementations. See <link linkend="TpChannelFactoryIfaceRequestImpl"><type>TpChannelFactoryIfaceRequestImpl</type></link> for details.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-channel-factory-iface-close-all" role="function"/>tp_channel_factory_iface_close_all ()</title>
<indexterm><primary>tp_channel_factory_iface_close_all</primary></indexterm><programlisting><link linkend="void">void</link>                tp_channel_factory_iface_close_all  (<link linkend="TpChannelFactoryIface">TpChannelFactoryIface</link> *self);</programlisting>
<para>
Close all channels and shut down the channel factory. It is not expected
to be usable afterwards. This is called when the connection goes to
disconnected state, before either emitting the StatusChanged signal or
calling <link linkend="disconnected"><function>disconnected()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing <link linkend="TpChannelFactoryIface"><type>TpChannelFactoryIface</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-channel-factory-iface-connecting" role="function"/>tp_channel_factory_iface_connecting ()</title>
<indexterm><primary>tp_channel_factory_iface_connecting</primary></indexterm><programlisting><link linkend="void">void</link>                tp_channel_factory_iface_connecting (<link linkend="TpChannelFactoryIface">TpChannelFactoryIface</link> *self);</programlisting>
<para>
Indicate that the connection has gone from disconnected to connecting
state.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> An implementation of the channel factory interface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-channel-factory-iface-connected" role="function"/>tp_channel_factory_iface_connected ()</title>
<indexterm><primary>tp_channel_factory_iface_connected</primary></indexterm><programlisting><link linkend="void">void</link>                tp_channel_factory_iface_connected  (<link linkend="TpChannelFactoryIface">TpChannelFactoryIface</link> *self);</programlisting>
<para>
Indicate that the connection has gone from connecting to connected state.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> An implementation of the channel factory interface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-channel-factory-iface-disconnected" role="function"/>tp_channel_factory_iface_disconnected ()</title>
<indexterm><primary>tp_channel_factory_iface_disconnected</primary></indexterm><programlisting><link linkend="void">void</link>                tp_channel_factory_iface_disconnected
                                                        (<link linkend="TpChannelFactoryIface">TpChannelFactoryIface</link> *self);</programlisting>
<para>
Indicate that the connection has become disconnected.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> An implementation of the channel factory interface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-channel-factory-iface-foreach" role="function"/>tp_channel_factory_iface_foreach ()</title>
<indexterm><primary>tp_channel_factory_iface_foreach</primary></indexterm><programlisting><link linkend="void">void</link>                tp_channel_factory_iface_foreach    (<link linkend="TpChannelFactoryIface">TpChannelFactoryIface</link> *self,
                                                         <link linkend="TpChannelFunc">TpChannelFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Call func(channel, data) for each channel managed by this factory.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> An implementation of the channel factory interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara> A callback to be called once per channel
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> Extra data to be passed to <parameter>func</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-channel-factory-iface-request" role="function"/>tp_channel_factory_iface_request ()</title>
<indexterm><primary>tp_channel_factory_iface_request</primary></indexterm><programlisting><link linkend="TpChannelFactoryRequestStatus">TpChannelFactoryRequestStatus</link> tp_channel_factory_iface_request
                                                        (<link linkend="TpChannelFactoryIface">TpChannelFactoryIface</link> *self,
                                                         const <link linkend="gchar">gchar</link> *chan_type,
                                                         <link linkend="TpHandleType">TpHandleType</link> handle_type,
                                                         <link linkend="guint">guint</link> handle,
                                                         <link linkend="gpointer">gpointer</link> request,
                                                         <link linkend="TpChannelIface">TpChannelIface</link> **ret,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Request a channel.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing <link linkend="TpChannelFactoryIface"><type>TpChannelFactoryIface</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>chan_type</parameter>&nbsp;:</term>
<listitem><simpara> The channel type, e.g. <link linkend="TP-IFACE-CHANNEL-TYPE-TEXT:CAPS"><literal>TP_IFACE_CHANNEL_TYPE_TEXT</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handle_type</parameter>&nbsp;:</term>
<listitem><simpara> The handle type of the channel's associated handle,
              or 0 if the channel has no associated handle
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handle</parameter>&nbsp;:</term>
<listitem><simpara> The channel's associated handle, of type <parameter>handle_type</parameter>,
         or 0 if the channel has no associated handle
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request</parameter>&nbsp;:</term>
<listitem><simpara> An opaque data structure representing the channel request;
          if this request is satisfied by a newly created channel,
          this structure MUST be included in the new-channel signal
          if the newly created channel has handle 0, and MAY be
          included in the signal if the newly created channel has
          nonzero handle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&nbsp;:</term>
<listitem><simpara> Set to the new channel if it is available immediately, as
      documented in the description of <link linkend="TpChannelFactoryRequestStatus"><type>TpChannelFactoryRequestStatus</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> Set to the error if the return is
        <link linkend="TP-CHANNEL-FACTORY-REQUEST-STATUS-ERROR:CAPS"><literal>TP_CHANNEL_FACTORY_REQUEST_STATUS_ERROR</literal></link>, unset otherwise
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> one of the values of <link linkend="TpChannelFactoryRequestStatus"><type>TpChannelFactoryRequestStatus</type></link>, and
         behaves as documented for that return value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-channel-factory-iface-emit-new-channel" role="function"/>tp_channel_factory_iface_emit_new_channel ()</title>
<indexterm><primary>tp_channel_factory_iface_emit_new_channel</primary></indexterm><programlisting><link linkend="void">void</link>                tp_channel_factory_iface_emit_new_channel
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="TpChannelIface">TpChannelIface</link> *channel,
                                                         <link linkend="gpointer">gpointer</link> request);</programlisting>
<para>
Signal that a new channel has been created (new-channel signal).
If the channel was created in response to a channel request, the request
was for a nonzero handle type, and the channel has zero handle type,
request will be the request context passed to
<link linkend="tp-channel-factory-iface-request"><function>tp_channel_factory_iface_request()</function></link>. Otherwise, request may either be
NULL or a request that led to the channel's creation; callers are expected
to determine which channels satisfy which requests based on the handle
and handle-type.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing <link linkend="TpChannelFactoryIface"><type>TpChannelFactoryIface</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>channel</parameter>&nbsp;:</term>
<listitem><simpara> The new channel
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request</parameter>&nbsp;:</term>
<listitem><simpara> A request context as passed to <link linkend="tp-channel-factory-iface-request"><function>tp_channel_factory_iface_request()</function></link>,
          or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="tp-channel-factory-iface-emit-channel-error" role="function"/>tp_channel_factory_iface_emit_channel_error ()</title>
<indexterm><primary>tp_channel_factory_iface_emit_channel_error</primary></indexterm><programlisting><link linkend="void">void</link>                tp_channel_factory_iface_emit_channel_error
                                                        (<link linkend="gpointer">gpointer</link> instance,
                                                         <link linkend="TpChannelIface">TpChannelIface</link> *channel,
                                                         <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> request);</programlisting>
<para>
Signal that a new channel was created, but an error occurred before it
could become useful.
</para>
<para>
request is as for <link linkend="tp-channel-factory-iface-emit-new-channel"><type>tp_channel_factory_iface_emit_new_channel</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> An object implementing <link linkend="TpChannelFactoryIface"><type>TpChannelFactoryIface</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>channel</parameter>&nbsp;:</term>
<listitem><simpara> The new channel
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> The error that made the channel request fail
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request</parameter>&nbsp;:</term>
<listitem><simpara> A request context as passed to <link linkend="tp-channel-factory-iface-request"><type>tp_channel_factory_iface_request</type></link>,
          or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1>
<title>See Also</title>
<link linkend="TpSvcConnection"><type>TpSvcConnection</type></link>
</refsect1>


<refsect1><refsect2 /><refsect2 /></refsect1>
</refentry>
